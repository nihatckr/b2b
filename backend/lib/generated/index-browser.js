
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.CompanyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  address: 'address',
  location: 'location',
  website: 'website',
  type: 'type',
  description: 'description',
  ownerId: 'ownerId',
  isActive: 'isActive',
  settings: 'settings',
  subscriptionPlan: 'subscriptionPlan',
  subscriptionStatus: 'subscriptionStatus',
  trialStartedAt: 'trialStartedAt',
  trialEndsAt: 'trialEndsAt',
  subscriptionStartedAt: 'subscriptionStartedAt',
  currentPeriodStart: 'currentPeriodStart',
  currentPeriodEnd: 'currentPeriodEnd',
  cancelAtPeriodEnd: 'cancelAtPeriodEnd',
  cancelledAt: 'cancelledAt',
  billingCycle: 'billingCycle',
  billingEmail: 'billingEmail',
  billingAddress: 'billingAddress',
  taxId: 'taxId',
  maxUsers: 'maxUsers',
  maxSamples: 'maxSamples',
  maxOrders: 'maxOrders',
  maxCollections: 'maxCollections',
  maxStorageGB: 'maxStorageGB',
  currentUsers: 'currentUsers',
  currentSamples: 'currentSamples',
  currentOrders: 'currentOrders',
  currentCollections: 'currentCollections',
  currentStorageGB: 'currentStorageGB',
  logo: 'logo',
  coverImage: 'coverImage',
  brandColors: 'brandColors',
  profileSlug: 'profileSlug',
  isPublicProfile: 'isPublicProfile',
  socialLinks: 'socialLinks',
  defaultView: 'defaultView',
  enabledModules: 'enabledModules',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  city: 'city',
  country: 'country'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  content: 'content',
  senderId: 'senderId',
  receiverId: 'receiverId',
  isRead: 'isRead',
  type: 'type',
  orderId: 'orderId',
  sampleId: 'sampleId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  companyId: 'companyId'
};

exports.Prisma.ProductionTrackingScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  sampleId: 'sampleId',
  currentStage: 'currentStage',
  overallStatus: 'overallStatus',
  progress: 'progress',
  estimatedStartDate: 'estimatedStartDate',
  estimatedEndDate: 'estimatedEndDate',
  actualStartDate: 'actualStartDate',
  actualEndDate: 'actualEndDate',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  companyId: 'companyId',
  sewingWorkshopId: 'sewingWorkshopId',
  packagingWorkshopId: 'packagingWorkshopId',
  customerApprovalStatus: 'customerApprovalStatus',
  customerApprovedAt: 'customerApprovedAt',
  customerNote: 'customerNote',
  revisionCount: 'revisionCount'
};

exports.Prisma.RevisionScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  sampleId: 'sampleId',
  productionTrackingId: 'productionTrackingId',
  revisionNumber: 'revisionNumber',
  requestMessage: 'requestMessage',
  responseMessage: 'responseMessage',
  status: 'status',
  requestedAt: 'requestedAt',
  completedAt: 'completedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  name: 'name',
  username: 'username',
  firstName: 'firstName',
  lastName: 'lastName',
  phone: 'phone',
  companyId: 'companyId',
  role: 'role',
  isCompanyOwner: 'isCompanyOwner',
  department: 'department',
  jobTitle: 'jobTitle',
  permissions: 'permissions',
  isActive: 'isActive',
  isPendingApproval: 'isPendingApproval',
  avatar: 'avatar',
  bio: 'bio',
  socialLinks: 'socialLinks',
  emailNotifications: 'emailNotifications',
  pushNotifications: 'pushNotifications',
  language: 'language',
  timezone: 'timezone',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  resetToken: 'resetToken',
  resetTokenExpiry: 'resetTokenExpiry',
  emailVerificationExpiry: 'emailVerificationExpiry',
  emailVerificationToken: 'emailVerificationToken',
  emailVerified: 'emailVerified',
  customAvatar: 'customAvatar'
};

exports.Prisma.StandardCategoryScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  description: 'description',
  level: 'level',
  order: 'order',
  icon: 'icon',
  image: 'image',
  isActive: 'isActive',
  isPublic: 'isPublic',
  keywords: 'keywords',
  tags: 'tags',
  parentId: 'parentId',
  createdById: 'createdById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CompanyCategoryScalarFieldEnum = {
  id: 'id',
  type: 'type',
  standardCategoryId: 'standardCategoryId',
  name: 'name',
  description: 'description',
  companyId: 'companyId',
  parentId: 'parentId',
  internalCode: 'internalCode',
  order: 'order',
  isActive: 'isActive',
  productCount: 'productCount',
  lastUsedAt: 'lastUsedAt',
  customFields: 'customFields',
  authorId: 'authorId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  name: 'name',
  description: 'description',
  authorId: 'authorId',
  parentCategoryId: 'parentCategoryId',
  companyId: 'companyId'
};

exports.Prisma.CollectionScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  name: 'name',
  description: 'description',
  modelCode: 'modelCode',
  season: 'season',
  gender: 'gender',
  fit: 'fit',
  trend: 'trend',
  colors: 'colors',
  sizeGroups: 'sizeGroups',
  sizeRange: 'sizeRange',
  measurementChart: 'measurementChart',
  fabricComposition: 'fabricComposition',
  accessories: 'accessories',
  images: 'images',
  techPack: 'techPack',
  moq: 'moq',
  targetPrice: 'targetPrice',
  targetLeadTime: 'targetLeadTime',
  notes: 'notes',
  likesCount: 'likesCount',
  viewCount: 'viewCount',
  shareCount: 'shareCount',
  lastViewedAt: 'lastViewedAt',
  price: 'price',
  sku: 'sku',
  stock: 'stock',
  isActive: 'isActive',
  isFeatured: 'isFeatured',
  slug: 'slug',
  productionSchedule: 'productionSchedule',
  categoryId: 'categoryId',
  companyCategoryId: 'companyCategoryId',
  authorId: 'authorId',
  companyId: 'companyId',
  currency: 'currency',
  deadline: 'deadline',
  deadlineDays: 'deadlineDays'
};

exports.Prisma.UserFavoriteCollectionScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  userId: 'userId',
  collectionId: 'collectionId'
};

exports.Prisma.SampleScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  sampleNumber: 'sampleNumber',
  sampleType: 'sampleType',
  status: 'status',
  customerNote: 'customerNote',
  manufacturerResponse: 'manufacturerResponse',
  customDesignImages: 'customDesignImages',
  revisionRequests: 'revisionRequests',
  originalCollectionId: 'originalCollectionId',
  name: 'name',
  description: 'description',
  images: 'images',
  aiGenerated: 'aiGenerated',
  aiPrompt: 'aiPrompt',
  aiSketchUrl: 'aiSketchUrl',
  unitPrice: 'unitPrice',
  productionDays: 'productionDays',
  estimatedProductionDate: 'estimatedProductionDate',
  actualProductionDate: 'actualProductionDate',
  shippingDate: 'shippingDate',
  deliveryAddress: 'deliveryAddress',
  cargoTrackingNumber: 'cargoTrackingNumber',
  customerQuotedPrice: 'customerQuotedPrice',
  customerQuoteDays: 'customerQuoteDays',
  customerQuoteNote: 'customerQuoteNote',
  customerQuoteType: 'customerQuoteType',
  customerQuoteSentAt: 'customerQuoteSentAt',
  collectionId: 'collectionId',
  customerId: 'customerId',
  manufactureId: 'manufactureId',
  companyId: 'companyId',
  viewCount: 'viewCount',
  shareCount: 'shareCount',
  lastViewedAt: 'lastViewedAt'
};

exports.Prisma.AIAnalysisScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  detectedProduct: 'detectedProduct',
  detectedColor: 'detectedColor',
  detectedFabric: 'detectedFabric',
  detectedPattern: 'detectedPattern',
  detectedGender: 'detectedGender',
  detectedClassification: 'detectedClassification',
  detectedAccessories: 'detectedAccessories',
  technicalDescription: 'technicalDescription',
  qualityAnalysis: 'qualityAnalysis',
  qualityScore: 'qualityScore',
  costAnalysis: 'costAnalysis',
  estimatedCostMin: 'estimatedCostMin',
  estimatedCostMax: 'estimatedCostMax',
  suggestedMinOrder: 'suggestedMinOrder',
  trendAnalysis: 'trendAnalysis',
  trendScore: 'trendScore',
  targetMarket: 'targetMarket',
  salesPotential: 'salesPotential',
  designSuggestions: 'designSuggestions',
  designStyle: 'designStyle',
  designFocus: 'designFocus',
  sampleId: 'sampleId'
};

exports.Prisma.SampleProductionScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  status: 'status',
  note: 'note',
  estimatedDays: 'estimatedDays',
  actualDate: 'actualDate',
  sampleId: 'sampleId',
  updatedById: 'updatedById'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  orderNumber: 'orderNumber',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  totalPrice: 'totalPrice',
  targetPrice: 'targetPrice',
  currency: 'currency',
  deadline: 'deadline',
  notes: 'notes',
  status: 'status',
  customerNote: 'customerNote',
  manufacturerResponse: 'manufacturerResponse',
  customerQuotedPrice: 'customerQuotedPrice',
  customerQuoteDays: 'customerQuoteDays',
  customerQuoteNote: 'customerQuoteNote',
  customerQuoteType: 'customerQuoteType',
  customerQuoteSentAt: 'customerQuoteSentAt',
  productionDays: 'productionDays',
  estimatedProductionDate: 'estimatedProductionDate',
  actualProductionStart: 'actualProductionStart',
  actualProductionEnd: 'actualProductionEnd',
  shippingDate: 'shippingDate',
  deliveryAddress: 'deliveryAddress',
  cargoTrackingNumber: 'cargoTrackingNumber',
  negotiationStatus: 'negotiationStatus',
  agreedPrice: 'agreedPrice',
  agreedDays: 'agreedDays',
  agreedAt: 'agreedAt',
  agreedQuantity: 'agreedQuantity',
  collectionId: 'collectionId',
  customerId: 'customerId',
  manufactureId: 'manufactureId',
  companyId: 'companyId'
};

exports.Prisma.OrderNegotiationScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  senderId: 'senderId',
  senderRole: 'senderRole',
  unitPrice: 'unitPrice',
  productionDays: 'productionDays',
  quantity: 'quantity',
  currency: 'currency',
  message: 'message',
  status: 'status',
  respondedAt: 'respondedAt',
  respondedBy: 'respondedBy',
  createdAt: 'createdAt'
};

exports.Prisma.OrderProductionScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  status: 'status',
  note: 'note',
  estimatedDays: 'estimatedDays',
  actualDate: 'actualDate',
  orderId: 'orderId',
  updatedById: 'updatedById'
};

exports.Prisma.QuestionScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  question: 'question',
  answer: 'answer',
  isAnswered: 'isAnswered',
  isPublic: 'isPublic',
  collectionId: 'collectionId',
  customerId: 'customerId',
  manufactureId: 'manufactureId'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  rating: 'rating',
  comment: 'comment',
  isApproved: 'isApproved',
  collectionId: 'collectionId',
  customerId: 'customerId'
};

exports.Prisma.FileScalarFieldEnum = {
  id: 'id',
  filename: 'filename',
  path: 'path',
  size: 'size',
  mimetype: 'mimetype',
  encoding: 'encoding',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductionStageUpdateScalarFieldEnum = {
  id: 'id',
  productionId: 'productionId',
  stage: 'stage',
  status: 'status',
  actualStartDate: 'actualStartDate',
  actualEndDate: 'actualEndDate',
  estimatedDays: 'estimatedDays',
  notes: 'notes',
  photos: 'photos',
  isRevision: 'isRevision',
  delayReason: 'delayReason',
  extraDays: 'extraDays',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QualityControlScalarFieldEnum = {
  id: 'id',
  productionId: 'productionId',
  inspectorId: 'inspectorId',
  checkDate: 'checkDate',
  result: 'result',
  score: 'score',
  notes: 'notes',
  photos: 'photos',
  fabricDefects: 'fabricDefects',
  sewingDefects: 'sewingDefects',
  measureDefects: 'measureDefects',
  finishingDefects: 'finishingDefects',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WorkshopScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  capacity: 'capacity',
  location: 'location',
  isActive: 'isActive',
  ownerId: 'ownerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LibraryItemScalarFieldEnum = {
  id: 'id',
  scope: 'scope',
  category: 'category',
  code: 'code',
  name: 'name',
  description: 'description',
  imageUrl: 'imageUrl',
  data: 'data',
  tags: 'tags',
  internalCode: 'internalCode',
  notes: 'notes',
  isActive: 'isActive',
  isPopular: 'isPopular',
  companyId: 'companyId',
  standardItemId: 'standardItemId',
  createdById: 'createdById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  iconValue: 'iconValue'
};

exports.Prisma.BillOfMaterialScalarFieldEnum = {
  id: 'id',
  collectionId: 'collectionId',
  componentType: 'componentType',
  libraryItemId: 'libraryItemId',
  componentName: 'componentName',
  consumption: 'consumption',
  unit: 'unit',
  wastePercent: 'wastePercent',
  placement: 'placement',
  supplier: 'supplier',
  supplierCode: 'supplierCode',
  leadTime: 'leadTime',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductionRevisionScalarFieldEnum = {
  id: 'id',
  productionId: 'productionId',
  reason: 'reason',
  description: 'description',
  extraDays: 'extraDays',
  extraCost: 'extraCost',
  isApproved: 'isApproved',
  requestedById: 'requestedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  type: 'type',
  title: 'title',
  message: 'message',
  link: 'link',
  isRead: 'isRead',
  userId: 'userId',
  orderId: 'orderId',
  sampleId: 'sampleId',
  productionTrackingId: 'productionTrackingId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  data: 'data'
};

exports.Prisma.TaskScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  status: 'status',
  priority: 'priority',
  type: 'type',
  relatedStatus: 'relatedStatus',
  targetStatus: 'targetStatus',
  entityType: 'entityType',
  productionStage: 'productionStage',
  userId: 'userId',
  assignedToId: 'assignedToId',
  collectionId: 'collectionId',
  sampleId: 'sampleId',
  orderId: 'orderId',
  productionTrackingId: 'productionTrackingId',
  dueDate: 'dueDate',
  completedAt: 'completedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  notes: 'notes',
  assignedBy: 'assignedBy',
  actionData: 'actionData'
};

exports.Prisma.CompanyPartnershipScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  partnerId: 'partnerId',
  type: 'type',
  status: 'status',
  title: 'title',
  description: 'description',
  terms: 'terms',
  contractValue: 'contractValue',
  currency: 'currency',
  paymentTerms: 'paymentTerms',
  startDate: 'startDate',
  endDate: 'endDate',
  renewalDate: 'renewalDate',
  totalOrders: 'totalOrders',
  totalRevenue: 'totalRevenue',
  averageLeadTime: 'averageLeadTime',
  qualityScore: 'qualityScore',
  onTimeDelivery: 'onTimeDelivery',
  notes: 'notes',
  contractFile: 'contractFile',
  nda: 'nda',
  initiatedById: 'initiatedById',
  approvedById: 'approvedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SharedCategoryMappingScalarFieldEnum = {
  id: 'id',
  partnershipId: 'partnershipId',
  sourceCompanyId: 'sourceCompanyId',
  sourceCategoryId: 'sourceCategoryId',
  targetCompanyId: 'targetCompanyId',
  targetCategoryId: 'targetCategoryId',
  matchScore: 'matchScore',
  isManualMapping: 'isManualMapping',
  isActive: 'isActive',
  allowCrossOrders: 'allowCrossOrders',
  priceAdjustment: 'priceAdjustment',
  notes: 'notes',
  createdById: 'createdById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AdminReportScalarFieldEnum = {
  id: 'id',
  type: 'type',
  period: 'period',
  title: 'title',
  description: 'description',
  startDate: 'startDate',
  endDate: 'endDate',
  companies: 'companies',
  metrics: 'metrics',
  charts: 'charts',
  summary: 'summary',
  insights: 'insights',
  comparisons: 'comparisons',
  rankings: 'rankings',
  benchmarks: 'benchmarks',
  reportFile: 'reportFile',
  createdById: 'createdById',
  isPublic: 'isPublic',
  sharedWith: 'sharedWith',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CompanyMetricsScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  date: 'date',
  period: 'period',
  totalOrders: 'totalOrders',
  completedOrders: 'completedOrders',
  cancelledOrders: 'cancelledOrders',
  pendingOrders: 'pendingOrders',
  orderCompletionRate: 'orderCompletionRate',
  totalRevenue: 'totalRevenue',
  averageOrderValue: 'averageOrderValue',
  totalProfit: 'totalProfit',
  profitMargin: 'profitMargin',
  totalSamples: 'totalSamples',
  approvedSamples: 'approvedSamples',
  sampleApprovalRate: 'sampleApprovalRate',
  averageLeadTime: 'averageLeadTime',
  onTimeDeliveryRate: 'onTimeDeliveryRate',
  qualityScore: 'qualityScore',
  defectRate: 'defectRate',
  returnRate: 'returnRate',
  customerSatisfaction: 'customerSatisfaction',
  activeCustomers: 'activeCustomers',
  newCustomers: 'newCustomers',
  retainedCustomers: 'retainedCustomers',
  customerRetentionRate: 'customerRetentionRate',
  capacityUtilization: 'capacityUtilization',
  productivityScore: 'productivityScore',
  employeeCount: 'employeeCount',
  activeUsers: 'activeUsers',
  loginCount: 'loginCount',
  featureUsage: 'featureUsage',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.CompanyOrderByRelevanceFieldEnum = {
  name: 'name',
  email: 'email',
  phone: 'phone',
  address: 'address',
  location: 'location',
  website: 'website',
  description: 'description',
  billingEmail: 'billingEmail',
  billingAddress: 'billingAddress',
  taxId: 'taxId',
  logo: 'logo',
  coverImage: 'coverImage',
  profileSlug: 'profileSlug',
  defaultView: 'defaultView',
  city: 'city',
  country: 'country'
};

exports.Prisma.MessageOrderByRelevanceFieldEnum = {
  content: 'content',
  type: 'type'
};

exports.Prisma.ProductionTrackingOrderByRelevanceFieldEnum = {
  notes: 'notes',
  customerNote: 'customerNote'
};

exports.Prisma.RevisionOrderByRelevanceFieldEnum = {
  requestMessage: 'requestMessage',
  responseMessage: 'responseMessage',
  status: 'status'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  email: 'email',
  password: 'password',
  name: 'name',
  username: 'username',
  firstName: 'firstName',
  lastName: 'lastName',
  phone: 'phone',
  jobTitle: 'jobTitle',
  avatar: 'avatar',
  bio: 'bio',
  language: 'language',
  timezone: 'timezone',
  resetToken: 'resetToken',
  emailVerificationToken: 'emailVerificationToken',
  customAvatar: 'customAvatar'
};

exports.Prisma.StandardCategoryOrderByRelevanceFieldEnum = {
  code: 'code',
  name: 'name',
  description: 'description',
  icon: 'icon',
  image: 'image',
  keywords: 'keywords',
  tags: 'tags'
};

exports.Prisma.CompanyCategoryOrderByRelevanceFieldEnum = {
  name: 'name',
  description: 'description',
  internalCode: 'internalCode'
};

exports.Prisma.CategoryOrderByRelevanceFieldEnum = {
  name: 'name',
  description: 'description'
};

exports.Prisma.CollectionOrderByRelevanceFieldEnum = {
  name: 'name',
  description: 'description',
  modelCode: 'modelCode',
  season: 'season',
  fit: 'fit',
  trend: 'trend',
  colors: 'colors',
  sizeGroups: 'sizeGroups',
  sizeRange: 'sizeRange',
  measurementChart: 'measurementChart',
  fabricComposition: 'fabricComposition',
  accessories: 'accessories',
  images: 'images',
  techPack: 'techPack',
  notes: 'notes',
  sku: 'sku',
  slug: 'slug',
  currency: 'currency'
};

exports.Prisma.SampleOrderByRelevanceFieldEnum = {
  sampleNumber: 'sampleNumber',
  customerNote: 'customerNote',
  manufacturerResponse: 'manufacturerResponse',
  customDesignImages: 'customDesignImages',
  revisionRequests: 'revisionRequests',
  name: 'name',
  description: 'description',
  images: 'images',
  aiPrompt: 'aiPrompt',
  aiSketchUrl: 'aiSketchUrl',
  deliveryAddress: 'deliveryAddress',
  cargoTrackingNumber: 'cargoTrackingNumber',
  customerQuoteNote: 'customerQuoteNote',
  customerQuoteType: 'customerQuoteType'
};

exports.Prisma.AIAnalysisOrderByRelevanceFieldEnum = {
  detectedProduct: 'detectedProduct',
  detectedColor: 'detectedColor',
  detectedFabric: 'detectedFabric',
  detectedPattern: 'detectedPattern',
  detectedGender: 'detectedGender',
  detectedClassification: 'detectedClassification',
  detectedAccessories: 'detectedAccessories',
  technicalDescription: 'technicalDescription',
  qualityAnalysis: 'qualityAnalysis',
  costAnalysis: 'costAnalysis',
  trendAnalysis: 'trendAnalysis',
  targetMarket: 'targetMarket',
  salesPotential: 'salesPotential',
  designSuggestions: 'designSuggestions',
  designStyle: 'designStyle',
  designFocus: 'designFocus'
};

exports.Prisma.SampleProductionOrderByRelevanceFieldEnum = {
  note: 'note'
};

exports.Prisma.OrderOrderByRelevanceFieldEnum = {
  orderNumber: 'orderNumber',
  currency: 'currency',
  notes: 'notes',
  customerNote: 'customerNote',
  manufacturerResponse: 'manufacturerResponse',
  customerQuoteNote: 'customerQuoteNote',
  customerQuoteType: 'customerQuoteType',
  deliveryAddress: 'deliveryAddress',
  cargoTrackingNumber: 'cargoTrackingNumber',
  negotiationStatus: 'negotiationStatus'
};

exports.Prisma.OrderNegotiationOrderByRelevanceFieldEnum = {
  senderRole: 'senderRole',
  currency: 'currency',
  message: 'message',
  status: 'status'
};

exports.Prisma.OrderProductionOrderByRelevanceFieldEnum = {
  note: 'note'
};

exports.Prisma.QuestionOrderByRelevanceFieldEnum = {
  question: 'question',
  answer: 'answer'
};

exports.Prisma.ReviewOrderByRelevanceFieldEnum = {
  comment: 'comment'
};

exports.Prisma.FileOrderByRelevanceFieldEnum = {
  id: 'id',
  filename: 'filename',
  path: 'path',
  mimetype: 'mimetype',
  encoding: 'encoding',
  description: 'description'
};

exports.Prisma.ProductionStageUpdateOrderByRelevanceFieldEnum = {
  notes: 'notes',
  photos: 'photos',
  delayReason: 'delayReason'
};

exports.Prisma.QualityControlOrderByRelevanceFieldEnum = {
  notes: 'notes',
  photos: 'photos'
};

exports.Prisma.WorkshopOrderByRelevanceFieldEnum = {
  name: 'name',
  location: 'location'
};

exports.Prisma.LibraryItemOrderByRelevanceFieldEnum = {
  code: 'code',
  name: 'name',
  description: 'description',
  imageUrl: 'imageUrl',
  internalCode: 'internalCode',
  notes: 'notes',
  iconValue: 'iconValue'
};

exports.Prisma.BillOfMaterialOrderByRelevanceFieldEnum = {
  componentName: 'componentName',
  unit: 'unit',
  placement: 'placement',
  supplier: 'supplier',
  supplierCode: 'supplierCode',
  notes: 'notes'
};

exports.Prisma.ProductionRevisionOrderByRelevanceFieldEnum = {
  reason: 'reason',
  description: 'description'
};

exports.Prisma.NotificationOrderByRelevanceFieldEnum = {
  title: 'title',
  message: 'message',
  link: 'link'
};

exports.Prisma.TaskOrderByRelevanceFieldEnum = {
  title: 'title',
  description: 'description',
  relatedStatus: 'relatedStatus',
  targetStatus: 'targetStatus',
  entityType: 'entityType',
  productionStage: 'productionStage',
  notes: 'notes'
};

exports.Prisma.CompanyPartnershipOrderByRelevanceFieldEnum = {
  title: 'title',
  description: 'description',
  currency: 'currency',
  paymentTerms: 'paymentTerms',
  notes: 'notes',
  contractFile: 'contractFile'
};

exports.Prisma.SharedCategoryMappingOrderByRelevanceFieldEnum = {
  notes: 'notes'
};

exports.Prisma.AdminReportOrderByRelevanceFieldEnum = {
  title: 'title',
  description: 'description',
  summary: 'summary',
  insights: 'insights',
  reportFile: 'reportFile'
};
exports.CompanyType = exports.$Enums.CompanyType = {
  MANUFACTURER: 'MANUFACTURER',
  BUYER: 'BUYER',
  BOTH: 'BOTH'
};

exports.SubscriptionPlan = exports.$Enums.SubscriptionPlan = {
  FREE: 'FREE',
  STARTER: 'STARTER',
  PROFESSIONAL: 'PROFESSIONAL',
  ENTERPRISE: 'ENTERPRISE',
  CUSTOM: 'CUSTOM'
};

exports.SubscriptionStatus = exports.$Enums.SubscriptionStatus = {
  TRIAL: 'TRIAL',
  ACTIVE: 'ACTIVE',
  PAST_DUE: 'PAST_DUE',
  CANCELLED: 'CANCELLED',
  EXPIRED: 'EXPIRED'
};

exports.BillingCycle = exports.$Enums.BillingCycle = {
  MONTHLY: 'MONTHLY',
  YEARLY: 'YEARLY'
};

exports.ProductionStage = exports.$Enums.ProductionStage = {
  PLANNING: 'PLANNING',
  FABRIC: 'FABRIC',
  CUTTING: 'CUTTING',
  SEWING: 'SEWING',
  PRESSING: 'PRESSING',
  QUALITY: 'QUALITY',
  PACKAGING: 'PACKAGING',
  SHIPPING: 'SHIPPING'
};

exports.ProductionStatus = exports.$Enums.ProductionStatus = {
  IN_PROGRESS: 'IN_PROGRESS',
  WAITING: 'WAITING',
  BLOCKED: 'BLOCKED',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.ApprovalStatus = exports.$Enums.ApprovalStatus = {
  DRAFT: 'DRAFT',
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  REVISION: 'REVISION'
};

exports.Role = exports.$Enums.Role = {
  ADMIN: 'ADMIN',
  COMPANY_OWNER: 'COMPANY_OWNER',
  COMPANY_EMPLOYEE: 'COMPANY_EMPLOYEE',
  INDIVIDUAL_CUSTOMER: 'INDIVIDUAL_CUSTOMER',
  MANUFACTURE: 'MANUFACTURE',
  CUSTOMER: 'CUSTOMER'
};

exports.Department = exports.$Enums.Department = {
  PURCHASING: 'PURCHASING',
  PRODUCTION: 'PRODUCTION',
  QUALITY: 'QUALITY',
  DESIGN: 'DESIGN',
  SALES: 'SALES',
  MANAGEMENT: 'MANAGEMENT'
};

exports.CategoryLevel = exports.$Enums.CategoryLevel = {
  ROOT: 'ROOT',
  MAIN: 'MAIN',
  SUB: 'SUB',
  DETAIL: 'DETAIL'
};

exports.CategoryType = exports.$Enums.CategoryType = {
  GLOBAL_STANDARD: 'GLOBAL_STANDARD',
  COMPANY_CUSTOM: 'COMPANY_CUSTOM'
};

exports.Gender = exports.$Enums.Gender = {
  WOMEN: 'WOMEN',
  MEN: 'MEN',
  GIRLS: 'GIRLS',
  BOYS: 'BOYS',
  UNISEX: 'UNISEX'
};

exports.SampleType = exports.$Enums.SampleType = {
  STANDARD: 'STANDARD',
  REVISION: 'REVISION',
  CUSTOM: 'CUSTOM',
  DEVELOPMENT: 'DEVELOPMENT'
};

exports.SampleStatus = exports.$Enums.SampleStatus = {
  AI_DESIGN: 'AI_DESIGN',
  PENDING_APPROVAL: 'PENDING_APPROVAL',
  PENDING: 'PENDING',
  REVIEWED: 'REVIEWED',
  QUOTE_SENT: 'QUOTE_SENT',
  CUSTOMER_QUOTE_SENT: 'CUSTOMER_QUOTE_SENT',
  MANUFACTURER_REVIEWING_QUOTE: 'MANUFACTURER_REVIEWING_QUOTE',
  CONFIRMED: 'CONFIRMED',
  REJECTED: 'REJECTED',
  REJECTED_BY_CUSTOMER: 'REJECTED_BY_CUSTOMER',
  REJECTED_BY_MANUFACTURER: 'REJECTED_BY_MANUFACTURER',
  IN_DESIGN: 'IN_DESIGN',
  PATTERN_READY: 'PATTERN_READY',
  IN_PRODUCTION: 'IN_PRODUCTION',
  PRODUCTION_COMPLETE: 'PRODUCTION_COMPLETE',
  QUALITY_CHECK: 'QUALITY_CHECK',
  SHIPPED: 'SHIPPED',
  DELIVERED: 'DELIVERED',
  ON_HOLD: 'ON_HOLD',
  CANCELLED: 'CANCELLED',
  REQUESTED: 'REQUESTED',
  RECEIVED: 'RECEIVED',
  COMPLETED: 'COMPLETED'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  PENDING: 'PENDING',
  REVIEWED: 'REVIEWED',
  QUOTE_SENT: 'QUOTE_SENT',
  CUSTOMER_QUOTE_SENT: 'CUSTOMER_QUOTE_SENT',
  MANUFACTURER_REVIEWING_QUOTE: 'MANUFACTURER_REVIEWING_QUOTE',
  CONFIRMED: 'CONFIRMED',
  PRODUCTION_PLAN_SENT: 'PRODUCTION_PLAN_SENT',
  PRODUCTION_PLAN_APPROVED: 'PRODUCTION_PLAN_APPROVED',
  PRODUCTION_PLAN_REJECTED: 'PRODUCTION_PLAN_REJECTED',
  REJECTED: 'REJECTED',
  REJECTED_BY_CUSTOMER: 'REJECTED_BY_CUSTOMER',
  REJECTED_BY_MANUFACTURER: 'REJECTED_BY_MANUFACTURER',
  IN_PRODUCTION: 'IN_PRODUCTION',
  PRODUCTION_COMPLETE: 'PRODUCTION_COMPLETE',
  QUALITY_CHECK: 'QUALITY_CHECK',
  SHIPPED: 'SHIPPED',
  DELIVERED: 'DELIVERED',
  CANCELLED: 'CANCELLED'
};

exports.StageStatus = exports.$Enums.StageStatus = {
  NOT_STARTED: 'NOT_STARTED',
  IN_PROGRESS: 'IN_PROGRESS',
  ON_HOLD: 'ON_HOLD',
  COMPLETED: 'COMPLETED',
  REQUIRES_REVISION: 'REQUIRES_REVISION'
};

exports.QualityResult = exports.$Enums.QualityResult = {
  PENDING: 'PENDING',
  PASSED: 'PASSED',
  FAILED: 'FAILED',
  CONDITIONAL_PASS: 'CONDITIONAL_PASS'
};

exports.WorkshopType = exports.$Enums.WorkshopType = {
  SEWING: 'SEWING',
  PACKAGING: 'PACKAGING',
  QUALITY_CONTROL: 'QUALITY_CONTROL',
  GENERAL: 'GENERAL'
};

exports.LibraryScope = exports.$Enums.LibraryScope = {
  PLATFORM_STANDARD: 'PLATFORM_STANDARD',
  COMPANY_CUSTOM: 'COMPANY_CUSTOM'
};

exports.LibraryCategory = exports.$Enums.LibraryCategory = {
  COLOR: 'COLOR',
  FABRIC: 'FABRIC',
  MATERIAL: 'MATERIAL',
  SIZE_GROUP: 'SIZE_GROUP',
  SEASON: 'SEASON',
  FIT: 'FIT',
  CERTIFICATION: 'CERTIFICATION'
};

exports.BOMComponentType = exports.$Enums.BOMComponentType = {
  FABRIC: 'FABRIC',
  MATERIAL: 'MATERIAL',
  LABOR: 'LABOR',
  OTHER: 'OTHER'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  ORDER: 'ORDER',
  SAMPLE: 'SAMPLE',
  MESSAGE: 'MESSAGE',
  PRODUCTION: 'PRODUCTION',
  QUALITY: 'QUALITY',
  SYSTEM: 'SYSTEM',
  USER_MANAGEMENT: 'USER_MANAGEMENT'
};

exports.TaskStatus = exports.$Enums.TaskStatus = {
  TODO: 'TODO',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.TaskPriority = exports.$Enums.TaskPriority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH'
};

exports.TaskType = exports.$Enums.TaskType = {
  STATUS_CHANGE: 'STATUS_CHANGE',
  QUOTATION: 'QUOTATION',
  REVIEW_QUOTE: 'REVIEW_QUOTE',
  APPROVE_REJECT: 'APPROVE_REJECT',
  PAYMENT: 'PAYMENT',
  DOCUMENT: 'DOCUMENT',
  PRODUCTION_STAGE: 'PRODUCTION_STAGE',
  QUALITY_CHECK: 'QUALITY_CHECK',
  SHIPMENT: 'SHIPMENT',
  MATERIAL: 'MATERIAL',
  MEETING: 'MEETING',
  REVISION: 'REVISION',
  NOTIFICATION: 'NOTIFICATION',
  DEADLINE_WARNING: 'DEADLINE_WARNING',
  OTHER: 'OTHER'
};

exports.PartnershipType = exports.$Enums.PartnershipType = {
  SUPPLIER: 'SUPPLIER',
  MANUFACTURER: 'MANUFACTURER',
  DISTRIBUTOR: 'DISTRIBUTOR',
  WHITE_LABEL: 'WHITE_LABEL',
  CO_BRANDING: 'CO_BRANDING',
  SUBCONTRACTOR: 'SUBCONTRACTOR',
  STRATEGIC_PARTNER: 'STRATEGIC_PARTNER'
};

exports.PartnershipStatus = exports.$Enums.PartnershipStatus = {
  PENDING: 'PENDING',
  ACTIVE: 'ACTIVE',
  SUSPENDED: 'SUSPENDED',
  TERMINATED: 'TERMINATED',
  REJECTED: 'REJECTED'
};

exports.ReportType = exports.$Enums.ReportType = {
  COMPANY_COMPARISON: 'COMPANY_COMPARISON',
  PERFORMANCE: 'PERFORMANCE',
  FINANCIAL: 'FINANCIAL',
  QUALITY: 'QUALITY',
  MARKET_ANALYSIS: 'MARKET_ANALYSIS',
  TREND_ANALYSIS: 'TREND_ANALYSIS',
  CUSTOM: 'CUSTOM'
};

exports.ReportPeriod = exports.$Enums.ReportPeriod = {
  DAILY: 'DAILY',
  WEEKLY: 'WEEKLY',
  MONTHLY: 'MONTHLY',
  QUARTERLY: 'QUARTERLY',
  YEARLY: 'YEARLY',
  CUSTOM: 'CUSTOM'
};

exports.Prisma.ModelName = {
  Company: 'Company',
  Message: 'Message',
  ProductionTracking: 'ProductionTracking',
  Revision: 'Revision',
  User: 'User',
  StandardCategory: 'StandardCategory',
  CompanyCategory: 'CompanyCategory',
  Category: 'Category',
  Collection: 'Collection',
  UserFavoriteCollection: 'UserFavoriteCollection',
  Sample: 'Sample',
  AIAnalysis: 'AIAnalysis',
  SampleProduction: 'SampleProduction',
  Order: 'Order',
  OrderNegotiation: 'OrderNegotiation',
  OrderProduction: 'OrderProduction',
  Question: 'Question',
  Review: 'Review',
  File: 'File',
  ProductionStageUpdate: 'ProductionStageUpdate',
  QualityControl: 'QualityControl',
  Workshop: 'Workshop',
  LibraryItem: 'LibraryItem',
  BillOfMaterial: 'BillOfMaterial',
  ProductionRevision: 'ProductionRevision',
  Notification: 'Notification',
  Task: 'Task',
  CompanyPartnership: 'CompanyPartnership',
  SharedCategoryMapping: 'SharedCategoryMapping',
  AdminReport: 'AdminReport',
  CompanyMetrics: 'CompanyMetrics'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
