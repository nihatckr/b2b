// ========================================
// üîß REFACTORING / BACKUP AREA
// ========================================
// Bu dosya, server/prisma/schema.prisma dosyasƒ±nƒ±n
// yedek/refactoring versiyonudur.
//
// ‚ö†Ô∏è AKTƒ∞F KULLANIM: server/prisma/schema.prisma
// üìÅ YEDEK/TEST: backend/prisma/schema.prisma (Bu dosya)
//
// Son Senkronizasyon: 18 Ekim 2025
// ========================================

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

generator pothos {
  provider     = "prisma-pothos-types"
  clientOutput = "./prisma" // relative path from pothos output to prisma client
  output       = "../lib/pothos-prisma-types.ts"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ========================================
// üë• USER ROLES & PERMISSIONS
// ========================================
enum Role {
  ADMIN // Platform admin (Siz - full system access)
  COMPANY_OWNER // Firma sahibi (Full access kendi ≈üirketi i√ßin)
  COMPANY_EMPLOYEE // Firma √ßalƒ±≈üanƒ± (Department-based permissions)
  INDIVIDUAL_CUSTOMER // Bireysel m√º≈üteri (Limited access, firma olmadan)

  // Backward compatibility (deprecated - will be removed in future)
  MANUFACTURE
  CUSTOMER
}

// Department-based roles for COMPANY_EMPLOYEE
enum Department {
  PURCHASING // Satƒ±n Alma (Order olu≈üturma, Sample sipari≈ü)
  PRODUCTION // √úretim (Sample √ºretimi, Production tracking)
  QUALITY // Kalite Kontrol (QA, Inspection)
  DESIGN // Tasarƒ±m (Collection, Sample design)
  SALES // Satƒ±≈ü (Customer relations, Order management)
  MANAGEMENT // Y√∂netim (Full access, reports)
}

enum CompanyType {
  MANUFACTURER // √úretici firma (√ñrn: Defacto - sadece √ºretim yapar)
  BUYER // Alƒ±cƒ± firma (√ñrn: LC Waikiki - sadece sipari≈ü verir)
  BOTH // Hybrid firma (√ñrn: Zara - hem √ºretir hem alƒ±r)
}

// ========================================
// üí≥ SUBSCRIPTION & BILLING (SaaS Ready)
// ========================================
enum SubscriptionPlan {
  FREE // √úcretsiz (Trial) - Limited features
  STARTER // Ba≈ülangƒ±√ß ($29/ay) - Small teams
  PROFESSIONAL // Profesyonel ($99/ay) - Growing businesses
  ENTERPRISE // Kurumsal ($299/ay) - Large companies
  CUSTOM // √ñzel anla≈üma (Custom pricing)
}

enum SubscriptionStatus {
  TRIAL // Deneme s√ºr√ºm√º (14 g√ºn)
  ACTIVE // Aktif abonelik
  PAST_DUE // √ñdeme gecikmi≈ü
  CANCELLED // ƒ∞ptal edilmi≈ü
  EXPIRED // S√ºresi dolmu≈ü
}

enum BillingCycle {
  MONTHLY // Aylƒ±k √∂deme
  YEARLY // Yƒ±llƒ±k √∂deme (%20 indirimli)
}

// Tekstil Enums
enum Season {
  SS25 // Spring/Summer 2025
  FW25 // Fall/Winter 2025
  SS26 // Spring/Summer 2026
  FW26 // Fall/Winter 2026
  SS27
  FW27
}

enum Gender {
  WOMEN // Kadƒ±n
  MEN // Erkek
  GIRLS // Kƒ±z √áocuk
  BOYS // Erkek √áocuk
  UNISEX // Unisex
}

enum Fit {
  REGULAR // Regular
  SLIM // Slim
  RELAXED // Relaxed
  OVERSIZED // Oversized
  FITTED // Fitted
  LOOSE // Loose
}

model Company {
  id          Int         @id @default(autoincrement())
  name        String
  email       String      @unique
  phone       String?
  address     String?
  location    String? // ≈ûehir/B√∂lge: "ƒ∞stanbul", "ƒ∞zmir", "Denizli"
  website     String?
  type        CompanyType @default(MANUFACTURER)
  description String?     @db.Text

  // Owner
  owner   User? @relation("CompanyOwner", fields: [ownerId], references: [id])
  ownerId Int?  @unique

  isActive Boolean @default(true)
  settings Json? // Company-wide settings

  // ========================================
  // üé® BRANDING & PROFILE (Frontend)
  // ========================================
  logo        String? // Company logo URL: "/uploads/logos/company123.png"
  coverImage  String? // Banner/Cover image: "/uploads/covers/company123.jpg"
  brandColors Json? // { primary: "#FF5733", secondary: "#333333", accent: "#00FF00" }

  // Social & Contact
  socialLinks Json? // { website: "url", linkedin: "url", instagram: "url", facebook: "url" }

  // Public Profile
  isPublicProfile Boolean @default(false) // Public company profile page
  profileSlug     String? @unique // SEO-friendly URL: /company/defacto

  // ========================================
  // üí≥ SUBSCRIPTION & BILLING
  // ========================================
  subscriptionPlan   SubscriptionPlan   @default(FREE)
  subscriptionStatus SubscriptionStatus @default(TRIAL)
  billingCycle       BillingCycle       @default(MONTHLY)

  // Usage Limits (Plan-based)
  maxUsers       Int   @default(3) // FREE: 3, STARTER: 10, PRO: 50, ENTERPRISE: unlimited
  maxSamples     Int   @default(10) // FREE: 10, STARTER: 100, PRO: 500, ENTERPRISE: unlimited
  maxOrders      Int   @default(5) // FREE: 5, STARTER: 50, PRO: 200, ENTERPRISE: unlimited
  maxCollections Int   @default(5) // FREE: 5, STARTER: 20, PRO: 100, ENTERPRISE: unlimited
  maxStorageGB   Float @default(1.0) // FREE: 1GB, STARTER: 10GB, PRO: 100GB, ENTERPRISE: 1TB

  // Current Usage (Auto-calculated)
  currentUsers       Int   @default(0)
  currentSamples     Int   @default(0)
  currentOrders      Int   @default(0)
  currentCollections Int   @default(0)
  currentStorageGB   Float @default(0.0)

  // Trial Period
  trialStartedAt DateTime? @default(now())
  trialEndsAt    DateTime? // Auto-set to +14 days on signup

  // Billing Info
  billingEmail   String?
  taxId          String? // Vergi no
  billingAddress String? @db.Text

  // Subscription Dates
  subscriptionStartedAt DateTime?
  currentPeriodStart    DateTime?
  currentPeriodEnd      DateTime?

  // Cancellation
  cancelAtPeriodEnd Boolean   @default(false)
  cancelledAt       DateTime?

  // BOTH type i√ßin √∂zel ayarlar
  defaultView    String? // "MANUFACTURER" | "BUYER" (BOTH i√ßin hangi g√∂r√ºn√ºm default)
  enabledModules Json? // { manufacturing: true, purchasing: true } (Hangi mod√ºller aktif)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  employees          User[]               @relation("CompanyEmployees")
  categories         Category[]
  collections        Collection[]
  samples            Sample[]
  orders             Order[]
  productionTracking ProductionTracking[]
  messages           Message[]

  // Library Management
  colors         Color[]
  fabrics        Fabric[]
  sizeGroups     SizeGroup[]
  seasons        SeasonItem[]
  fits           FitItem[]
  certifications Certification[]

  // ========================================
  // PERFORMANCE INDEXES
  // ========================================
  @@index([email]) // Email lookup
  @@index([type, isActive]) // Company type + active filter
  @@index([isActive, createdAt]) // Active companies with sorting
  @@index([location]) // Location filter
  @@index([ownerId]) // Owner lookup
  @@index([subscriptionPlan]) // Plan-based queries
  @@index([subscriptionStatus]) // Active subscriptions
  @@index([trialEndsAt]) // Expiring trials
  @@index([currentPeriodEnd]) // Expiring subscriptions
  @@index([profileSlug]) // Public profile lookup
  @@index([isPublicProfile]) // Public companies filter
  // Full-text search (MySQL)
  @@fulltext([name, description])
  @@map("companies")
}

model Message {
  id         Int     @id @default(autoincrement())
  content    String  @db.Text
  senderId   Int
  receiverId Int? // Alƒ±cƒ± kullanƒ±cƒ± ID
  isRead     Boolean @default(false)
  type       String  @default("general") // "order", "sample", "general"

  // √úr√ºn bazlƒ± mesajla≈üma
  orderId  Int?
  sampleId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sender    User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver  User?    @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  order     Order?   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  sample    Sample?  @relation(fields: [sampleId], references: [id], onDelete: Cascade)
  company   Company? @relation(fields: [companyId], references: [id])
  companyId Int?

  // ========================================
  // PERFORMANCE INDEXES
  // ========================================
  @@index([senderId, createdAt]) // Sender messages with sorting
  @@index([receiverId, isRead]) // Unread messages
  @@index([receiverId, createdAt]) // Receiver messages with sorting
  @@index([orderId]) // Order messages
  @@index([sampleId]) // Sample messages
  @@index([companyId, createdAt]) // Company messages
  @@index([type, isRead]) // Type + read status
  @@index([senderId, receiverId]) // Conversation lookup
  @@map("messages")
}

model ProductionTracking {
  id       Int  @id @default(autoincrement())
  orderId  Int?
  sampleId Int?

  currentStage  ProductionStage  @default(PLANNING)
  overallStatus ProductionStatus @default(IN_PROGRESS)
  progress      Int              @default(0) // 0-100%

  estimatedStartDate DateTime?
  estimatedEndDate   DateTime?
  actualStartDate    DateTime?
  actualEndDate      DateTime?

  notes String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  order     Order?   @relation(fields: [orderId], references: [id])
  sample    Sample?  @relation(fields: [sampleId], references: [id])
  company   Company? @relation(fields: [companyId], references: [id])
  companyId Int?

  // New relations
  sewingWorkshop      Workshop? @relation("SewingWorkshop", fields: [sewingWorkshopId], references: [id])
  sewingWorkshopId    Int?
  packagingWorkshop   Workshop? @relation("PackagingWorkshop", fields: [packagingWorkshopId], references: [id])
  packagingWorkshopId Int?

  stageUpdates        ProductionStageUpdate[]
  qualityControls     QualityControl[]
  productionRevisions ProductionRevision[]
  revisions           Revision[] // Legacy
  tasks               Task[]                  @relation("ProductionTrackingTasks")
  notifications       Notification[]          @relation("ProductionNotifications")

  @@map("production_tracking")
}

model Revision {
  id                   Int       @id @default(autoincrement())
  orderId              Int?
  sampleId             Int?
  productionTrackingId Int?
  revisionNumber       Int       @default(1)
  requestMessage       String?
  responseMessage      String?
  status               String    @default("pending")
  requestedAt          DateTime  @default(now())
  completedAt          DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // Relations
  order              Order?              @relation(fields: [orderId], references: [id])
  sample             Sample?             @relation(fields: [sampleId], references: [id])
  productionTracking ProductionTracking? @relation(fields: [productionTrackingId], references: [id])

  @@map("revisions")
}

model User {
  id        Int     @id @default(autoincrement())
  email     String  @unique
  password  String
  name      String?
  username  String? @unique
  firstName String?
  lastName  String?
  phone     String?

  // Company & Role
  company   Company? @relation("CompanyEmployees", fields: [companyId], references: [id])
  companyId Int?
  role      Role     @default(INDIVIDUAL_CUSTOMER)

  // Company Ownership & Permissions
  isCompanyOwner Boolean     @default(false)
  department     Department? // Department for COMPANY_EMPLOYEE role
  jobTitle       String? // "M√ºd√ºr", "Uzman", "Koordinat√∂r"

  // ========================================
  // ÔøΩ PROFILE & UI (Frontend)
  // ========================================
  avatar      String? // Profile picture URL: "/uploads/avatars/user123.jpg"
  bio         String? @db.Text // User bio/description
  socialLinks Json? // { linkedin: "url", twitter: "url", instagram: "url" }

  // User Settings
  emailNotifications Boolean @default(true) // Email bildirimlerini al
  pushNotifications  Boolean @default(false) // Push notification
  language           String  @default("tr") // UI dili: "tr", "en"
  timezone           String  @default("Europe/Istanbul") // Saat dilimi

  // ========================================
  // ÔøΩüîê PERMISSIONS (Typed JSON)
  // ========================================
  // Format: UserPermissions type (see types/permissions.ts)
  // Example:
  // {
  //   samples: { create: true, edit: true, delete: false, viewAll: false },
  //   orders: { create: true, approve: false, cancel: false, viewAll: false },
  //   users: { invite: false, remove: false, changeRole: false },
  //   billing: { view: false, upgrade: false, managePlan: false },
  //   production: { viewAll: true, updateStage: true, qaControl: false },
  //   collections: { create: true, edit: true, delete: false, publish: false }
  // }
  permissions Json? // Detailed permission object (overrides role defaults)

  // Status
  isActive          Boolean @default(true)
  isPendingApproval Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Owned Companies
  ownedCompanies Company[] @relation("CompanyOwner")

  // Messages relation
  sentMessages     Message[]    @relation("SentMessages")
  receivedMessages Message[]    @relation("ReceivedMessages")
  categories       Category[]
  collections      Collection[]

  // Customer relations
  customerSamples   Sample[]   @relation("CustomerSamples")
  customerOrders    Order[]    @relation("CustomerOrders")
  customerQuestions Question[] @relation("CustomerQuestions")
  customerReviews   Review[]   @relation("CustomerReviews")

  // Manufacture relations
  manufactureSamples      Sample[]           @relation("ManufactureSamples")
  manufactureOrders       Order[]            @relation("ManufactureOrders")
  manufactureQuestions    Question[]         @relation("ManufactureQuestions")
  sampleProductionUpdates SampleProduction[]
  orderProductionUpdates  OrderProduction[]  @relation("OrderProductionUpdates")

  // Production system relations
  qualityInspections QualityControl[]     @relation("QualityInspector")
  ownedWorkshops     Workshop[]           @relation("WorkshopOwner")
  revisionRequests   ProductionRevision[] @relation("RevisionRequester")

  // Favorites/Likes
  favoriteCollections UserFavoriteCollection[]

  // Notifications
  notifications Notification[] @relation("UserNotifications")

  // Tasks
  tasks         Task[] @relation("UserTasks")
  assignedTasks Task[] @relation("AssignedTasks")

  // ========================================
  // PERFORMANCE INDEXES
  // ========================================
  @@index([email]) // Email lookup
  @@index([username]) // Username lookup
  @@index([companyId, role]) // Company users by role
  @@index([companyId, isActive]) // Company active users
  @@index([companyId, department]) // Company users by department
  @@index([role, isActive]) // Role + active filter
  @@index([isActive]) // Active users
  @@index([isPendingApproval]) // Pending approval filter
  @@index([createdAt]) // Date sorting
  @@map("users")
}

model Category {
  id               Int          @id @default(autoincrement())
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  name             String // Artƒ±k unique deƒüil - farklƒ± parent'lar altƒ±nda aynƒ± isim olabilir
  description      String?
  author           User?        @relation(fields: [authorId], references: [id])
  authorId         Int?
  collections      Collection[]
  subCategories    Category[]   @relation("CategoryToSubCategories")
  parentCategory   Category?    @relation("CategoryToSubCategories", fields: [parentCategoryId], references: [id])
  parentCategoryId Int?

  // Company relation
  company   Company? @relation(fields: [companyId], references: [id])
  companyId Int?

  // Aynƒ± ≈üirket, aynƒ± parent altƒ±nda aynƒ± isim olamaz
  @@unique([companyId, parentCategoryId, name])
  @@map("categories")
}

model Collection {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String?

  // ADIM 1: Temel Bilgiler
  modelCode String  @unique // THS-2024-00
  season    Season? // SS25, FW25, SS26, FW26
  // klasman -> category ile handle edilecek (G√∂mlek, Pantolon, Triko)
  gender    Gender? // Kadƒ±n, Erkek, Kƒ±z √áocuk, Erkek √áocuk
  fit       String? // Library'den se√ßilen fit adƒ±: "Slim Fit", "Regular Fit", "Relaxed Fit"
  trend     String? // Trend adƒ±: "Minimalist", "Vintage", "Sport Chic", "Y2K"

  // ADIM 2: Varyantlar ve √ñl√ß√ºler
  colors           String? // JSON array: ["beyaz", "siyah", "ye≈üil"]
  sizeGroups       String? // JSON array of group IDs: [1, 2, 3] - Birden fazla beden grubu (pantolon + g√∂mlek)
  sizeRange        String? // Manuel override: "S-XL" veya "6-16" (legacy)
  measurementChart String? // File path: /uploads/measurements/xxx.pdf

  // ADIM 3: Teknik Detaylar
  fabricComposition String? // "%100 Cotton" veya "80% Cotton 20% Polyester"
  accessories       String? @db.Text // JSON: {"buttons": "metal", "zipper": "YKK", "labels": "woven"}
  images            String? @db.Text // JSON array: ["/uploads/products/img1.jpg", ...] or ["https://..."]
  techPack          String? // File path: /uploads/techpacks/xxx.pdf

  // ADIM 4: Ticari Bilgiler
  moq            Int? // Minimum Order Quantity
  targetPrice    Float? // Hedef fiyat (USD)
  targetLeadTime Int? // Hedef termin (g√ºn)
  notes          String? @db.Text // A√ßƒ±klama/Notlar

  // Sertifikalar (GOTS, OEKO-TEX, BSCI vb.)
  certifications Certification[] @relation("CollectionCertifications")

  // Beƒüeni/Favoriler
  likesCount  Int                      @default(0) // Toplam beƒüeni sayƒ±sƒ±
  favoritedBy UserFavoriteCollection[] // Beƒüenen kullanƒ±cƒ±lar

  // ========================================
  // üìä ANALYTICS & ENGAGEMENT (Frontend)
  // ========================================
  viewCount    Int       @default(0) // Ka√ß kere g√∂r√ºnt√ºlendi
  shareCount   Int       @default(0) // Ka√ß kere payla≈üƒ±ldƒ±
  lastViewedAt DateTime? // Son g√∂r√ºnt√ºlenme zamanƒ±

  // Legacy fields (backward compatibility)
  price      Float   @default(0.00) // ≈ûimdilik targetPrice ile aynƒ±
  sku        String? @unique
  stock      Int     @default(0)
  isActive   Boolean @default(true)
  isFeatured Boolean @default(false)
  slug       String? @unique

  // Production Schedule - Her a≈üama i√ßin standart g√ºn sayƒ±sƒ±
  productionSchedule Json? // { "PLANNING": 5, "FABRIC": 3, "CUTTING": 2, "SEWING": 10, "QUALITY": 2, "PACKAGING": 2, "SHIPPING": 1 }

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?
  author     User?     @relation(fields: [authorId], references: [id]) // √úretici
  authorId   Int?

  // Relations
  samples        Sample[]   @relation("SampleCollection")
  revisedSamples Sample[]   @relation("OriginalCollection") // Bu √ºr√ºn i√ßin yapƒ±lan revize numuneleri
  orders         Order[]
  questions      Question[]
  reviews        Review[]
  tasks          Task[]     @relation("CollectionTasks")

  // Company relation
  company   Company? @relation(fields: [companyId], references: [id])
  companyId Int?

  // ========================================
  // PERFORMANCE INDEXES
  // ========================================
  @@index([companyId, isActive]) // Company active collections
  @@index([authorId]) // Author collections
  @@index([categoryId]) // Category filter
  @@index([season]) // Season filter
  @@index([gender]) // Gender filter
  @@index([isFeatured]) // Featured collections
  @@index([isActive, createdAt]) // Active collections with sorting
  @@index([slug]) // Slug lookup
  @@index([modelCode]) // Model code lookup
  @@index([createdAt]) // Date sorting
  @@index([viewCount]) // Popular collections (most viewed)
  @@index([likesCount]) // Popular collections (most liked)
  // Full-text search (MySQL)
  @@fulltext([name, description])
  @@map("collections")
}

// User Favorite Collections (Junction Table for Likes)
model UserFavoriteCollection {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId Int

  @@unique([userId, collectionId])
  @@index([userId])
  @@index([collectionId])
  @@map("user_favorite_collections")
}

// Numune talep ve √ºretim sistemi
model Sample {
  id                   Int          @id @default(autoincrement())
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  sampleNumber         String       @unique // Numune takip numarasƒ±
  sampleType           SampleType   @default(STANDARD) // Numune tipi
  status               SampleStatus @default(REQUESTED)
  customerNote         String?      @db.Text // M√º≈üteri talep notu
  manufacturerResponse String?      @db.Text // √úretici yanƒ±tƒ±/deƒüerlendirme

  // Revize/√ñzelle≈ütirme bilgileri (CUSTOM ve REVISION tipleri i√ßin)
  customDesignImages   String? @db.Text // M√º≈üteri tasarƒ±m g√∂rselleri (JSON)
  revisionRequests     String? // Revize istekleri (JSON: [{field, oldValue, newValue, note}])
  originalCollectionId Int? // Revize edilecek orijinal √ºr√ºn ID'si

  // AI Generated Sample fields
  name        String? // Sample name
  description String?  @db.Text // Sample description (long text)
  images      String?  @db.Text // JSON array of image URLs
  aiGenerated Boolean? @default(false) // Is this an AI-generated sample
  aiPrompt    String?  @db.Text // The prompt used for AI generation
  aiSketchUrl String? // The sketch/reference image URL used

  // √úretim s√ºreci bilgileri
  unitPrice               Float? // Numune birim fiyatƒ±
  productionDays          Int? // √úretici: "X g√ºnde √ºretebilirim"
  estimatedProductionDate DateTime? // Hesaplanan √ºretim tarihi
  actualProductionDate    DateTime? // Ger√ßek √ºretim tamamlanma tarihi
  shippingDate            DateTime? // Kargoya verili≈ü tarihi
  deliveryAddress         String? // Teslimat adresi
  cargoTrackingNumber     String? // Kargo takip numarasƒ± (opsiyonel)

  // M√º≈üteri Teklif Bilgileri (Order ile aynƒ±)
  customerQuotedPrice Float? // M√º≈üterinin teklif ettiƒüi fiyat
  customerQuoteDays   Int? // M√º≈üterinin istediƒüi √ºretim s√ºresi (g√ºn)
  customerQuoteNote   String?   @db.Text // M√º≈üterinin teklif notu/a√ßƒ±klamasƒ±
  customerQuoteType   String? // "STANDARD" (standartlara uygun) veya "REVISION" (revize teklif)
  customerQuoteSentAt DateTime? // M√º≈üteri teklifi g√∂nderme zamanƒ±

  collection         Collection?          @relation("SampleCollection", fields: [collectionId], references: [id])
  collectionId       Int?
  originalCollection Collection?          @relation("OriginalCollection", fields: [originalCollectionId], references: [id])
  customer           User                 @relation("CustomerSamples", fields: [customerId], references: [id])
  customerId         Int
  manufacture        User                 @relation("ManufactureSamples", fields: [manufactureId], references: [id])
  manufactureId      Int
  productionHistory  SampleProduction[] // √úretim ge√ßmi≈üi takibi
  productionTracking ProductionTracking[]
  revisions          Revision[]
  messages           Message[] // Numune bazlƒ± mesajla≈üma

  // Company relation
  company   Company? @relation(fields: [companyId], references: [id])
  companyId Int?

  // AI Analysis relation
  aiAnalysis AIAnalysis?

  // Tasks
  tasks Task[] @relation("SampleTasks")

  // Notifications
  notifications Notification[] @relation("SampleNotifications")

  // ========================================
  // üìä ANALYTICS & ENGAGEMENT (Frontend)
  // ========================================
  viewCount    Int       @default(0) // Ka√ß kere g√∂r√ºnt√ºlendi
  shareCount   Int       @default(0) // Ka√ß kere payla≈üƒ±ldƒ±
  lastViewedAt DateTime? // Son g√∂r√ºnt√ºlenme zamanƒ±

  // ========================================
  // PERFORMANCE INDEXES
  // ========================================
  @@index([status]) // Status filtering
  @@index([customerId, status]) // Customer samples by status
  @@index([manufactureId, status]) // Manufacturer samples by status
  @@index([companyId, status, createdAt]) // Company samples with sorting
  @@index([collectionId]) // Collection relation
  @@index([sampleNumber]) // Unique lookup
  @@index([sampleType, status]) // Type + status filter
  @@index([aiGenerated]) // AI generated samples filter
  @@index([createdAt]) // Date sorting
  @@index([status, createdAt]) // Status + date combination
  @@index([viewCount]) // Popular samples (most viewed)
  @@map("samples")
}

// AI Analiz Sonu√ßlarƒ± (Numune ile ili≈ükili)
model AIAnalysis {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Temel Analiz Sonu√ßlarƒ± (Form'a yazƒ±lan)
  detectedProduct        String? // Tespit edilen √ºr√ºn t√ºr√º
  detectedColor          String? // Tespit edilen renk
  detectedFabric         String? // Tespit edilen kuma≈ü
  detectedPattern        String? // Tespit edilen kalƒ±p
  detectedGender         String? // Tespit edilen cinsiyet
  detectedClassification String? // Tespit edilen klasman
  detectedAccessories    String? // Tespit edilen aksesuarlar
  technicalDescription   String? @db.Text // Teknik a√ßƒ±klama

  // Kalite Analizi
  qualityAnalysis String? @db.Text // Kalite analiz raporu
  qualityScore    Float? // Genel kalite skoru (1-10)

  // Maliyet Analizi
  costAnalysis      String? @db.Text // Maliyet analiz raporu
  estimatedCostMin  Float? // Tahmini minimum maliyet (‚Ç∫)
  estimatedCostMax  Float? // Tahmini maksimum maliyet (‚Ç∫)
  suggestedMinOrder Int? // √ñnerilen minimum sipari≈ü adedi

  // Trend Analizi
  trendAnalysis  String? @db.Text // Trend analiz raporu
  trendScore     Float? // Trend skoru (1-10)
  targetMarket   String? // Hedef pazar segmenti
  salesPotential String? // Satƒ±≈ü potansiyeli (LOW/MEDIUM/HIGH)

  // Tasarƒ±m √ñnerileri
  designSuggestions String? @db.Text // Tasarƒ±m √∂nerileri (JSON veya text)
  designStyle       String? // Se√ßilen stil y√∂n√º
  designFocus       String? // Odaklanƒ±lan alanlar (JSON array)

  // ƒ∞li≈üki
  sample   Sample @relation(fields: [sampleId], references: [id], onDelete: Cascade)
  sampleId Int    @unique

  @@map("ai_analyses")
}

// Numune √ºretim ge√ßmi≈üi takibi
model SampleProduction {
  id            Int          @id @default(autoincrement())
  createdAt     DateTime     @default(now())
  status        SampleStatus
  note          String? // √úretici a√ßƒ±klamasƒ±
  estimatedDays Int? // Bu a≈üama i√ßin tahmini g√ºn
  actualDate    DateTime? // Bu a≈üamanƒ±n ger√ßek tamamlanma tarihi
  sample        Sample       @relation(fields: [sampleId], references: [id])
  sampleId      Int
  updatedBy     User         @relation(fields: [updatedById], references: [id])
  updatedById   Int
}

// Sipari≈ü ve √ºretim sistemi
model Order {
  id                   Int         @id @default(autoincrement())
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  orderNumber          String      @unique
  quantity             Int
  unitPrice            Float // Birim fiyat
  totalPrice           Float // Toplam fiyat
  status               OrderStatus @default(PENDING)
  customerNote         String? // M√º≈üteri sipari≈ü notu
  manufacturerResponse String? // √úretici yanƒ±tƒ±/deƒüerlendirme

  // M√º≈üteri Teklif Bilgileri
  customerQuotedPrice Float? // M√º≈üterinin teklif ettiƒüi birim fiyat
  customerQuoteDays   Int? // M√º≈üterinin istediƒüi √ºretim s√ºresi (g√ºn)
  customerQuoteNote   String?   @db.Text // M√º≈üterinin teklif notu/a√ßƒ±klamasƒ±
  customerQuoteType   String? // "STANDARD" (standartlara uygun) veya "REVISION" (revize teklif)
  customerQuoteSentAt DateTime? // M√º≈üteri teklifi g√∂nderme zamanƒ±

  // √úretim s√ºreci bilgileri
  productionDays          Int? // √úretici: "X g√ºnde √ºretebilirim"
  estimatedProductionDate DateTime? // Hesaplanan √ºretim tarihi
  actualProductionStart   DateTime? // Ger√ßek √ºretime ba≈ülama tarihi
  actualProductionEnd     DateTime? // Ger√ßek √ºretim biti≈ü tarihi
  shippingDate            DateTime? // Kargoya verili≈ü tarihi
  deliveryAddress         String? // Teslimat adresi
  cargoTrackingNumber     String? // Kargo takip numarasƒ±

  collection         Collection           @relation(fields: [collectionId], references: [id])
  collectionId       Int
  customer           User                 @relation("CustomerOrders", fields: [customerId], references: [id])
  customerId         Int
  manufacture        User                 @relation("ManufactureOrders", fields: [manufactureId], references: [id])
  manufactureId      Int
  productionHistory  OrderProduction[] // √úretim s√ºre√ß takibi
  productionTracking ProductionTracking[]
  revisions          Revision[]
  messages           Message[] // Sipari≈ü bazlƒ± mesajla≈üma

  // Company relation
  company   Company? @relation(fields: [companyId], references: [id])
  companyId Int?

  // Tasks
  tasks Task[] @relation("OrderTasks")

  // Notifications
  notifications Notification[] @relation("OrderNotifications")

  // ========================================
  // PERFORMANCE INDEXES
  // ========================================
  @@index([status]) // Status filtering
  @@index([customerId, status]) // Customer orders by status
  @@index([manufactureId, status]) // Manufacturer orders by status
  @@index([companyId, status, createdAt]) // Company orders with sorting
  @@index([collectionId]) // Collection relation
  @@index([orderNumber]) // Unique lookup
  @@index([createdAt]) // Date sorting
  @@index([status, createdAt]) // Status + date combination
  @@index([estimatedProductionDate]) // Production date filter
  @@index([shippingDate]) // Shipping date filter
  @@map("orders")
}

// Sipari≈ü √ºretim ge√ßmi≈üi takibi
model OrderProduction {
  id            Int         @id @default(autoincrement())
  createdAt     DateTime    @default(now())
  status        OrderStatus
  note          String? // √úretici a√ßƒ±klamasƒ±
  estimatedDays Int? // Bu a≈üama i√ßin tahmini g√ºn
  actualDate    DateTime? // Bu a≈üamanƒ±n ger√ßek tamamlanma tarihi
  order         Order       @relation(fields: [orderId], references: [id])
  orderId       Int
  updatedBy     User        @relation("OrderProductionUpdates", fields: [updatedById], references: [id])
  updatedById   Int
}

// Soru-cevap sistemi
model Question {
  id            Int        @id @default(autoincrement())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  question      String
  answer        String?
  isAnswered    Boolean    @default(false)
  isPublic      Boolean    @default(true) // Herkese g√∂r√ºn√ºr m√º?
  collection    Collection @relation(fields: [collectionId], references: [id])
  collectionId  Int
  customer      User       @relation("CustomerQuestions", fields: [customerId], references: [id])
  customerId    Int
  manufacture   User       @relation("ManufactureQuestions", fields: [manufactureId], references: [id])
  manufactureId Int
}

// Deƒüerlendirme sistemi
model Review {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  rating       Int // 1-5 yƒ±ldƒ±z
  comment      String?
  isApproved   Boolean    @default(false) // √úretici onayƒ±
  collection   Collection @relation(fields: [collectionId], references: [id])
  collectionId Int
  customer     User       @relation("CustomerReviews", fields: [customerId], references: [id])
  customerId   Int
}

// Enum'lar
enum SampleType {
  STANDARD // Mevcut √ºr√ºn i√ßin standart numune
  REVISION // Mevcut √ºr√ºn i√ßin revize istekli numune
  CUSTOM // M√º≈üteri kendi tasarƒ±mƒ± i√ßin numune
  DEVELOPMENT // Mevcut veriler i√ßin backward compatibility
}

enum SampleStatus {
  // === ƒ∞LK A≈ûAMALAR (AI ve Talep) ===
  AI_DESIGN // AI ile olu≈üturulmu≈ü tasarƒ±m (hen√ºz √ºreticiye g√∂nderilmedi)
  PENDING_APPROVAL // √úretici onayƒ± bekleniyor (eski flow i√ßin)
  PENDING // Beklemede - Yeni talep

  // === ƒ∞NCELEME ve TEKLƒ∞F A≈ûAMASI ===
  REVIEWED // √úretici tarafƒ±ndan inceleniyor
  QUOTE_SENT // √úretici s√ºre ve fiyat teklifi g√∂nderdi
  CUSTOMER_QUOTE_SENT // M√º≈üteri teklif g√∂nderdi (standart veya revize)
  MANUFACTURER_REVIEWING_QUOTE // √úretici m√º≈üteri teklifini inceliyor

  // === ONAY/RED DURUMLAR ===
  CONFIRMED // M√º≈üteri onayladƒ±, √ºretim ba≈ülayabilir
  REJECTED // Genel red
  REJECTED_BY_CUSTOMER // M√º≈üteri tarafƒ±ndan reddedildi
  REJECTED_BY_MANUFACTURER // √úretici tarafƒ±ndan reddedildi

  // === √úRETƒ∞M A≈ûAMALARI ===
  IN_DESIGN // Tasarƒ±m a≈üamasƒ±nda (eski flow)
  PATTERN_READY // Kalƒ±p hazƒ±r (eski flow)
  IN_PRODUCTION // √úretim a≈üamasƒ±nda
  PRODUCTION_COMPLETE // √úretim tamamlandƒ±

  // === KALƒ∞TE ve TESLƒ∞MAT ===
  QUALITY_CHECK // Kalite kontrolde
  SHIPPED // Kargoya verildi
  DELIVERED // M√º≈üteriye teslim edildi

  // === Dƒ∞ƒûER DURUMLAR ===
  ON_HOLD // Durduruldu (ge√ßici olarak askƒ±ya alƒ±ndƒ±)
  CANCELLED // ƒ∞ptal edildi

  // === ESKƒ∞ FLOW ƒ∞√áƒ∞N (Geriye d√∂n√ºk uyumluluk) ===
  REQUESTED // M√º≈üteri tarafƒ±ndan talep edildi (eski)
  RECEIVED // √úretici talebi aldƒ± (eski)
  COMPLETED // Tamamlandƒ± (eski - artƒ±k DELIVERED kullanƒ±lƒ±yor)
}

enum OrderStatus {
  PENDING // Sipari≈ü beklemede
  REVIEWED // √úretici tarafƒ±ndan inceleniyor
  QUOTE_SENT // √úretici s√ºre ve fiyat teklifi g√∂nderdi
  CUSTOMER_QUOTE_SENT // M√º≈üteri teklif g√∂nderdi (standart veya revize)
  MANUFACTURER_REVIEWING_QUOTE // √úretici m√º≈üteri teklifini inceliyor
  CONFIRMED // M√º≈üteri sipari≈üi onayladƒ±
  REJECTED // Sipari≈ü reddedildi
  REJECTED_BY_CUSTOMER // M√º≈üteri tarafƒ±ndan reddedildi
  REJECTED_BY_MANUFACTURER // √úretici tarafƒ±ndan reddedildi
  IN_PRODUCTION // √úretim a≈üamasƒ±nda
  PRODUCTION_COMPLETE // √úretim tamamlandƒ±
  QUALITY_CHECK // Kalite kontrol√º yapƒ±lƒ±yor
  SHIPPED // Kargoya verildi
  DELIVERED // M√º≈üteriye teslim edildi
  CANCELLED // ƒ∞ptal edildi
}

model File {
  id          String   @id @default(cuid())
  filename    String
  path        String
  size        Int
  mimetype    String
  encoding    String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("files")
}

// Production Stage Updates
model ProductionStageUpdate {
  id           Int                @id @default(autoincrement())
  production   ProductionTracking @relation(fields: [productionId], references: [id], onDelete: Cascade)
  productionId Int

  stage           ProductionStage
  status          StageStatus     @default(NOT_STARTED)
  actualStartDate DateTime?
  actualEndDate   DateTime?
  estimatedDays   Int?
  notes           String?         @db.Text
  photos          String?         @db.Text // JSON array
  isRevision      Boolean         @default(false)
  delayReason     String?         @db.Text // Gecikme sebebi
  extraDays       Int             @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("production_stage_updates")
}

// Quality Control
model QualityControl {
  id           Int                @id @default(autoincrement())
  production   ProductionTracking @relation(fields: [productionId], references: [id], onDelete: Cascade)
  productionId Int
  inspector    User               @relation("QualityInspector", fields: [inspectorId], references: [id])
  inspectorId  Int

  checkDate DateTime      @default(now())
  result    QualityResult @default(PENDING)
  score     Int? // 1-100 puan
  notes     String?       @db.Text
  photos    String?       @db.Text // JSON: defect photos

  // Hata kategorileri
  fabricDefects    Boolean @default(false)
  sewingDefects    Boolean @default(false)
  measureDefects   Boolean @default(false)
  finishingDefects Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("quality_controls")
}

// Workshop
model Workshop {
  id       Int          @id @default(autoincrement())
  name     String       @unique
  type     WorkshopType
  capacity Int? // G√ºnl√ºk kapasite
  location String?
  isActive Boolean      @default(true)

  owner   User @relation("WorkshopOwner", fields: [ownerId], references: [id])
  ownerId Int

  sewingProductions    ProductionTracking[] @relation("SewingWorkshop")
  packagingProductions ProductionTracking[] @relation("PackagingWorkshop")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("workshops")
}

// ========================================
// LIBRARY MANAGEMENT MODELS
// ========================================

// Renk K√ºt√ºphanesi - √úretici standart renk paletini y√∂netir
model Color {
  id       Int     @id @default(autoincrement())
  name     String // "Beyaz", "Lacivert", "Gri Melanj"
  code     String? // Pantone, HEX, RAL kodu: "PANTONE 18-3838", "#FF5733"
  hexCode  String? // Web i√ßin: "#FFFFFF"
  imageUrl String? // Renk √∂rneƒüi g√∂rseli
  isActive Boolean @default(true)

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([companyId, name]) // Bir firma i√ßinde renk adƒ± unique
  @@map("colors")
}

// Kuma≈ü K√ºt√ºphanesi - √úretici mevcut kuma≈ülarƒ±nƒ± y√∂netir
model Fabric {
  id          Int     @id @default(autoincrement())
  name        String // "Premium Cotton", "Stretch Denim"
  code        String? // ƒ∞√ß referans kodu: "FAB-001"
  composition String // "%100 Pamuk", "80% Cotton 20% Polyester"
  weight      Int? // Gram/m2: 180, 220, etc.
  width       Int? // cm: 150, 180
  supplier    String? // Tedarik√ßi firma adƒ±
  price       Float? // Metre fiyatƒ±
  minOrder    Int? // Minimum sipari≈ü miktarƒ± (metre)
  leadTime    Int? // Tedarik s√ºresi (g√ºn)
  imageUrl    String? // Kuma≈ü dokusu g√∂rseli
  description String? @db.Text
  isActive    Boolean @default(true)

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([companyId, code]) // Firma i√ßinde kod unique (opsiyonel)
  @@map("fabrics")
}

// Beden Grubu - Standart beden setleri
model SizeGroup {
  id          Int     @id @default(autoincrement())
  name        String // "Erkek Standart", "Kadƒ±n Plus Size", "√áocuk 0-2 Ya≈ü"
  category    String? // "MEN", "WOMEN", "KIDS"
  sizes       String // JSON array: ["XS", "S", "M", "L", "XL"] veya ["2", "4", "6", "8"]
  description String?
  isActive    Boolean @default(true)

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([companyId, name])
  @@map("size_groups")
}

// Season Management (Library Item)
model SeasonItem {
  id          Int       @id @default(autoincrement())
  name        String // "SS25", "FW25", "SS26"
  fullName    String // "Spring/Summer 2025"
  year        Int // 2025, 2026
  type        String // "SS" (Spring/Summer) veya "FW" (Fall/Winter)
  startDate   DateTime? // Sezon ba≈ülangƒ±√ß tarihi
  endDate     DateTime? // Sezon biti≈ü tarihi
  description String?
  isActive    Boolean   @default(true)

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([companyId, name])
  @@map("seasons")
}

// Fit Management (Library Item)
model FitItem {
  id          Int     @id @default(autoincrement())
  name        String // "Slim Fit", "Regular Fit", "Oversized"
  code        String? // "FIT-SLIM", "FIT-REG"
  category    String? // "UPPER" (√ºst giyim), "LOWER" (alt giyim), "OUTERWEAR" (dƒ±≈ü giyim)
  description String? @db.Text // Detaylƒ± a√ßƒ±klama
  isActive    Boolean @default(true)

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([companyId, name])
  @@map("fits")
}

// Sertifika y√∂netimi (GOTS, OEKO-TEX, BSCI, GRS, vb.)
model Certification {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name     String // "GOTS", "OEKO-TEX Standard 100"
  code     String? // "GOTS-2023", "OEKO-100"
  category CertificationCategory // FIBER, CHEMICAL, SOCIAL, ENVIRONMENTAL, TRACEABILITY

  // Detaylar
  issuer            String? // "GOTS International" gibi veren kurulu≈ü
  validFrom         DateTime? // Ge√ßerlilik ba≈ülangƒ±cƒ±
  validUntil        DateTime? // Son kullanma tarihi
  certificateNumber String? // Sertifika numarasƒ±
  certificateFile   String? // PDF dosya yolu
  description       String?   @db.Text
  isActive          Boolean   @default(true)

  // ƒ∞li≈ükiler
  company     Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId   Int
  collections Collection[] @relation("CollectionCertifications")

  @@index([companyId])
  @@index([category])
  @@index([isActive])
  @@map("certifications")
}

enum CertificationCategory {
  FIBER // Lif/Hammadde: GOTS, OCS, RCS, GRS, BCI
  CHEMICAL // √úretim/Kimyasal: OEKO-TEX, bluesign, ZDHC
  SOCIAL // Sosyal/Etik: BSCI, SA8000, WRAP
  ENVIRONMENTAL // √áevresel: LCA, ISO 14067, Carbon Footprint
  TRACEABILITY // ƒ∞zlenebilirlik: DPP, Blockchain, QR
}

// ========================================

// Production Revisions
model ProductionRevision {
  id           Int                @id @default(autoincrement())
  production   ProductionTracking @relation(fields: [productionId], references: [id], onDelete: Cascade)
  productionId Int

  reason      String
  description String? @db.Text
  extraDays   Int     @default(0)
  extraCost   Float   @default(0)
  isApproved  Boolean @default(false)

  requestedBy   User @relation("RevisionRequester", fields: [requestedById], references: [id])
  requestedById Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("production_revisions")
}

// Production Enums
enum ProductionStage {
  PLANNING
  FABRIC
  CUTTING
  SEWING
  QUALITY
  PACKAGING
  SHIPPING
}

enum StageStatus {
  NOT_STARTED
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  REQUIRES_REVISION
}

enum ProductionStatus {
  IN_PROGRESS
  WAITING
  BLOCKED
  COMPLETED
  CANCELLED
}

enum QualityResult {
  PENDING
  PASSED
  FAILED
  CONDITIONAL_PASS
}

enum WorkshopType {
  SEWING
  PACKAGING
  QUALITY_CONTROL
  GENERAL
}

// ========================================
// NOTIFICATION SYSTEM
// ========================================

enum NotificationType {
  ORDER // Sipari≈ü bildirimleri
  SAMPLE // Numune bildirimleri
  MESSAGE // Mesaj bildirimleri
  PRODUCTION // √úretim bildirimleri
  QUALITY // Kalite kontrol bildirimleri
  SYSTEM // Sistem bildirimleri
}

model Notification {
  id      Int              @id @default(autoincrement())
  type    NotificationType
  title   String
  message String           @db.Text
  link    String? // ƒ∞lgili sayfanƒ±n URL'i
  isRead  Boolean          @default(false)

  // ƒ∞li≈ükiler
  userId Int
  user   User @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)

  // ƒ∞lgili kayƒ±tlar (opsiyonel)
  orderId              Int?
  order                Order?              @relation("OrderNotifications", fields: [orderId], references: [id], onDelete: Cascade)
  sampleId             Int?
  sample               Sample?             @relation("SampleNotifications", fields: [sampleId], references: [id], onDelete: Cascade)
  productionTrackingId Int?
  productionTracking   ProductionTracking? @relation("ProductionNotifications", fields: [productionTrackingId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ========================================
  // PERFORMANCE INDEXES
  // ========================================
  @@index([userId, isRead]) // User unread notifications
  @@index([userId, createdAt]) // User notifications with sorting
  @@index([userId, type]) // User notifications by type
  @@index([type, isRead]) // Type + read status
  @@index([orderId]) // Order notifications
  @@index([sampleId]) // Sample notifications
  @@index([productionTrackingId]) // Production notifications
  @@map("notifications")
}

// ========================================
// Task Model - M√º≈üteri/Kullanƒ±cƒ± Aksiyonlarƒ±
// ========================================

enum TaskStatus {
  TODO // Yapƒ±lmasƒ± gerekenler
  IN_PROGRESS // Devam ediyor
  COMPLETED // Tamamlandƒ±
  CANCELLED // ƒ∞ptal edildi
}

enum TaskPriority {
  LOW // D√º≈ü√ºk √∂ncelik
  MEDIUM // Orta √∂ncelik
  HIGH // Y√ºksek √∂ncelik
}

enum TaskType {
  // === STATUS BAZLI G√ñREVLER (Dinamik) ===
  STATUS_CHANGE // Status deƒüi≈üikliƒüi gerektiren g√∂rev (SampleStatus, OrderStatus ile ili≈ükili)

  // === √ñZEL G√ñREV Tƒ∞PLERƒ∞ ===
  QUOTATION // Fiyat teklifi hazƒ±rla/g√∂nder
  REVIEW_QUOTE // Teklifi incele (m√º≈üteri veya √ºretici)
  APPROVE_REJECT // Onay/Red aksiyonu gerekli
  PAYMENT // √ñdeme i≈ülemi
  DOCUMENT // Belge/Dok√ºman i≈ülemi

  // === √úRETƒ∞M S√úRECƒ∞ G√ñREVLER ===
  PRODUCTION_STAGE // √úretim a≈üama g√∂revleri (ProductionStage ile ili≈ükili)
  QUALITY_CHECK // Kalite kontrol g√∂revi
  SHIPMENT // Kargo/Sevkiyat i≈ülemi
  MATERIAL // Malzeme tedarik/kontrol

  // === GENEL G√ñREVLER ===
  MEETING // Toplantƒ±
  REVISION // Revize talebi
  NOTIFICATION // Bilgilendirme (aksiyon gerektirmeyen)
  DEADLINE_WARNING // Termin uyarƒ±sƒ±
  OTHER // Diƒüer
}

model Task {
  id          Int          @id @default(autoincrement())
  title       String // G√∂rev ba≈ülƒ±ƒüƒ± (√∂rn: "Teklif Onayƒ± Bekliyor")
  description String?      @db.LongText // Detaylƒ± a√ßƒ±klama
  status      TaskStatus   @default(TODO)
  priority    TaskPriority @default(MEDIUM)
  type        TaskType

  // STATUS ƒ∞Lƒ∞≈ûKƒ∞Sƒ∞ - Hangi status i√ßin bu task olu≈üturuldu
  relatedStatus String? // "QUOTE_SENT", "CUSTOMER_QUOTE_SENT", vb.
  targetStatus  String? // Hedef status (bu task tamamlandƒ±ƒüƒ±nda gidilecek status)
  entityType    String? // "ORDER", "SAMPLE", "PRODUCTION" - Hangi entity i√ßin

  // √úRETƒ∞M A≈ûAMASI ƒ∞Lƒ∞≈ûKƒ∞Sƒ∞
  productionStage String? // "PLANNING", "FABRIC", "CUTTING", vb. (ProductionStage enum deƒüeri)

  // Kullanƒ±cƒ± ve ƒ∞li≈ükilendirmeler
  userId Int // G√∂revin olu≈üturduƒüu kullanƒ±cƒ± (m√º≈üteri veya √ºretici)
  user   User @relation("UserTasks", fields: [userId], references: [id], onDelete: Cascade)

  // G√∂zlemci (√úretici taraf i√ßin gelen g√∂revlerde atanan ki≈üi)
  assignedToId Int? // Kime atanƒ±yor (null ise kendisine atanmƒ±≈ü)
  assignedTo   User? @relation("AssignedTasks", fields: [assignedToId], references: [id], onDelete: SetNull)

  // Opsiyonel ƒ∞li≈ükiler
  collectionId Int? // Koleksiyonla ilgili g√∂rev
  collection   Collection? @relation("CollectionTasks", fields: [collectionId], references: [id], onDelete: SetNull)

  sampleId Int? // √ñrnek talebesiyle ilgili g√∂rev
  sample   Sample? @relation("SampleTasks", fields: [sampleId], references: [id], onDelete: SetNull)

  orderId Int? // Sipari≈ü talebesiyle ilgili g√∂rev
  order   Order? @relation("OrderTasks", fields: [orderId], references: [id], onDelete: SetNull)

  productionTrackingId Int?
  productionTracking   ProductionTracking? @relation("ProductionTrackingTasks", fields: [productionTrackingId], references: [id], onDelete: SetNull)

  // Tarihler
  dueDate     DateTime? // Son teslim tarihi
  completedAt DateTime? // Tamamlanma tarihi
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Metadata
  notes      String? @db.LongText // Notlar
  assignedBy Int? // Kimin tarafƒ±ndan atandƒ±ƒüƒ±

  // Aksiyon Metadata (JSON)
  actionData Json? // Aksiyonla ilgili ekstra data: {buttonText, endpoint, requiredFields, etc.}

  // ========================================
  // PERFORMANCE INDEXES
  // ========================================
  @@index([userId, status]) // User tasks by status
  @@index([assignedToId, status]) // Assigned tasks by status
  @@index([userId, dueDate]) // User tasks by due date
  @@index([status, priority]) // Status + priority filter
  @@index([dueDate]) // Due date sorting
  @@index([relatedStatus]) // Status bazlƒ± filtreleme i√ßin
  @@index([entityType, relatedStatus]) // Entity ve status kombinasyonu
  @@index([type, status]) // Task type + status
  @@index([createdAt]) // Date sorting
  @@index([productionStage]) // Production stage filter
  @@index([userId, completedAt]) // User completed tasks
  @@map("tasks")
}

// ========================================
