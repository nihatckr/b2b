// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  output        = "../lib/generated"
  binaryTargets = ["native", "darwin-arm64", "windows"]
}
generator pothos {
  provider = "prisma-pothos-types"
  clientOutput = "./generated" // relative path from pothos output to prisma client
  output = "../lib/pothos-prisma-types.ts"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN // Platform admin
  COMPANY_OWNER // Firma sahibi (hem üretici hem müşteri)
  COMPANY_EMPLOYEE // Firma çalışanı (hem üretici hem müşteri)
  INDIVIDUAL_CUSTOMER // Bireysel müşteri (firma olmadan)

  // Backward compatibility (deprecated)
  MANUFACTURE
  CUSTOMER
}

enum CompanyType {
  MANUFACTURER // Üretici firma (Defacto)
  BUYER // Alıcı firma (LC Waikiki)
  BOTH // Her ikisi de (hem üretir hem alır)
}

// Department Enum - COMPANY_EMPLOYEE rolleri için
enum Department {
  PURCHASING   // Satın Alma
  PRODUCTION   // Üretim
  QUALITY      // Kalite Kontrol
  DESIGN       // Tasarım
  SALES        // Satış
  MANAGEMENT   // Yönetim
}

// Subscription Plan Enum
enum SubscriptionPlan {
  FREE          // Ücretsiz plan (trial)
  STARTER       // Başlangıç planı
  PROFESSIONAL  // Profesyonel plan
  ENTERPRISE    // Kurumsal plan
  CUSTOM        // Özel anlaşma
}

// Subscription Status Enum
enum SubscriptionStatus {
  TRIAL       // Deneme süresi
  ACTIVE      // Aktif abonelik
  PAST_DUE    // Ödeme gecikmiş
  CANCELLED   // İptal edilmiş
  EXPIRED     // Süresi dolmuş
}

// Billing Cycle Enum
enum BillingCycle {
  MONTHLY  // Aylık
  YEARLY   // Yıllık
}

// Tekstil Enums
enum Season {
  SS25 // Spring/Summer 2025
  FW25 // Fall/Winter 2025
  SS26 // Spring/Summer 2026
  FW26 // Fall/Winter 2026
  SS27
  FW27
}

enum Gender {
  WOMEN // Kadın
  MEN // Erkek
  GIRLS // Kız Çocuk
  BOYS // Erkek Çocuk
  UNISEX // Unisex
}

enum Fit {
  REGULAR // Regular
  SLIM // Slim
  RELAXED // Relaxed
  OVERSIZED // Oversized
  FITTED // Fitted
  LOOSE // Loose
}

model Company {
  id          Int         @id @default(autoincrement())
  name        String
  email       String?     @unique
  phone       String?
  address     String?
  city        String? // Şehir: "İstanbul", "İzmir", "Denizli"
  country     String? // Ülke: "Turkey", "Germany", etc.
  location    String? // Deprecated - use city instead
  website     String?
  type        CompanyType @default(MANUFACTURER)
  description String?     @db.Text

  // Owner
  owner   User? @relation("CompanyOwner", fields: [ownerId], references: [id])
  ownerId Int?  @unique

  isActive Boolean @default(true)
  settings Json? // Company-wide settings

  // ========================================
  // SUBSCRIPTION SYSTEM
  // ========================================
  subscriptionPlan   SubscriptionPlan   @default(FREE)
  subscriptionStatus SubscriptionStatus @default(TRIAL)

  // Trial Period
  trialStartedAt DateTime? @default(now())
  trialEndsAt    DateTime? // 14 gün trial

  // Subscription Billing
  subscriptionStartedAt DateTime? // Ücretli abonelik başlangıcı
  currentPeriodStart    DateTime? // Mevcut dönem başlangıcı
  currentPeriodEnd      DateTime? // Mevcut dönem bitişi
  cancelAtPeriodEnd     Boolean   @default(false)
  cancelledAt           DateTime? // İptal tarihi
  billingCycle          BillingCycle @default(MONTHLY)
  billingEmail          String? // Fatura e-postası
  billingAddress        String? @db.Text
  taxId                 String? // Vergi numarası

  // Usage Limits (Plan-based)
  maxUsers        Int   @default(3) // FREE: 3, STARTER: 10, PRO: 50, ENT: unlimited
  maxSamples      Int   @default(10) // FREE: 10, STARTER: 100, PRO: 500, ENT: unlimited
  maxOrders       Int   @default(5) // FREE: 5, STARTER: 50, PRO: 200, ENT: unlimited
  maxCollections  Int   @default(5) // FREE: 5, STARTER: 20, PRO: 100, ENT: unlimited
  maxStorageGB    Float @default(1.0) // FREE: 1GB, STARTER: 10GB, PRO: 100GB, ENT: unlimited

  // Current Usage (auto-calculated)
  currentUsers        Int   @default(0)
  currentSamples      Int   @default(0)
  currentOrders       Int   @default(0)
  currentCollections  Int   @default(0)
  currentStorageGB    Float @default(0.0)

  // ========================================
  // BRANDING & CUSTOMIZATION
  // ========================================
  logo        String? // Logo URL
  coverImage  String? // Kapak görseli URL
  brandColors Json? // { primary: "#xxx", secondary: "#xxx", accent: "#xxx" }

  // Public Profile (for manufacturers to showcase)
  profileSlug     String?  @unique // URL-friendly slug: "defacto", "koton"
  isPublicProfile Boolean  @default(false) // Herkese açık profil mi?
  socialLinks     Json? // { instagram: "...", linkedin: "...", website: "..." }

  // Dashboard Preferences
  defaultView    String? // "MANUFACTURER" | "BUYER" (for BOTH type companies)
  enabledModules Json? // { samples: true, orders: true, production: true, etc. }

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  employees          User[]               @relation("CompanyEmployees")
  categories         Category[]
  companyCategories  CompanyCategory[]    // Yeni standart kategori sistemi
  collections        Collection[]
  samples            Sample[]
  orders             Order[]
  productionTracking ProductionTracking[]
  messages           Message[]

  // Library Management (Unified)
  libraryItems   LibraryItem[] @relation("CompanyLibraryItems")

  // Company Partnerships & Collaboration
  partnershipsAsInitiator  CompanyPartnership[] @relation("CompanyAsInitiator")
  partnershipsAsPartner    CompanyPartnership[] @relation("CompanyAsPartner")
  sourceCategoryMappings   SharedCategoryMapping[] @relation("SourceCategoryCompany")
  targetCategoryMappings   SharedCategoryMapping[] @relation("TargetCategoryCompany")

  // Analytics
  metrics         CompanyMetrics[]

  @@index([email])
  @@index([type, isActive])
  @@index([isActive, createdAt])
  @@index([location])
  @@index([ownerId])
  @@index([subscriptionPlan])
  @@index([subscriptionStatus])
  @@index([trialEndsAt])
  @@index([currentPeriodEnd])
  @@index([profileSlug])
  @@index([isPublicProfile])
  @@fulltext([name, description])
  @@map("companies")
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  senderId  Int
  receiverId Int?    // Alıcı kullanıcı ID
  isRead    Boolean  @default(false)
  type      String   @default("general") // "order", "sample", "general"

  // Ürün bazlı mesajlaşma
  orderId   Int?
  sampleId  Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sender    User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver  User?    @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  order     Order?   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  sample    Sample?  @relation(fields: [sampleId], references: [id], onDelete: Cascade)
  company   Company? @relation(fields: [companyId], references: [id])
  companyId Int?

  @@index([orderId])
  @@index([sampleId])
  @@index([senderId])
  @@index([receiverId])
  @@map("messages")
}

model ProductionTracking {
  id       Int  @id @default(autoincrement())
  orderId  Int?
  sampleId Int?

  currentStage  ProductionStage  @default(PLANNING)
  overallStatus ProductionStatus @default(IN_PROGRESS)
  progress      Int              @default(0) // 0-100%

  estimatedStartDate DateTime?
  estimatedEndDate   DateTime?
  actualStartDate    DateTime?
  actualEndDate      DateTime?

  notes String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  order     Order?   @relation(fields: [orderId], references: [id])
  sample    Sample?  @relation(fields: [sampleId], references: [id])
  company   Company? @relation(fields: [companyId], references: [id])
  companyId Int?

  // New relations
  sewingWorkshop      Workshop? @relation("SewingWorkshop", fields: [sewingWorkshopId], references: [id])
  sewingWorkshopId    Int?
  packagingWorkshop   Workshop? @relation("PackagingWorkshop", fields: [packagingWorkshopId], references: [id])
  packagingWorkshopId Int?

  stageUpdates        ProductionStageUpdate[]
  qualityControls     QualityControl[]
  productionRevisions ProductionRevision[]
  revisions           Revision[] // Legacy
  tasks               Task[] @relation("ProductionTrackingTasks")
  notifications       Notification[] @relation("ProductionNotifications")

  @@map("production_tracking")
}

model Revision {
  id                   Int       @id @default(autoincrement())
  orderId              Int?
  sampleId             Int?
  productionTrackingId Int?
  revisionNumber       Int       @default(1)
  requestMessage       String?
  responseMessage      String?
  status               String    @default("pending")
  requestedAt          DateTime  @default(now())
  completedAt          DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // Relations
  order              Order?              @relation(fields: [orderId], references: [id])
  sample             Sample?             @relation(fields: [sampleId], references: [id])
  productionTracking ProductionTracking? @relation(fields: [productionTrackingId], references: [id])

  @@map("revisions")
}

model User {
  id        Int     @id @default(autoincrement())
  email     String  @unique
  password  String
  name      String?
  username  String? @unique
  firstName String?
  lastName  String?
  phone     String?

  // Company & Role
  company   Company? @relation("CompanyEmployees", fields: [companyId], references: [id])
  companyId Int?
  role      Role     @default(INDIVIDUAL_CUSTOMER)

  // Company Ownership & Permissions
  isCompanyOwner Boolean     @default(false)
  department     Department? // Enum: PURCHASING, PRODUCTION, QUALITY, DESIGN, SALES, MANAGEMENT
  jobTitle       String? // "Müdür", "Uzman", "Koordinatör"
  permissions    Json? // Detaylı permission objesi

  // Status
  isActive          Boolean @default(true)
  isPendingApproval Boolean @default(false)

  // ========================================
  // USER PROFILE & SETTINGS
  // ========================================
  avatar       String? @db.Text // Profile picture URL from OAuth providers (GitHub/Google)
  customAvatar String? @db.Text // User's custom uploaded profile picture (overrides avatar)
  bio          String? @db.Text // User bio/description
  socialLinks  Json? // { twitter: "...", linkedin: "...", github: "..." }

  // Notification Settings
  emailNotifications Boolean @default(true)
  pushNotifications  Boolean @default(false)

  // Localization
  language String @default("tr") // "tr", "en"
  timezone String @default("Europe/Istanbul")

  // Password Reset
  resetToken       String?   // Token for password reset
  resetTokenExpiry DateTime? // Token expiration date

  // Email Verification
  emailVerified           Boolean   @default(false) // Email doğrulandı mı?
  emailVerificationToken  String?   // Email doğrulama token
  emailVerificationExpiry DateTime? // Token son kullanma tarihi

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Owned Companies
  ownedCompanies Company[] @relation("CompanyOwner")

  // Messages relation
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")

  // Category Management
  categories                Category[]
  createdStandardCategories StandardCategory[] @relation("StandardCategoryCreator")
  createdCompanyCategories  CompanyCategory[]

  collections      Collection[]

  // Customer relations
  customerSamples   Sample[]   @relation("CustomerSamples")
  customerOrders    Order[]    @relation("CustomerOrders")
  customerQuestions Question[] @relation("CustomerQuestions")
  customerReviews   Review[]   @relation("CustomerReviews")

  // Manufacture relations
  manufactureSamples      Sample[]           @relation("ManufactureSamples")
  manufactureOrders       Order[]            @relation("ManufactureOrders")
  manufactureQuestions    Question[]         @relation("ManufactureQuestions")
  sampleProductionUpdates SampleProduction[]
  orderProductionUpdates  OrderProduction[]  @relation("OrderProductionUpdates")

  // Production system relations
  qualityInspections QualityControl[]     @relation("QualityInspector")
  ownedWorkshops     Workshop[]           @relation("WorkshopOwner")
  revisionRequests   ProductionRevision[] @relation("RevisionRequester")

  // Favorites/Likes
  favoriteCollections UserFavoriteCollection[]

  // Notifications
  notifications Notification[] @relation("UserNotifications")

  // Tasks
  tasks         Task[] @relation("UserTasks")
  assignedTasks Task[] @relation("AssignedTasks")

  // Company Partnerships & Category Mappings
  initiatedPartnerships     CompanyPartnership[] @relation
  approvedPartnerships      CompanyPartnership[] @relation("PartnershipApprover")
  createdCategoryMappings   SharedCategoryMapping[]

  // Admin Reports
  createdReports            AdminReport[]

  // Unified Library Management (Admin)
  createdLibraryItems       LibraryItem[] @relation("LibraryItemCreator")

  @@index([email])
  @@index([username])
  @@index([companyId, role])
  @@index([companyId, isActive])
  @@index([companyId, department])
  @@index([role, isActive])
  @@index([isActive])
  @@index([isPendingApproval])
  @@index([createdAt])
  @@map("users")
}

// ========================================
// STANDARDIZED CATEGORY SYSTEM FOR TEXTILE INDUSTRY
// ========================================

enum CategoryType {
  GLOBAL_STANDARD   // Platform geneli standart kategori (admin tanımlı)
  COMPANY_CUSTOM    // Firma özel kategorisi (kendi kullanımı için)
}

enum CategoryLevel {
  ROOT              // Ana kategori (Tekstil, Giyim, Aksesuar)
  MAIN              // Ana grup (Üst Giyim, Alt Giyim, İç Giyim)
  SUB               // Alt grup (Gömlek, Pantolon, Elbise)
  DETAIL            // Detay (Uzun Kollu Gömlek, Kısa Kollu Gömlek)
}

// Platform Geneli Standart Kategori Ağacı (Admin yönetir)
model StandardCategory {
  id          Int           @id @default(autoincrement())
  code        String        @unique // "TEX-001", "GAR-001-001", "ACC-002"
  name        String        // i18n key or direct name (frontend handles translations)
  description      String? @db.Text // i18n key or direct description

  level            CategoryLevel
  order            Int       @default(0) // Sıralama için
  icon             String?   // Icon URL veya code
  image            String?   // Kategori görseli

  isActive         Boolean   @default(true)
  isPublic         Boolean   @default(true) // Tüm firmalara açık mı?

  // Meta bilgiler
  keywords         String?   @db.Text // Arama için keywords (JSON array)
  tags             String?   // "#gömlek #shirt #formal" gibi

  // İlişkiler
  parentCategory   StandardCategory?  @relation("StandardCategoryTree", fields: [parentId], references: [id])
  parentId         Int?
  subCategories    StandardCategory[] @relation("StandardCategoryTree")

  // Şirketlerin bu standart kategoriyi kullanımı
  companyCategories CompanyCategory[]

  // Admin
  createdBy        User?     @relation("StandardCategoryCreator", fields: [createdById], references: [id])
  createdById      Int?

  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@index([code])
  @@index([level])
  @@index([parentId])
  @@index([isActive, isPublic])
  @@index([order])
  @@fulltext([name, description, keywords])
  @@map("standard_categories")
}

// Firma Bazlı Kategori Sistemi (Standart kategorileri extend eder veya özel ekler)
model CompanyCategory {
  id          Int          @id @default(autoincrement())
  type        CategoryType @default(COMPANY_CUSTOM)

  // Standart kategori referansı (varsa)
  standardCategory   StandardCategory? @relation(fields: [standardCategoryId], references: [id])
  standardCategoryId Int?

  // Firma özel bilgileri
  name        String       // Firma kendi adını verebilir: "Defacto Gömlek", "Koton T-Shirt"
  description String?      @db.Text

  // İlişkiler
  company     Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId   Int

  parentCategory     CompanyCategory?  @relation("CompanyCategoryTree", fields: [parentId], references: [id])
  parentId           Int?
  subCategories      CompanyCategory[] @relation("CompanyCategoryTree")

  // Firma içi özel alanlar
  internalCode       String?  // Firma içi referans kodu
  order              Int      @default(0)
  isActive           Boolean  @default(true)

  // Kullanım istatistikleri
  productCount       Int      @default(0) // Bu kategoride kaç ürün var
  lastUsedAt         DateTime?

  // Metadata
  customFields       Json?    // Firma özel alanları: { targetAge: "18-25", priceRange: "mid", etc. }

  // Relations
  collections        Collection[]

  // Cross-brand category mappings
  sourceMappings     SharedCategoryMapping[] @relation("SourceCategory")
  targetMappings     SharedCategoryMapping[] @relation("TargetCategory")

  author             User?    @relation(fields: [authorId], references: [id])
  authorId           Int?

  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@unique([companyId, parentId, name]) // Aynı firma, aynı parent altında aynı isim olamaz
  @@index([companyId, type])
  @@index([companyId, isActive])
  @@index([standardCategoryId])
  @@index([parentId])
  @@index([productCount])
  @@fulltext([name, description])
  @@map("company_categories")
}

// Legacy Category model (backward compatibility - will be migrated)
model Category {
  id               Int          @id @default(autoincrement())
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  name             String
  description      String?
  author           User?        @relation(fields: [authorId], references: [id])
  authorId         Int?
  collections      Collection[]
  subCategories    Category[]   @relation("CategoryToSubCategories")
  parentCategory   Category?    @relation("CategoryToSubCategories", fields: [parentCategoryId], references: [id])
  parentCategoryId Int?
  company          Company?     @relation(fields: [companyId], references: [id])
  companyId        Int?

  @@unique([companyId, parentCategoryId, name])
  @@map("categories")
}

model Collection {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String?

  // ADIM 1: Temel Bilgiler
  modelCode String  @unique // THS-2024-00
  season    Season? // SS25, FW25, SS26, FW26
  // klasman -> category ile handle edilecek (Gömlek, Pantolon, Triko)
  gender    Gender? // Kadın, Erkek, Kız Çocuk, Erkek Çocuk
  fit       String? // Library'den seçilen fit adı: "Slim Fit", "Regular Fit", "Relaxed Fit"
  trend     String? // Trend adı: "Minimalist", "Vintage", "Sport Chic", "Y2K"

  // ADIM 2: Varyantlar ve Ölçüler
  colors           String? // JSON array: ["beyaz", "siyah", "yeşil"]
  sizeGroups       String? // JSON array of group IDs: [1, 2, 3] - Birden fazla beden grubu (pantolon + gömlek)
  sizeRange        String? // Manuel override: "S-XL" veya "6-16" (legacy)
  measurementChart String? // File path: /uploads/measurements/xxx.pdf

  // ADIM 3: Teknik Detaylar
  fabricComposition String? // "%100 Cotton" veya "80% Cotton 20% Polyester"
  accessories       String? @db.Text // JSON: {"buttons": "metal", "zipper": "YKK", "labels": "woven"}
  images            String? @db.Text // JSON array: ["/uploads/products/img1.jpg", ...] or ["https://..."]
  techPack          String? // File path: /uploads/techpacks/xxx.pdf

  // ADIM 4: Ticari Bilgiler
  moq            Int? // Minimum Order Quantity
  targetPrice    Float? // Hedef fiyat (USD)
  targetLeadTime Int? // Hedef termin (gün)
  notes          String? @db.Text // Açıklama/Notlar

  // Sertifikalar (GOTS, OEKO-TEX, BSCI vb.) - Artık LibraryItem üzerinden
  certifications LibraryItem[] @relation("CollectionCertifications")

  // Beğeni/Favoriler
  likesCount  Int                      @default(0) // Toplam beğeni sayısı
  favoritedBy UserFavoriteCollection[] // Beğenen kullanıcılar

  // ========================================
  // ANALYTICS & ENGAGEMENT
  // ========================================
  viewCount    Int       @default(0) // Görüntülenme sayısı
  shareCount   Int       @default(0) // Paylaşım sayısı
  lastViewedAt DateTime? // Son görüntülenme zamanı

  // Legacy fields (backward compatibility)
  price      Float   @default(0.00) // Şimdilik targetPrice ile aynı
  sku        String? @unique
  stock      Int     @default(0)
  isActive   Boolean @default(true)
  isFeatured Boolean @default(false)
  slug       String? @unique

  // Production Schedule - Her aşama için standart gün sayısı
  productionSchedule Json? // { "PLANNING": 5, "FABRIC": 3, "CUTTING": 2, "SEWING": 10, "QUALITY": 2, "PACKAGING": 2, "SHIPPING": 1 }

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?

  // Yeni standart kategori sistemi (opsiyonel)
  companyCategory   CompanyCategory? @relation(fields: [companyCategoryId], references: [id])
  companyCategoryId Int?

  author     User?     @relation(fields: [authorId], references: [id]) // Üretici
  authorId   Int?

  // Relations
  samples        Sample[]   @relation("SampleCollection")
  revisedSamples Sample[]   @relation("OriginalCollection") // Bu ürün için yapılan revize numuneleri
  orders         Order[]
  questions      Question[]
  reviews        Review[]
  tasks          Task[]     @relation("CollectionTasks")

  // Company relation
  company   Company? @relation(fields: [companyId], references: [id])
  companyId Int?

  @@index([companyId, isActive])
  @@index([season])
  @@index([gender])
  @@index([isFeatured])
  @@index([isActive, createdAt])
  @@index([slug])
  @@index([modelCode])
  @@index([createdAt])
  @@index([viewCount])
  @@index([likesCount])
  @@fulltext([name, description])
  @@map("collections")
}

// User Favorite Collections (Junction Table for Likes)
model UserFavoriteCollection {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId Int

  @@unique([userId, collectionId])
  @@index([userId])
  @@index([collectionId])
  @@map("user_favorite_collections")
}

// Numune talep ve üretim sistemi
model Sample {
  id                   Int          @id @default(autoincrement())
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  sampleNumber         String       @unique // Numune takip numarası
  sampleType           SampleType   @default(STANDARD) // Numune tipi
  status               SampleStatus @default(REQUESTED)
  customerNote         String?      @db.Text // Müşteri talep notu
  manufacturerResponse String?      @db.Text // Üretici yanıtı/değerlendirme

  // Revize/Özelleştirme bilgileri (CUSTOM ve REVISION tipleri için)
  customDesignImages   String? @db.Text // Müşteri tasarım görselleri (JSON)
  revisionRequests     String? // Revize istekleri (JSON: [{field, oldValue, newValue, note}])
  originalCollectionId Int? // Revize edilecek orijinal ürün ID'si

  // AI Generated Sample fields
  name         String? // Sample name
  description  String? @db.Text // Sample description (long text)
  images       String? @db.Text // JSON array of image URLs
  aiGenerated  Boolean? @default(false) // Is this an AI-generated sample
  aiPrompt     String? @db.Text // The prompt used for AI generation
  aiSketchUrl  String? // The sketch/reference image URL used

  // Üretim süreci bilgileri
  unitPrice               Float? // Numune birim fiyatı
  productionDays          Int? // Üretici: "X günde üretebilirim"
  estimatedProductionDate DateTime? // Hesaplanan üretim tarihi
  actualProductionDate    DateTime? // Gerçek üretim tamamlanma tarihi
  shippingDate            DateTime? // Kargoya veriliş tarihi
  deliveryAddress         String? // Teslimat adresi
  cargoTrackingNumber     String? // Kargo takip numarası (opsiyonel)

  // Müşteri Teklif Bilgileri (Order ile aynı)
  customerQuotedPrice     Float? // Müşterinin teklif ettiği fiyat
  customerQuoteDays       Int? // Müşterinin istediği üretim süresi (gün)
  customerQuoteNote       String? @db.Text // Müşterinin teklif notu/açıklaması
  customerQuoteType       String? // "STANDARD" (standartlara uygun) veya "REVISION" (revize teklif)
  customerQuoteSentAt     DateTime? // Müşteri teklifi gönderme zamanı

  collection         Collection?          @relation("SampleCollection", fields: [collectionId], references: [id])
  collectionId       Int?
  originalCollection Collection?          @relation("OriginalCollection", fields: [originalCollectionId], references: [id])
  customer           User                 @relation("CustomerSamples", fields: [customerId], references: [id])
  customerId         Int
  manufacture        User                 @relation("ManufactureSamples", fields: [manufactureId], references: [id])
  manufactureId      Int
  productionHistory  SampleProduction[] // Üretim geçmişi takibi
  productionTracking ProductionTracking[]
  revisions          Revision[]
  messages           Message[] // Numune bazlı mesajlaşma

  // Company relation
  company   Company? @relation(fields: [companyId], references: [id])
  companyId Int?

  // ========================================
  // ANALYTICS & ENGAGEMENT
  // ========================================
  viewCount    Int       @default(0) // Görüntülenme sayısı
  shareCount   Int       @default(0) // Paylaşım sayısı
  lastViewedAt DateTime? // Son görüntülenme zamanı

  // AI Analysis relation
  aiAnalysis AIAnalysis?

  // Tasks
  tasks Task[] @relation("SampleTasks")

  // Notifications
  notifications Notification[] @relation("SampleNotifications")

  @@index([status])
  @@index([customerId, status])
  @@index([manufactureId, status])
  @@index([companyId, status, createdAt])
  @@index([collectionId])
  @@index([sampleNumber])
  @@index([sampleType, status])
  @@index([aiGenerated])
  @@index([createdAt])
  @@index([status, createdAt])
  @@index([viewCount])
  @@map("samples")
}

// AI Analiz Sonuçları (Numune ile ilişkili)
model AIAnalysis {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Temel Analiz Sonuçları (Form'a yazılan)
  detectedProduct       String? // Tespit edilen ürün türü
  detectedColor         String? // Tespit edilen renk
  detectedFabric        String? // Tespit edilen kumaş
  detectedPattern       String? // Tespit edilen kalıp
  detectedGender        String? // Tespit edilen cinsiyet
  detectedClassification String? // Tespit edilen klasman
  detectedAccessories   String? // Tespit edilen aksesuarlar
  technicalDescription  String? @db.Text // Teknik açıklama

  // Kalite Analizi
  qualityAnalysis String? @db.Text // Kalite analiz raporu
  qualityScore    Float? // Genel kalite skoru (1-10)

  // Maliyet Analizi
  costAnalysis         String? @db.Text // Maliyet analiz raporu
  estimatedCostMin     Float? // Tahmini minimum maliyet (₺)
  estimatedCostMax     Float? // Tahmini maksimum maliyet (₺)
  suggestedMinOrder    Int? // Önerilen minimum sipariş adedi

  // Trend Analizi
  trendAnalysis    String? @db.Text // Trend analiz raporu
  trendScore       Float? // Trend skoru (1-10)
  targetMarket     String? // Hedef pazar segmenti
  salesPotential   String? // Satış potansiyeli (LOW/MEDIUM/HIGH)

  // Tasarım Önerileri
  designSuggestions String? @db.Text // Tasarım önerileri (JSON veya text)
  designStyle       String? // Seçilen stil yönü
  designFocus       String? // Odaklanılan alanlar (JSON array)

  // İlişki
  sample   Sample @relation(fields: [sampleId], references: [id], onDelete: Cascade)
  sampleId Int    @unique

  @@map("ai_analyses")
}

// Numune üretim geçmişi takibi
model SampleProduction {
  id            Int          @id @default(autoincrement())
  createdAt     DateTime     @default(now())
  status        SampleStatus
  note          String? // Üretici açıklaması
  estimatedDays Int? // Bu aşama için tahmini gün
  actualDate    DateTime? // Bu aşamanın gerçek tamamlanma tarihi
  sample        Sample       @relation(fields: [sampleId], references: [id])
  sampleId      Int
  updatedBy     User         @relation(fields: [updatedById], references: [id])
  updatedById   Int
}

// Sipariş ve üretim sistemi
model Order {
  id                   Int         @id @default(autoincrement())
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  orderNumber          String      @unique
  quantity             Int
  unitPrice            Float // Birim fiyat
  totalPrice           Float // Toplam fiyat
  status               OrderStatus @default(PENDING)
  customerNote         String? // Müşteri sipariş notu
  manufacturerResponse String? // Üretici yanıtı/değerlendirme

  // Müşteri Teklif Bilgileri
  customerQuotedPrice  Float? // Müşterinin teklif ettiği birim fiyat
  customerQuoteDays    Int? // Müşterinin istediği üretim süresi (gün)
  customerQuoteNote    String? @db.Text // Müşterinin teklif notu/açıklaması
  customerQuoteType    String? // "STANDARD" (standartlara uygun) veya "REVISION" (revize teklif)
  customerQuoteSentAt  DateTime? // Müşteri teklifi gönderme zamanı

  // Üretim süreci bilgileri
  productionDays          Int? // Üretici: "X günde üretebilirim"
  estimatedProductionDate DateTime? // Hesaplanan üretim tarihi
  actualProductionStart   DateTime? // Gerçek üretime başlama tarihi
  actualProductionEnd     DateTime? // Gerçek üretim bitiş tarihi
  shippingDate            DateTime? // Kargoya veriliş tarihi
  deliveryAddress         String? // Teslimat adresi
  cargoTrackingNumber     String? // Kargo takip numarası

  collection         Collection           @relation(fields: [collectionId], references: [id])
  collectionId       Int
  customer           User                 @relation("CustomerOrders", fields: [customerId], references: [id])
  customerId         Int
  manufacture        User                 @relation("ManufactureOrders", fields: [manufactureId], references: [id])
  manufactureId      Int
  productionHistory  OrderProduction[] // Üretim süreç takibi
  productionTracking ProductionTracking[]
  revisions          Revision[]
  messages           Message[] // Sipariş bazlı mesajlaşma

  // Company relation
  company   Company? @relation(fields: [companyId], references: [id])
  companyId Int?

  // Tasks
  tasks Task[] @relation("OrderTasks")

  // Notifications
  notifications Notification[] @relation("OrderNotifications")
}

// Sipariş üretim geçmişi takibi
model OrderProduction {
  id            Int         @id @default(autoincrement())
  createdAt     DateTime    @default(now())
  status        OrderStatus
  note          String? // Üretici açıklaması
  estimatedDays Int? // Bu aşama için tahmini gün
  actualDate    DateTime? // Bu aşamanın gerçek tamamlanma tarihi
  order         Order       @relation(fields: [orderId], references: [id])
  orderId       Int
  updatedBy     User        @relation("OrderProductionUpdates", fields: [updatedById], references: [id])
  updatedById   Int
}

// Soru-cevap sistemi
model Question {
  id            Int        @id @default(autoincrement())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  question      String
  answer        String?
  isAnswered    Boolean    @default(false)
  isPublic      Boolean    @default(true) // Herkese görünür mü?
  collection    Collection @relation(fields: [collectionId], references: [id])
  collectionId  Int
  customer      User       @relation("CustomerQuestions", fields: [customerId], references: [id])
  customerId    Int
  manufacture   User       @relation("ManufactureQuestions", fields: [manufactureId], references: [id])
  manufactureId Int
}

// Değerlendirme sistemi
model Review {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  rating       Int // 1-5 yıldız
  comment      String?
  isApproved   Boolean    @default(false) // Üretici onayı
  collection   Collection @relation(fields: [collectionId], references: [id])
  collectionId Int
  customer     User       @relation("CustomerReviews", fields: [customerId], references: [id])
  customerId   Int
}

// Enum'lar
enum SampleType {
  STANDARD // Mevcut ürün için standart numune
  REVISION // Mevcut ürün için revize istekli numune
  CUSTOM // Müşteri kendi tasarımı için numune
  DEVELOPMENT // Mevcut veriler için backward compatibility
}

enum SampleStatus {
  // === İLK AŞAMALAR (AI ve Talep) ===
  AI_DESIGN // AI ile oluşturulmuş tasarım (henüz üreticiye gönderilmedi)
  PENDING_APPROVAL // Üretici onayı bekleniyor (eski flow için)
  PENDING // Beklemede - Yeni talep

  // === İNCELEME ve TEKLİF AŞAMASI ===
  REVIEWED // Üretici tarafından inceleniyor
  QUOTE_SENT // Üretici süre ve fiyat teklifi gönderdi
  CUSTOMER_QUOTE_SENT // Müşteri teklif gönderdi (standart veya revize)
  MANUFACTURER_REVIEWING_QUOTE // Üretici müşteri teklifini inceliyor

  // === ONAY/RED DURUMLAR ===
  CONFIRMED // Müşteri onayladı, üretim başlayabilir
  REJECTED // Genel red
  REJECTED_BY_CUSTOMER // Müşteri tarafından reddedildi
  REJECTED_BY_MANUFACTURER // Üretici tarafından reddedildi

  // === ÜRETİM AŞAMALARI ===
  IN_DESIGN // Tasarım aşamasında (eski flow)
  PATTERN_READY // Kalıp hazır (eski flow)
  IN_PRODUCTION // Üretim aşamasında
  PRODUCTION_COMPLETE // Üretim tamamlandı

  // === KALİTE ve TESLİMAT ===
  QUALITY_CHECK // Kalite kontrolde
  SHIPPED // Kargoya verildi
  DELIVERED // Müşteriye teslim edildi

  // === DİĞER DURUMLAR ===
  ON_HOLD // Durduruldu (geçici olarak askıya alındı)
  CANCELLED // İptal edildi

  // === ESKİ FLOW İÇİN (Geriye dönük uyumluluk) ===
  REQUESTED // Müşteri tarafından talep edildi (eski)
  RECEIVED // Üretici talebi aldı (eski)
  COMPLETED // Tamamlandı (eski - artık DELIVERED kullanılıyor)
}

enum OrderStatus {
  PENDING // Sipariş beklemede
  REVIEWED // Üretici tarafından inceleniyor
  QUOTE_SENT // Üretici süre ve fiyat teklifi gönderdi
  CUSTOMER_QUOTE_SENT // Müşteri teklif gönderdi (standart veya revize)
  MANUFACTURER_REVIEWING_QUOTE // Üretici müşteri teklifini inceliyor
  CONFIRMED // Müşteri siparişi onayladı
  REJECTED // Sipariş reddedildi
  REJECTED_BY_CUSTOMER // Müşteri tarafından reddedildi
  REJECTED_BY_MANUFACTURER // Üretici tarafından reddedildi
  IN_PRODUCTION // Üretim aşamasında
  PRODUCTION_COMPLETE // Üretim tamamlandı
  QUALITY_CHECK // Kalite kontrolü yapılıyor
  SHIPPED // Kargoya verildi
  DELIVERED // Müşteriye teslim edildi
  CANCELLED // İptal edildi
}

model File {
  id          String   @id @default(cuid())
  filename    String
  path        String
  size        Int
  mimetype    String
  encoding    String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("files")
}

// Production Stage Updates
model ProductionStageUpdate {
  id           Int                @id @default(autoincrement())
  production   ProductionTracking @relation(fields: [productionId], references: [id], onDelete: Cascade)
  productionId Int

  stage           ProductionStage
  status          StageStatus     @default(NOT_STARTED)
  actualStartDate DateTime?
  actualEndDate   DateTime?
  estimatedDays   Int?
  notes           String?         @db.Text
  photos          String?         @db.Text // JSON array
  isRevision      Boolean         @default(false)
  delayReason     String?         @db.Text // Gecikme sebebi
  extraDays       Int             @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("production_stage_updates")
}

// Quality Control
model QualityControl {
  id           Int                @id @default(autoincrement())
  production   ProductionTracking @relation(fields: [productionId], references: [id], onDelete: Cascade)
  productionId Int
  inspector    User               @relation("QualityInspector", fields: [inspectorId], references: [id])
  inspectorId  Int

  checkDate DateTime      @default(now())
  result    QualityResult @default(PENDING)
  score     Int? // 1-100 puan
  notes     String?       @db.Text
  photos    String?       @db.Text // JSON: defect photos

  // Hata kategorileri
  fabricDefects    Boolean @default(false)
  sewingDefects    Boolean @default(false)
  measureDefects   Boolean @default(false)
  finishingDefects Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("quality_controls")
}

// Workshop
model Workshop {
  id       Int          @id @default(autoincrement())
  name     String       @unique
  type     WorkshopType
  capacity Int? // Günlük kapasite
  location String?
  isActive Boolean      @default(true)

  owner   User @relation("WorkshopOwner", fields: [ownerId], references: [id])
  ownerId Int

  sewingProductions    ProductionTracking[] @relation("SewingWorkshop")
  packagingProductions ProductionTracking[] @relation("PackagingWorkshop")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("workshops")
}

// ========================================
// UNIFIED LIBRARY SYSTEM (Simplified & Scalable)
// ========================================

enum LibraryCategory {
  COLOR         // Renk paleti
  FABRIC        // Kumaş kütüphanesi
  MATERIAL      // Aksesuar/Malzemeler (Button, Zipper, Label, etc.)
  SIZE_GROUP    // Beden grupları
  SEASON        // Sezon yönetimi
  FIT           // Kesim tipleri
  CERTIFICATION // Sertifikalar
}

enum LibraryScope {
  PLATFORM_STANDARD  // Platform geneli standart (admin tanımlı)
  COMPANY_CUSTOM     // Firma özel
}

// Unified Library Item - Tüm library tiplerini kapsayan tek model
model LibraryItem {
  id       Int            @id @default(autoincrement())
  scope    LibraryScope   @default(COMPANY_CUSTOM)
  category LibraryCategory

  // Universal Fields (Her kategori için ortak)
  code        String?  @unique
  name        String   // i18n key or direct name (frontend handles translations)

  description String?  @db.Text
  imageUrl    String?  @db.Text

  // Category-Specific Data (JSON - Esnek yapı)
  data        Json?    // {
  //   // For COLOR:
  //   "pantone": "PANTONE 18-3838",
  //   "hex": "#FFFFFF",
  //   "rgb": "rgb(255,255,255)",
  //   "cmyk": "cmyk(0,0,0,0)",
  //   "ral": "RAL 9016",
  //   "category": "NEUTRAL",
  //   "season": "ALL",
  //
  //   // For FABRIC:
  //   "composition": "%100 Cotton",
  //   "weight": 180,
  //   "width": 150,
  //   "fiberType": "COTTON",
  //   "construction": "Plain Weave",
  //   "texture": "Smooth",
  //   "finish": "Raw",
  //   "usage": "Shirts",
  //   "season": "ALL",
  //   "certifications": ["GOTS", "OEKO-TEX"],
  //   "supplier": "ABC Fabrics",
  //   "supplierCode": "SUP-001",
  //   "price": 15.50,
  //   "currency": "USD",
  //   "minOrder": 100,
  //   "leadTime": 15,
  //
  //   // For MATERIAL:
  //   "materialType": "Metal",
  //   "size": "15mm",
  //   "color": "Gold",
  //   "brand": "YKK",
  //   "subCategory": "BUTTON",
  //   "finish": "Matte",
  //   "supplier": "XYZ Accessories",
  //   "price": 0.50,
  //   "minOrder": 1000,
  //
  //   // For SIZE_GROUP:
  //   "sizes": ["XS", "S", "M", "L", "XL"],
  //   "sizeCategory": "MEN",
  //
  //   // For SEASON:
  //   "year": 2025,
  //   "type": "SS",
  //   "fullName": "Spring/Summer 2025",
  //   "startDate": "2025-01-01",
  //   "endDate": "2025-06-30",
  //
  //   // For FIT:
  //   "fitCategory": "UPPER",
  //
  //   // For CERTIFICATION:
  //   "certCategory": "FIBER",
  //   "issuer": "GOTS International",
  //   "validFrom": "2024-01-01",
  //   "validUntil": "2025-12-31",
  //   "certificateNumber": "GOTS-2024-001",
  //   "certificateFile": "/uploads/certs/gots.pdf"
  // }

  // Common Metadata
  tags        Json?    // ["white", "basic", "neutral"]
  internalCode String? // Firma içi referans kodu
  notes       String?  @db.Text

  // Status
  isActive    Boolean  @default(true)
  isPopular   Boolean  @default(false)

  // Relations
  company     Company? @relation("CompanyLibraryItems", fields: [companyId], references: [id], onDelete: Cascade)
  companyId   Int?

  // Standard Reference (Company items can reference platform standards)
  standardItem   LibraryItem?  @relation("StandardReference", fields: [standardItemId], references: [id])
  standardItemId Int?
  companyItems   LibraryItem[] @relation("StandardReference")

  // 🔗 Certification Relations (Many-to-Many)
  // Bu item'ın sahip olduğu sertifikalar (Fabric/Color/Material → Certifications)
  certifications     LibraryItem[] @relation("ItemCertifications")
  // Bu sertifikanın atandığı item'lar (Certification → Fabric/Color/Material)
  certifiedItems     LibraryItem[] @relation("ItemCertifications")

  // Collections using certifications
  collections Collection[] @relation("CollectionCertifications")

  createdBy   User?    @relation("LibraryItemCreator", fields: [createdById], references: [id])
  createdById Int?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([companyId, category, name])
  @@index([scope, category])
  @@index([companyId, category, isActive])
  @@index([category, isActive, isPopular])
  @@index([standardItemId])
  @@index([code])
  @@fulltext([name, description])
  @@map("library_items")
}

// ========================================

// Production Revisions
model ProductionRevision {
  id           Int                @id @default(autoincrement())
  production   ProductionTracking @relation(fields: [productionId], references: [id], onDelete: Cascade)
  productionId Int

  reason      String
  description String? @db.Text
  extraDays   Int     @default(0)
  extraCost   Float   @default(0)
  isApproved  Boolean @default(false)

  requestedBy   User @relation("RevisionRequester", fields: [requestedById], references: [id])
  requestedById Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("production_revisions")
}

// Production Enums
enum ProductionStage {
  PLANNING
  FABRIC
  CUTTING
  SEWING
  QUALITY
  PACKAGING
  SHIPPING
}

enum StageStatus {
  NOT_STARTED
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  REQUIRES_REVISION
}

enum ProductionStatus {
  IN_PROGRESS
  WAITING
  BLOCKED
  COMPLETED
  CANCELLED
}

enum QualityResult {
  PENDING
  PASSED
  FAILED
  CONDITIONAL_PASS
}

enum WorkshopType {
  SEWING
  PACKAGING
  QUALITY_CONTROL
  GENERAL
}

// ========================================
// NOTIFICATION SYSTEM
// ========================================

enum NotificationType {
  ORDER // Sipariş bildirimleri
  SAMPLE // Numune bildirimleri
  MESSAGE // Mesaj bildirimleri
  PRODUCTION // Üretim bildirimleri
  QUALITY // Kalite kontrol bildirimleri
  SYSTEM // Sistem bildirimleri
  USER_MANAGEMENT // Kullanıcı yönetimi bildirimleri
}

model Notification {
  id      Int              @id @default(autoincrement())
  type    NotificationType
  title   String
  message String           @db.Text
  link    String?          // İlgili sayfanın URL'i
  isRead  Boolean          @default(false)

  // İlişkiler
  userId Int
  user   User @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)

  // İlgili kayıtlar (opsiyonel)
  orderId            Int?
  order              Order?              @relation("OrderNotifications", fields: [orderId], references: [id], onDelete: Cascade)
  sampleId           Int?
  sample             Sample?             @relation("SampleNotifications", fields: [sampleId], references: [id], onDelete: Cascade)
  productionTrackingId Int?
  productionTracking ProductionTracking? @relation("ProductionNotifications", fields: [productionTrackingId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, isRead])
  @@index([userId, createdAt])
  @@map("notifications")
}

// ========================================
// Task Model - Müşteri/Kullanıcı Aksiyonları
// ========================================

enum TaskStatus {
  TODO // Yapılması gerekenler
  IN_PROGRESS // Devam ediyor
  COMPLETED // Tamamlandı
  CANCELLED // İptal edildi
}

enum TaskPriority {
  LOW // Düşük öncelik
  MEDIUM // Orta öncelik
  HIGH // Yüksek öncelik
}

enum TaskType {
  // === STATUS BAZLI GÖREVLER (Dinamik) ===
  STATUS_CHANGE // Status değişikliği gerektiren görev (SampleStatus, OrderStatus ile ilişkili)

  // === ÖZEL GÖREV TİPLERİ ===
  QUOTATION // Fiyat teklifi hazırla/gönder
  REVIEW_QUOTE // Teklifi incele (müşteri veya üretici)
  APPROVE_REJECT // Onay/Red aksiyonu gerekli
  PAYMENT // Ödeme işlemi
  DOCUMENT // Belge/Doküman işlemi

  // === ÜRETİM SÜRECİ GÖREVLER ===
  PRODUCTION_STAGE // Üretim aşama görevleri (ProductionStage ile ilişkili)
  QUALITY_CHECK // Kalite kontrol görevi
  SHIPMENT // Kargo/Sevkiyat işlemi
  MATERIAL // Malzeme tedarik/kontrol

  // === GENEL GÖREVLER ===
  MEETING // Toplantı
  REVISION // Revize talebi
  NOTIFICATION // Bilgilendirme (aksiyon gerektirmeyen)
  DEADLINE_WARNING // Termin uyarısı
  OTHER // Diğer
}

model Task {
  id            Int      @id @default(autoincrement())
  title         String   // Görev başlığı (örn: "Teklif Onayı Bekliyor")
  description   String?  @db.LongText // Detaylı açıklama
  status        TaskStatus @default(TODO)
  priority      TaskPriority @default(MEDIUM)
  type          TaskType

  // STATUS İLİŞKİSİ - Hangi status için bu task oluşturuldu
  relatedStatus String? // "QUOTE_SENT", "CUSTOMER_QUOTE_SENT", vb.
  targetStatus  String? // Hedef status (bu task tamamlandığında gidilecek status)
  entityType    String? // "ORDER", "SAMPLE", "PRODUCTION" - Hangi entity için

  // ÜRETİM AŞAMASI İLİŞKİSİ
  productionStage String? // "PLANNING", "FABRIC", "CUTTING", vb. (ProductionStage enum değeri)

  // Kullanıcı ve İlişkilendirmeler
  userId        Int      // Görevin oluşturduğu kullanıcı (müşteri veya üretici)
  user          User     @relation("UserTasks", fields: [userId], references: [id], onDelete: Cascade)

  // Gözlemci (Üretici taraf için gelen görevlerde atanan kişi)
  assignedToId  Int?     // Kime atanıyor (null ise kendisine atanmış)
  assignedTo    User?    @relation("AssignedTasks", fields: [assignedToId], references: [id], onDelete: SetNull)

  // Opsiyonel İlişkiler
  collectionId  Int?     // Koleksiyonla ilgili görev
  collection    Collection? @relation("CollectionTasks", fields: [collectionId], references: [id], onDelete: SetNull)

  sampleId      Int?     // Örnek talebesiyle ilgili görev
  sample        Sample?  @relation("SampleTasks", fields: [sampleId], references: [id], onDelete: SetNull)

  orderId       Int?     // Sipariş talebesiyle ilgili görev
  order         Order?   @relation("OrderTasks", fields: [orderId], references: [id], onDelete: SetNull)

  productionTrackingId Int?
  productionTracking ProductionTracking? @relation("ProductionTrackingTasks", fields: [productionTrackingId], references: [id], onDelete: SetNull)

  // Tarihler
  dueDate       DateTime? // Son teslim tarihi
  completedAt   DateTime? // Tamamlanma tarihi
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Metadata
  notes         String?  @db.LongText // Notlar
  assignedBy    Int? // Kimin tarafından atandığı

  // Aksiyon Metadata (JSON)
  actionData    Json? // Aksiyonla ilgili ekstra data: {buttonText, endpoint, requiredFields, etc.}

  @@index([userId, status])
  @@index([userId, dueDate])
  @@index([status, priority])
  @@index([relatedStatus]) // Status bazlı filtreleme için
  @@index([entityType, relatedStatus]) // Entity ve status kombinasyonu
  @@index([createdAt])
  @@map("tasks")
}

// ========================================
// COMPANY PARTNERSHIPS & CROSS-BRAND COLLABORATION
// ========================================

enum PartnershipType {
  SUPPLIER          // Tedarikçi ilişkisi (kumaş, aksesuar, vb.)
  MANUFACTURER      // Üretici ortaklığı
  DISTRIBUTOR       // Distribütör ilişkisi
  WHITE_LABEL       // White label üretim
  CO_BRANDING       // Ortak marka işbirliği
  SUBCONTRACTOR     // Fason üretici
  STRATEGIC_PARTNER // Stratejik iş ortağı
}

enum PartnershipStatus {
  PENDING      // Onay bekliyor
  ACTIVE       // Aktif ortaklık
  SUSPENDED    // Askıya alınmış
  TERMINATED   // Sonlandırılmış
  REJECTED     // Reddedilmiş
}

// Firmalar Arası Ortaklık/Eşleştirme Sistemi
model CompanyPartnership {
  id          Int               @id @default(autoincrement())

  // İki taraflı ilişki
  company     Company           @relation("CompanyAsInitiator", fields: [companyId], references: [id], onDelete: Cascade)
  companyId   Int

  partner     Company           @relation("CompanyAsPartner", fields: [partnerId], references: [id], onDelete: Cascade)
  partnerId   Int

  type        PartnershipType
  status      PartnershipStatus @default(PENDING)

  // Ortaklık Detayları
  title       String            // "Kumaş Tedarik Anlaşması", "Fason Üretim Ortaklığı"
  description String?           @db.Text
  terms       Json?             // Anlaşma koşulları: { paymentTerms, deliveryTerms, qualityStandards, etc. }

  // Finansal Bilgiler
  contractValue     Float?      // Anlaşma değeri
  currency          String?     @default("USD")
  paymentTerms      String?     // "NET 30", "NET 60", "Advance Payment"

  // Tarihler
  startDate         DateTime?
  endDate           DateTime?
  renewalDate       DateTime?

  // Performans & İstatistikler
  totalOrders       Int         @default(0)
  totalRevenue      Float       @default(0)
  averageLeadTime   Int?        // Ortalama teslim süresi (gün)
  qualityScore      Float?      // 1-10 arası kalite skoru
  onTimeDelivery    Float?      // Zamanında teslimat oranı (%)

  // Notlar ve Dökümanlar
  notes             String?     @db.Text
  contractFile      String?     // Sözleşme PDF
  nda               Boolean     @default(false) // NDA imzalandı mı?

  // Kategori Eşleştirmeleri
  categoryMappings  SharedCategoryMapping[]

  // İletişim
  initiatedBy       User?       @relation(fields: [initiatedById], references: [id])
  initiatedById     Int?

  approvedBy        User?       @relation("PartnershipApprover", fields: [approvedById], references: [id])
  approvedById      Int?

  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@unique([companyId, partnerId, type])
  @@index([companyId, status])
  @@index([partnerId, status])
  @@index([type, status])
  @@index([status, startDate])
  @@map("company_partnerships")
}

// Markalar Arası Kategori Eşleştirme (Kategori Uyumu)
model SharedCategoryMapping {
  id          Int       @id @default(autoincrement())

  // Ortaklık ilişkisi
  partnership CompanyPartnership @relation(fields: [partnershipId], references: [id], onDelete: Cascade)
  partnershipId Int

  // Birinci firmanın kategorisi
  sourceCompany     Company         @relation("SourceCategoryCompany", fields: [sourceCompanyId], references: [id], onDelete: Cascade)
  sourceCompanyId   Int
  sourceCategory    CompanyCategory @relation("SourceCategory", fields: [sourceCategoryId], references: [id], onDelete: Cascade)
  sourceCategoryId  Int

  // İkinci firmanın eşleşen kategorisi
  targetCompany     Company         @relation("TargetCategoryCompany", fields: [targetCompanyId], references: [id], onDelete: Cascade)
  targetCompanyId   Int
  targetCategory    CompanyCategory @relation("TargetCategory", fields: [targetCategoryId], references: [id], onDelete: Cascade)
  targetCategoryId  Int

  // Eşleştirme Detayları
  matchScore        Float?          // Otomatik hesaplanan benzerlik skoru (0-100)
  isManualMapping   Boolean         @default(false) // Manuel eşleştirme mi, otomatik mi?
  isActive          Boolean         @default(true)

  // Çapraz İşlem Ayarları
  allowCrossOrders  Boolean         @default(true)  // Bu kategoriler arası sipariş alınabilir mi?
  priceAdjustment   Float?          @default(0)     // Fiyat ayarlaması (% olarak)
  notes             String?         @db.Text

  createdBy         User?           @relation(fields: [createdById], references: [id])
  createdById       Int?

  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@unique([sourceCategoryId, targetCategoryId])
  @@index([partnershipId])
  @@index([sourceCompanyId])
  @@index([targetCompanyId])
  @@index([isActive])
  @@map("shared_category_mappings")
}

// ========================================
// ADMIN ANALYTICS & COMPARISON SYSTEM
// ========================================

enum ReportType {
  COMPANY_COMPARISON    // Firma karşılaştırma raporu
  PERFORMANCE           // Performans raporu
  FINANCIAL             // Finansal rapor
  QUALITY               // Kalite raporu
  MARKET_ANALYSIS       // Pazar analizi
  TREND_ANALYSIS        // Trend analizi
  CUSTOM                // Özel rapor
}

enum ReportPeriod {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
  CUSTOM
}

// Admin Raporlama ve Analiz Sistemi
model AdminReport {
  id            Int          @id @default(autoincrement())

  type          ReportType
  period        ReportPeriod
  title         String
  description   String?      @db.Text

  // Tarih Aralığı
  startDate     DateTime
  endDate       DateTime

  // İlgili Firmalar
  companies     Json         // Array of company IDs: [1, 2, 3, ...]

  // Rapor Verileri
  metrics       Json         // { totalOrders, totalRevenue, avgLeadTime, qualityScore, etc. }
  charts        Json?        // Grafik verileri
  summary       String?      @db.Text
  insights      String?      @db.Text // AI-powered insights

  // Kıyaslama Verileri
  comparisons   Json?        // Firma kıyaslama verileri
  rankings      Json?        // Sıralama verileri
  benchmarks    Json?        // Sektör ortalamaları

  // Dosya
  reportFile    String?      // PDF/Excel export

  // Oluşturan
  createdBy     User         @relation(fields: [createdById], references: [id])
  createdById   Int

  // Paylaşım
  isPublic      Boolean      @default(false)
  sharedWith    Json?        // User/Company IDs ile paylaşım

  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([type, period])
  @@index([createdById])
  @@index([startDate, endDate])
  @@index([createdAt])
  @@map("admin_reports")
}

// Firma Performans Metrikleri (Real-time tracking)
model CompanyMetrics {
  id            Int      @id @default(autoincrement())

  company       Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId     Int

  // Tarih
  date          DateTime @default(now())
  period        ReportPeriod @default(DAILY)

  // Sipariş Metrikleri
  totalOrders          Int      @default(0)
  completedOrders      Int      @default(0)
  cancelledOrders      Int      @default(0)
  pendingOrders        Int      @default(0)
  orderCompletionRate  Float?   // %

  // Finansal Metrikleri
  totalRevenue         Float    @default(0)
  averageOrderValue    Float?
  totalProfit          Float?
  profitMargin         Float?   // %

  // Üretim Metrikleri
  totalSamples         Int      @default(0)
  approvedSamples      Int      @default(0)
  sampleApprovalRate   Float?   // %
  averageLeadTime      Int?     // gün
  onTimeDeliveryRate   Float?   // %

  // Kalite Metrikleri
  qualityScore         Float?   // 1-10
  defectRate           Float?   // %
  returnRate           Float?   // %
  customerSatisfaction Float?   // 1-10

  // Müşteri/Partner Metrikleri
  activeCustomers      Int      @default(0)
  newCustomers         Int      @default(0)
  retainedCustomers    Int      @default(0)
  customerRetentionRate Float?  // %

  // Verimlilik Metrikleri
  capacityUtilization  Float?   // %
  productivityScore    Float?   // 1-10
  employeeCount        Int?

  // Platform Kullanımı
  activeUsers          Int      @default(0)
  loginCount           Int      @default(0)
  featureUsage         Json?    // { samples: 50, orders: 30, messages: 100 }

  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@unique([companyId, date, period])
  @@index([companyId, date])
  @@index([period, date])
  @@index([date])
  @@map("company_metrics")
}

// ========================================
