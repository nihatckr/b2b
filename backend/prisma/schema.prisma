generator client {
  provider      = "prisma-client-js"
  output        = "../lib/generated"
  binaryTargets = ["native", "darwin-arm64", "windows"]
}

generator pothos {
  provider     = "prisma-pothos-types"
  output       = "../lib/pothos-prisma-types.ts"
  clientOutput = "./generated"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Company {
  id                      Int                     @id @default(autoincrement())
  name                    String
  email                   String?                 @unique
  phone                   String?
  address                 String?
  location                String?
  website                 String?
  type                    CompanyType             @default(MANUFACTURER)
  description             String?                 @db.Text
  ownerId                 Int?                    @unique
  isActive                Boolean                 @default(true)
  settings                Json?
  subscriptionPlan        SubscriptionPlan        @default(FREE)
  subscriptionStatus      SubscriptionStatus      @default(TRIAL)
  trialStartedAt          DateTime?               @default(now())
  trialEndsAt             DateTime?
  subscriptionStartedAt   DateTime?
  currentPeriodStart      DateTime?
  currentPeriodEnd        DateTime?
  cancelAtPeriodEnd       Boolean                 @default(false)
  cancelledAt             DateTime?
  billingCycle            BillingCycle            @default(MONTHLY)
  billingEmail            String?
  billingAddress          String?                 @db.Text
  taxId                   String?
  maxUsers                Int                     @default(3)
  maxSamples              Int                     @default(10)
  maxOrders               Int                     @default(5)
  maxCollections          Int                     @default(5)
  maxStorageGB            Float                   @default(1)
  currentUsers            Int                     @default(0)
  currentSamples          Int                     @default(0)
  currentOrders           Int                     @default(0)
  currentCollections      Int                     @default(0)
  currentStorageGB        Float                   @default(0)
  logo                    String?
  coverImage              String?
  brandColors             Json?
  profileSlug             String?                 @unique
  isPublicProfile         Boolean                 @default(false)
  socialLinks             Json?
  defaultView             String?
  enabledModules          Json?
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  city                    String?
  country                 String?
  categories              Category[]
  collections             Collection[]
  owner                   User?                   @relation("CompanyOwner", fields: [ownerId], references: [id])
  companyCategories       CompanyCategory[]
  metrics                 CompanyMetrics[]
  partnershipsAsInitiator CompanyPartnership[]    @relation("CompanyAsInitiator")
  partnershipsAsPartner   CompanyPartnership[]    @relation("CompanyAsPartner")
  libraryItems            LibraryItem[]           @relation("CompanyLibraryItems")
  messages                Message[]
  orders                  Order[]
  productionTracking      ProductionTracking[]
  samples                 Sample[]
  sourceCategoryMappings  SharedCategoryMapping[] @relation("SourceCategoryCompany")
  targetCategoryMappings  SharedCategoryMapping[] @relation("TargetCategoryCompany")
  employees               User[]                  @relation("CompanyEmployees")

  @@index([email])
  @@index([type, isActive])
  @@index([isActive, createdAt])
  @@index([location])
  @@index([ownerId])
  @@index([subscriptionPlan])
  @@index([subscriptionStatus])
  @@index([trialEndsAt])
  @@index([currentPeriodEnd])
  @@index([profileSlug])
  @@index([isPublicProfile])
  @@fulltext([name, description])
  @@map("companies")
}

model Message {
  id         Int      @id @default(autoincrement())
  content    String   @db.Text
  senderId   Int
  receiverId Int?
  isRead     Boolean  @default(false)
  type       String   @default("general")
  orderId    Int?
  sampleId   Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  companyId  Int?
  company    Company? @relation(fields: [companyId], references: [id])
  order      Order?   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  receiver   User?    @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  sample     Sample?  @relation(fields: [sampleId], references: [id], onDelete: Cascade)
  sender     User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([sampleId])
  @@index([senderId])
  @@index([receiverId])
  @@index([companyId], map: "messages_companyId_fkey")
  @@map("messages")
}

model ProductionTracking {
  id                     Int                     @id @default(autoincrement())
  orderId                Int?                    @unique
  sampleId               Int?
  currentStage           ProductionStage         @default(PLANNING)
  overallStatus          ProductionStatus        @default(IN_PROGRESS)
  progress               Int                     @default(0)
  estimatedStartDate     DateTime?
  estimatedEndDate       DateTime?
  actualStartDate        DateTime?
  actualEndDate          DateTime?
  notes                  String?                 @db.Text
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  companyId              Int?
  sewingWorkshopId       Int?
  packagingWorkshopId    Int?
  customerApprovalStatus ApprovalStatus          @default(DRAFT)
  customerApprovedAt     DateTime?
  customerNote           String?                 @db.Text
  revisionCount          Int                     @default(0)
  notifications          Notification[]          @relation("ProductionNotifications")
  productionRevisions    ProductionRevision[]
  stageUpdates           ProductionStageUpdate[]
  company                Company?                @relation(fields: [companyId], references: [id])
  order                  Order?                  @relation(fields: [orderId], references: [id])
  packagingWorkshop      Workshop?               @relation("PackagingWorkshop", fields: [packagingWorkshopId], references: [id])
  sample                 Sample?                 @relation(fields: [sampleId], references: [id])
  sewingWorkshop         Workshop?               @relation("SewingWorkshop", fields: [sewingWorkshopId], references: [id])
  qualityControls        QualityControl[]
  revisions              Revision[]
  tasks                  Task[]                  @relation("ProductionTrackingTasks")

  @@index([companyId], map: "production_tracking_companyId_fkey")
  @@index([packagingWorkshopId], map: "production_tracking_packagingWorkshopId_fkey")
  @@index([sampleId], map: "production_tracking_sampleId_fkey")
  @@index([sewingWorkshopId], map: "production_tracking_sewingWorkshopId_fkey")
  @@map("production_tracking")
}

model Revision {
  id                   Int                 @id @default(autoincrement())
  orderId              Int?
  sampleId             Int?
  productionTrackingId Int?
  revisionNumber       Int                 @default(1)
  requestMessage       String?
  responseMessage      String?
  status               String              @default("pending")
  requestedAt          DateTime            @default(now())
  completedAt          DateTime?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  order                Order?              @relation(fields: [orderId], references: [id])
  productionTracking   ProductionTracking? @relation(fields: [productionTrackingId], references: [id])
  sample               Sample?             @relation(fields: [sampleId], references: [id])

  @@index([orderId], map: "revisions_orderId_fkey")
  @@index([productionTrackingId], map: "revisions_productionTrackingId_fkey")
  @@index([sampleId], map: "revisions_sampleId_fkey")
  @@map("revisions")
}

model User {
  id                        Int                      @id @default(autoincrement())
  email                     String                   @unique
  password                  String
  name                      String?
  username                  String?                  @unique
  firstName                 String?
  lastName                  String?
  phone                     String?
  companyId                 Int?
  role                      Role                     @default(INDIVIDUAL_CUSTOMER)
  isCompanyOwner            Boolean                  @default(false)
  department                Department?
  jobTitle                  String?
  permissions               Json?
  isActive                  Boolean                  @default(true)
  isPendingApproval         Boolean                  @default(false)
  avatar                    String?                  @db.Text
  bio                       String?                  @db.Text
  socialLinks               Json?
  emailNotifications        Boolean                  @default(true)
  pushNotifications         Boolean                  @default(false)
  language                  String                   @default("tr")
  timezone                  String                   @default("Europe/Istanbul")
  createdAt                 DateTime                 @default(now())
  updatedAt                 DateTime                 @updatedAt
  resetToken                String?
  resetTokenExpiry          DateTime?
  emailVerificationExpiry   DateTime?
  emailVerificationToken    String?
  emailVerified             Boolean                  @default(false)
  customAvatar              String?                  @db.Text
  orderProductionUpdates    OrderProduction[]        @relation("OrderProductionUpdates")
  customerQuestions         Question[]               @relation("CustomerQuestions")
  manufactureQuestions      Question[]               @relation("ManufactureQuestions")
  customerReviews           Review[]                 @relation("CustomerReviews")
  sampleProductionUpdates   SampleProduction[]
  createdReports            AdminReport[]
  categories                Category[]
  collections               Collection[]
  ownedCompanies            Company?                 @relation("CompanyOwner")
  createdCompanyCategories  CompanyCategory[]
  approvedPartnerships      CompanyPartnership[]     @relation("PartnershipApprover")
  initiatedPartnerships     CompanyPartnership[]
  createdLibraryItems       LibraryItem[]            @relation("LibraryItemCreator")
  receivedMessages          Message[]                @relation("ReceivedMessages")
  sentMessages              Message[]                @relation("SentMessages")
  notifications             Notification[]           @relation("UserNotifications")
  respondedNegotiations     OrderNegotiation[]       @relation("RespondedNegotiations")
  sentNegotiations          OrderNegotiation[]       @relation("SentNegotiations")
  customerOrders            Order[]                  @relation("CustomerOrders")
  manufactureOrders         Order[]                  @relation("ManufactureOrders")
  revisionRequests          ProductionRevision[]     @relation("RevisionRequester")
  qualityInspections        QualityControl[]         @relation("QualityInspector")
  customerSamples           Sample[]                 @relation("CustomerSamples")
  manufactureSamples        Sample[]                 @relation("ManufactureSamples")
  createdCategoryMappings   SharedCategoryMapping[]
  createdStandardCategories StandardCategory[]       @relation("StandardCategoryCreator")
  assignedTasks             Task[]                   @relation("AssignedTasks")
  tasks                     Task[]                   @relation("UserTasks")
  favoriteCollections       UserFavoriteCollection[]
  company                   Company?                 @relation("CompanyEmployees", fields: [companyId], references: [id])
  ownedWorkshops            Workshop[]               @relation("WorkshopOwner")

  @@index([email])
  @@index([username])
  @@index([companyId, role])
  @@index([companyId, isActive])
  @@index([companyId, department])
  @@index([role, isActive])
  @@index([isActive])
  @@index([isPendingApproval])
  @@index([createdAt])
  @@map("users")
}

model StandardCategory {
  id                Int                @id @default(autoincrement())
  code              String             @unique
  name              String
  description       String?            @db.Text
  level             CategoryLevel
  order             Int                @default(0)
  icon              String?
  image             String?
  isActive          Boolean            @default(true)
  isPublic          Boolean            @default(true)
  keywords          String?            @db.Text
  tags              String?
  parentId          Int?
  createdById       Int?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  companyCategories CompanyCategory[]
  createdBy         User?              @relation("StandardCategoryCreator", fields: [createdById], references: [id])
  parentCategory    StandardCategory?  @relation("StandardCategoryTree", fields: [parentId], references: [id])
  subCategories     StandardCategory[] @relation("StandardCategoryTree")

  @@index([code])
  @@index([level])
  @@index([parentId])
  @@index([isActive, isPublic])
  @@index([order])
  @@index([createdById], map: "standard_categories_createdById_fkey")
  @@fulltext([name, description, keywords])
  @@map("standard_categories")
}

model CompanyCategory {
  id                 Int                     @id @default(autoincrement())
  type               CategoryType            @default(COMPANY_CUSTOM)
  standardCategoryId Int?
  name               String
  description        String?                 @db.Text
  companyId          Int
  parentId           Int?
  internalCode       String?
  order              Int                     @default(0)
  isActive           Boolean                 @default(true)
  productCount       Int                     @default(0)
  lastUsedAt         DateTime?
  customFields       Json?
  authorId           Int?
  createdAt          DateTime                @default(now())
  updatedAt          DateTime                @updatedAt
  collections        Collection[]
  author             User?                   @relation(fields: [authorId], references: [id])
  company            Company                 @relation(fields: [companyId], references: [id], onDelete: Cascade)
  parentCategory     CompanyCategory?        @relation("CompanyCategoryTree", fields: [parentId], references: [id])
  subCategories      CompanyCategory[]       @relation("CompanyCategoryTree")
  standardCategory   StandardCategory?       @relation(fields: [standardCategoryId], references: [id])
  sourceMappings     SharedCategoryMapping[] @relation("SourceCategory")
  targetMappings     SharedCategoryMapping[] @relation("TargetCategory")

  @@unique([companyId, parentId, name])
  @@index([companyId, type])
  @@index([companyId, isActive])
  @@index([standardCategoryId])
  @@index([parentId])
  @@index([productCount])
  @@index([authorId], map: "company_categories_authorId_fkey")
  @@fulltext([name, description])
  @@map("company_categories")
}

model Category {
  id               Int          @id @default(autoincrement())
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  name             String
  description      String?
  authorId         Int?
  parentCategoryId Int?
  companyId        Int?
  author           User?        @relation(fields: [authorId], references: [id])
  company          Company?     @relation(fields: [companyId], references: [id])
  parentCategory   Category?    @relation("CategoryToSubCategories", fields: [parentCategoryId], references: [id])
  subCategories    Category[]   @relation("CategoryToSubCategories")
  collections      Collection[]

  @@unique([companyId, parentCategoryId, name])
  @@index([authorId], map: "categories_authorId_fkey")
  @@index([parentCategoryId], map: "categories_parentCategoryId_fkey")
  @@map("categories")
}

model Collection {
  id                 Int                      @id @default(autoincrement())
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  name               String
  description        String?                  @db.Text
  modelCode          String                   @unique
  season             String?
  gender             Gender?
  fit                String?
  trend              String?
  colors             String?
  sizeGroups         String?
  sizeRange          String?
  measurementChart   String?
  fabricComposition  String?                  @db.Text
  accessories        String?                  @db.Text
  images             String?                  @db.Text
  techPack           String?
  moq                Int?
  targetPrice        Float?
  targetLeadTime     Int?
  notes              String?                  @db.Text
  likesCount         Int                      @default(0)
  viewCount          Int                      @default(0)
  shareCount         Int                      @default(0)
  lastViewedAt       DateTime?
  price              Float                    @default(0)
  sku                String?                  @unique
  stock              Int                      @default(0)
  isActive           Boolean                  @default(true)
  isFeatured         Boolean                  @default(false)
  slug               String?                  @unique
  productionSchedule Json?
  categoryId         Int?
  companyCategoryId  Int?
  authorId           Int?
  companyId          Int?
  currency           String?                  @default("USD")
  deadline           DateTime?
  deadlineDays       Int?
  questions          Question[]
  reviews            Review[]
  billOfMaterials    BillOfMaterial[]
  author             User?                    @relation(fields: [authorId], references: [id])
  category           Category?                @relation(fields: [categoryId], references: [id])
  companyCategory    CompanyCategory?         @relation(fields: [companyCategoryId], references: [id])
  company            Company?                 @relation(fields: [companyId], references: [id])
  orders             Order[]
  samples            Sample[]                 @relation("SampleCollection")
  revisedSamples     Sample[]                 @relation("OriginalCollection")
  tasks              Task[]                   @relation("CollectionTasks")
  favoritedBy        UserFavoriteCollection[]
  certifications     LibraryItem[]            @relation("CollectionCertifications")

  @@index([companyId, isActive])
  @@index([season])
  @@index([gender])
  @@index([isFeatured])
  @@index([isActive, createdAt])
  @@index([slug])
  @@index([modelCode])
  @@index([createdAt])
  @@index([viewCount])
  @@index([likesCount])
  @@index([authorId], map: "collections_authorId_fkey")
  @@index([categoryId], map: "collections_categoryId_fkey")
  @@index([companyCategoryId], map: "collections_companyCategoryId_fkey")
  @@fulltext([name, description])
  @@map("collections")
}

model UserFavoriteCollection {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now())
  userId       Int
  collectionId Int
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, collectionId])
  @@index([userId])
  @@index([collectionId])
  @@map("user_favorite_collections")
}

model Sample {
  id                      Int                  @id @default(autoincrement())
  createdAt               DateTime             @default(now())
  updatedAt               DateTime             @updatedAt
  sampleNumber            String               @unique
  sampleType              SampleType           @default(STANDARD)
  status                  SampleStatus         @default(REQUESTED)
  customerNote            String?              @db.Text
  manufacturerResponse    String?              @db.Text
  customDesignImages      String?              @db.Text
  revisionRequests        String?
  originalCollectionId    Int?
  name                    String?
  description             String?              @db.Text
  images                  String?              @db.Text
  aiGenerated             Boolean?             @default(false)
  aiPrompt                String?              @db.Text
  aiSketchUrl             String?
  unitPrice               Float?
  productionDays          Int?
  estimatedProductionDate DateTime?
  actualProductionDate    DateTime?
  shippingDate            DateTime?
  deliveryAddress         String?
  cargoTrackingNumber     String?
  customerQuotedPrice     Float?
  customerQuoteDays       Int?
  customerQuoteNote       String?              @db.Text
  customerQuoteType       String?
  customerQuoteSentAt     DateTime?
  collectionId            Int?
  customerId              Int
  manufactureId           Int
  companyId               Int?
  viewCount               Int                  @default(0)
  shareCount              Int                  @default(0)
  lastViewedAt            DateTime?
  productionHistory       SampleProduction[]
  aiAnalysis              AIAnalysis?
  messages                Message[]
  notifications           Notification[]       @relation("SampleNotifications")
  productionTracking      ProductionTracking[]
  revisions               Revision[]
  collection              Collection?          @relation("SampleCollection", fields: [collectionId], references: [id])
  company                 Company?             @relation(fields: [companyId], references: [id])
  customer                User                 @relation("CustomerSamples", fields: [customerId], references: [id])
  manufacture             User                 @relation("ManufactureSamples", fields: [manufactureId], references: [id])
  originalCollection      Collection?          @relation("OriginalCollection", fields: [originalCollectionId], references: [id])
  tasks                   Task[]               @relation("SampleTasks")

  @@index([status])
  @@index([customerId, status])
  @@index([manufactureId, status])
  @@index([companyId, status, createdAt])
  @@index([collectionId])
  @@index([sampleNumber])
  @@index([sampleType, status])
  @@index([aiGenerated])
  @@index([createdAt])
  @@index([status, createdAt])
  @@index([viewCount])
  @@index([originalCollectionId], map: "samples_originalCollectionId_fkey")
  @@map("samples")
}

model AIAnalysis {
  id                     Int      @id @default(autoincrement())
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  detectedProduct        String?
  detectedColor          String?
  detectedFabric         String?
  detectedPattern        String?
  detectedGender         String?
  detectedClassification String?
  detectedAccessories    String?
  technicalDescription   String?  @db.Text
  qualityAnalysis        String?  @db.Text
  qualityScore           Float?
  costAnalysis           String?  @db.Text
  estimatedCostMin       Float?
  estimatedCostMax       Float?
  suggestedMinOrder      Int?
  trendAnalysis          String?  @db.Text
  trendScore             Float?
  targetMarket           String?
  salesPotential         String?
  designSuggestions      String?  @db.Text
  designStyle            String?
  designFocus            String?
  sampleId               Int      @unique
  sample                 Sample   @relation(fields: [sampleId], references: [id], onDelete: Cascade)

  @@map("ai_analyses")
}

model SampleProduction {
  id            Int          @id @default(autoincrement())
  createdAt     DateTime     @default(now())
  status        SampleStatus
  note          String?
  estimatedDays Int?
  actualDate    DateTime?
  sampleId      Int
  updatedById   Int
  sample        Sample       @relation(fields: [sampleId], references: [id])
  updatedBy     User         @relation(fields: [updatedById], references: [id])

  @@index([sampleId], map: "SampleProduction_sampleId_fkey")
  @@index([updatedById], map: "SampleProduction_updatedById_fkey")
}

model Order {
  id                      Int                 @id @default(autoincrement())
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
  orderNumber             String              @unique
  quantity                Int
  unitPrice               Float
  totalPrice              Float
  targetPrice             Float?
  currency                String?             @default("USD")
  deadline                DateTime?
  notes                   String?             @db.Text
  status                  OrderStatus         @default(PENDING)
  customerNote            String?
  manufacturerResponse    String?
  customerQuotedPrice     Float?
  customerQuoteDays       Int?
  customerQuoteNote       String?             @db.Text
  customerQuoteType       String?
  customerQuoteSentAt     DateTime?
  productionDays          Int?
  estimatedProductionDate DateTime?
  actualProductionStart   DateTime?
  actualProductionEnd     DateTime?
  shippingDate            DateTime?
  deliveryAddress         String?
  cargoTrackingNumber     String?
  negotiationStatus       String?             @default("OPEN")
  agreedPrice             Float?
  agreedDays              Int?
  agreedAt                DateTime?
  agreedQuantity          Int?
  collectionId            Int
  customerId              Int
  manufactureId           Int
  companyId               Int?
  productionHistory       OrderProduction[]
  messages                Message[]
  notifications           Notification[]      @relation("OrderNotifications")
  negotiations            OrderNegotiation[]
  collection              Collection          @relation(fields: [collectionId], references: [id])
  company                 Company?            @relation(fields: [companyId], references: [id])
  customer                User                @relation("CustomerOrders", fields: [customerId], references: [id])
  manufacture             User                @relation("ManufactureOrders", fields: [manufactureId], references: [id])
  productionTracking      ProductionTracking?
  revisions               Revision[]
  tasks                   Task[]              @relation("OrderTasks")

  @@index([orderNumber])
  @@index([status])
  @@index([customerId, status])
  @@index([manufactureId, status])
  @@index([companyId, status, createdAt])
  @@index([collectionId])
  @@map("orders")
}

model OrderNegotiation {
  id             Int       @id @default(autoincrement())
  orderId        Int
  senderId       Int
  senderRole     String
  unitPrice      Float
  productionDays Int
  quantity       Int?
  currency       String    @default("USD")
  message        String?   @db.Text
  status         String    @default("PENDING")
  respondedAt    DateTime?
  respondedBy    Int?
  createdAt      DateTime  @default(now())
  order          Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  responder      User?     @relation("RespondedNegotiations", fields: [respondedBy], references: [id])
  sender         User      @relation("SentNegotiations", fields: [senderId], references: [id])

  @@index([orderId, createdAt])
  @@index([status])
  @@index([respondedBy], map: "order_negotiations_respondedBy_fkey")
  @@index([senderId], map: "order_negotiations_senderId_fkey")
  @@map("order_negotiations")
}

model OrderProduction {
  id            Int         @id @default(autoincrement())
  createdAt     DateTime    @default(now())
  status        OrderStatus
  note          String?
  estimatedDays Int?
  actualDate    DateTime?
  orderId       Int
  updatedById   Int
  order         Order       @relation(fields: [orderId], references: [id])
  updatedBy     User        @relation("OrderProductionUpdates", fields: [updatedById], references: [id])

  @@index([orderId], map: "OrderProduction_orderId_fkey")
  @@index([updatedById], map: "OrderProduction_updatedById_fkey")
}

model Question {
  id            Int        @id @default(autoincrement())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  question      String
  answer        String?
  isAnswered    Boolean    @default(false)
  isPublic      Boolean    @default(true)
  collectionId  Int
  customerId    Int
  manufactureId Int
  collection    Collection @relation(fields: [collectionId], references: [id])
  customer      User       @relation("CustomerQuestions", fields: [customerId], references: [id])
  manufacture   User       @relation("ManufactureQuestions", fields: [manufactureId], references: [id])

  @@index([collectionId], map: "Question_collectionId_fkey")
  @@index([customerId], map: "Question_customerId_fkey")
  @@index([manufactureId], map: "Question_manufactureId_fkey")
}

model Review {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  rating       Int
  comment      String?
  isApproved   Boolean    @default(false)
  collectionId Int
  customerId   Int
  collection   Collection @relation(fields: [collectionId], references: [id])
  customer     User       @relation("CustomerReviews", fields: [customerId], references: [id])

  @@index([collectionId], map: "Review_collectionId_fkey")
  @@index([customerId], map: "Review_customerId_fkey")
}

model File {
  id          String   @id @default(cuid())
  filename    String
  path        String
  size        Int
  mimetype    String
  encoding    String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("files")
}

model ProductionStageUpdate {
  id              Int                @id @default(autoincrement())
  productionId    Int
  stage           ProductionStage
  status          StageStatus        @default(NOT_STARTED)
  actualStartDate DateTime?
  actualEndDate   DateTime?
  estimatedDays   Int?
  notes           String?            @db.Text
  photos          String?            @db.Text
  isRevision      Boolean            @default(false)
  delayReason     String?            @db.Text
  extraDays       Int                @default(0)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  production      ProductionTracking @relation(fields: [productionId], references: [id], onDelete: Cascade)

  @@index([productionId], map: "production_stage_updates_productionId_fkey")
  @@map("production_stage_updates")
}

model QualityControl {
  id               Int                @id @default(autoincrement())
  productionId     Int
  inspectorId      Int
  checkDate        DateTime           @default(now())
  result           QualityResult      @default(PENDING)
  score            Int?
  notes            String?            @db.Text
  photos           String?            @db.Text
  fabricDefects    Boolean            @default(false)
  sewingDefects    Boolean            @default(false)
  measureDefects   Boolean            @default(false)
  finishingDefects Boolean            @default(false)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  inspector        User               @relation("QualityInspector", fields: [inspectorId], references: [id])
  production       ProductionTracking @relation(fields: [productionId], references: [id], onDelete: Cascade)

  @@index([inspectorId], map: "quality_controls_inspectorId_fkey")
  @@index([productionId], map: "quality_controls_productionId_fkey")
  @@map("quality_controls")
}

model Workshop {
  id                   Int                  @id @default(autoincrement())
  name                 String               @unique
  type                 WorkshopType
  capacity             Int?
  location             String?
  isActive             Boolean              @default(true)
  ownerId              Int
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  packagingProductions ProductionTracking[] @relation("PackagingWorkshop")
  sewingProductions    ProductionTracking[] @relation("SewingWorkshop")
  owner                User                 @relation("WorkshopOwner", fields: [ownerId], references: [id])

  @@index([ownerId], map: "workshops_ownerId_fkey")
  @@map("workshops")
}

model LibraryItem {
  id                                 Int              @id @default(autoincrement())
  scope                              LibraryScope     @default(COMPANY_CUSTOM)
  category                           LibraryCategory
  code                               String?          @unique
  name                               String
  description                        String?          @db.Text
  imageUrl                           String?          @db.Text
  data                               Json?
  tags                               Json?
  internalCode                       String?
  notes                              String?          @db.Text
  isActive                           Boolean          @default(true)
  isPopular                          Boolean          @default(false)
  companyId                          Int?
  standardItemId                     Int?
  createdById                        Int?
  createdAt                          DateTime         @default(now())
  updatedAt                          DateTime         @updatedAt
  iconValue                          String?
  bomUsages                          BillOfMaterial[] @relation("BOMLibraryItems")
  company                            Company?         @relation("CompanyLibraryItems", fields: [companyId], references: [id], onDelete: Cascade)
  createdBy                          User?            @relation("LibraryItemCreator", fields: [createdById], references: [id])
  standardItem                       LibraryItem?     @relation("StandardReference", fields: [standardItemId], references: [id])
  companyItems                       LibraryItem[]    @relation("StandardReference")
  collections                        Collection[]     @relation("CollectionCertifications")
  library_items_ItemCertifications_A LibraryItem[]    @relation("ItemCertifications")
  library_items_ItemCertifications_B LibraryItem[]    @relation("ItemCertifications")

  @@unique([companyId, category, name])
  @@index([scope, category])
  @@index([companyId, category, isActive])
  @@index([category, isActive, isPopular])
  @@index([standardItemId])
  @@index([code])
  @@index([createdById], map: "library_items_createdById_fkey")
  @@fulltext([name, description])
  @@map("library_items")
}

model BillOfMaterial {
  id            Int              @id @default(autoincrement())
  collectionId  Int
  componentType BOMComponentType @default(MATERIAL)
  libraryItemId Int?
  componentName String?
  consumption   Float
  unit          String
  wastePercent  Float            @default(0)
  placement     String?
  supplier      String?
  supplierCode  String?
  leadTime      Int?
  notes         String?          @db.Text
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  collection    Collection       @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  libraryItem   LibraryItem?     @relation("BOMLibraryItems", fields: [libraryItemId], references: [id])

  @@index([collectionId])
  @@index([componentType])
  @@index([libraryItemId])
  @@map("bill_of_materials")
}

model ProductionRevision {
  id            Int                @id @default(autoincrement())
  productionId  Int
  reason        String
  description   String?            @db.Text
  extraDays     Int                @default(0)
  extraCost     Float              @default(0)
  isApproved    Boolean            @default(false)
  requestedById Int
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  production    ProductionTracking @relation(fields: [productionId], references: [id], onDelete: Cascade)
  requestedBy   User               @relation("RevisionRequester", fields: [requestedById], references: [id])

  @@index([productionId], map: "production_revisions_productionId_fkey")
  @@index([requestedById], map: "production_revisions_requestedById_fkey")
  @@map("production_revisions")
}

model Notification {
  id                   Int                 @id @default(autoincrement())
  type                 NotificationType
  title                String
  message              String              @db.Text
  link                 String?
  isRead               Boolean             @default(false)
  userId               Int
  orderId              Int?
  sampleId             Int?
  productionTrackingId Int?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  data                 Json?
  order                Order?              @relation("OrderNotifications", fields: [orderId], references: [id], onDelete: Cascade)
  productionTracking   ProductionTracking? @relation("ProductionNotifications", fields: [productionTrackingId], references: [id], onDelete: Cascade)
  sample               Sample?             @relation("SampleNotifications", fields: [sampleId], references: [id], onDelete: Cascade)
  user                 User                @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isRead])
  @@index([userId, createdAt])
  @@index([orderId], map: "notifications_orderId_fkey")
  @@index([productionTrackingId], map: "notifications_productionTrackingId_fkey")
  @@index([sampleId], map: "notifications_sampleId_fkey")
  @@map("notifications")
}

model Task {
  id                   Int                 @id @default(autoincrement())
  title                String
  description          String?             @db.LongText
  status               TaskStatus          @default(TODO)
  priority             TaskPriority        @default(MEDIUM)
  type                 TaskType
  relatedStatus        String?
  targetStatus         String?
  entityType           String?
  productionStage      String?
  userId               Int
  assignedToId         Int?
  collectionId         Int?
  sampleId             Int?
  orderId              Int?
  productionTrackingId Int?
  dueDate              DateTime?
  completedAt          DateTime?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  notes                String?             @db.LongText
  assignedBy           Int?
  actionData           Json?
  assignedTo           User?               @relation("AssignedTasks", fields: [assignedToId], references: [id])
  collection           Collection?         @relation("CollectionTasks", fields: [collectionId], references: [id])
  order                Order?              @relation("OrderTasks", fields: [orderId], references: [id])
  productionTracking   ProductionTracking? @relation("ProductionTrackingTasks", fields: [productionTrackingId], references: [id])
  sample               Sample?             @relation("SampleTasks", fields: [sampleId], references: [id])
  user                 User                @relation("UserTasks", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])
  @@index([userId, dueDate])
  @@index([status, priority])
  @@index([relatedStatus])
  @@index([entityType, relatedStatus])
  @@index([createdAt])
  @@index([assignedToId], map: "tasks_assignedToId_fkey")
  @@index([collectionId], map: "tasks_collectionId_fkey")
  @@index([orderId], map: "tasks_orderId_fkey")
  @@index([productionTrackingId], map: "tasks_productionTrackingId_fkey")
  @@index([sampleId], map: "tasks_sampleId_fkey")
  @@map("tasks")
}

model CompanyPartnership {
  id               Int                     @id @default(autoincrement())
  companyId        Int
  partnerId        Int
  type             PartnershipType
  status           PartnershipStatus       @default(PENDING)
  title            String
  description      String?                 @db.Text
  terms            Json?
  contractValue    Float?
  currency         String?                 @default("USD")
  paymentTerms     String?
  startDate        DateTime?
  endDate          DateTime?
  renewalDate      DateTime?
  totalOrders      Int                     @default(0)
  totalRevenue     Float                   @default(0)
  averageLeadTime  Int?
  qualityScore     Float?
  onTimeDelivery   Float?
  notes            String?                 @db.Text
  contractFile     String?
  nda              Boolean                 @default(false)
  initiatedById    Int?
  approvedById     Int?
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @updatedAt
  approvedBy       User?                   @relation("PartnershipApprover", fields: [approvedById], references: [id])
  company          Company                 @relation("CompanyAsInitiator", fields: [companyId], references: [id], onDelete: Cascade)
  initiatedBy      User?                   @relation(fields: [initiatedById], references: [id])
  partner          Company                 @relation("CompanyAsPartner", fields: [partnerId], references: [id], onDelete: Cascade)
  categoryMappings SharedCategoryMapping[]

  @@unique([companyId, partnerId, type])
  @@index([companyId, status])
  @@index([partnerId, status])
  @@index([type, status])
  @@index([status, startDate])
  @@index([approvedById], map: "company_partnerships_approvedById_fkey")
  @@index([initiatedById], map: "company_partnerships_initiatedById_fkey")
  @@map("company_partnerships")
}

model SharedCategoryMapping {
  id               Int                @id @default(autoincrement())
  partnershipId    Int
  sourceCompanyId  Int
  sourceCategoryId Int
  targetCompanyId  Int
  targetCategoryId Int
  matchScore       Float?
  isManualMapping  Boolean            @default(false)
  isActive         Boolean            @default(true)
  allowCrossOrders Boolean            @default(true)
  priceAdjustment  Float?             @default(0)
  notes            String?            @db.Text
  createdById      Int?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  createdBy        User?              @relation(fields: [createdById], references: [id])
  partnership      CompanyPartnership @relation(fields: [partnershipId], references: [id], onDelete: Cascade)
  sourceCategory   CompanyCategory    @relation("SourceCategory", fields: [sourceCategoryId], references: [id], onDelete: Cascade)
  sourceCompany    Company            @relation("SourceCategoryCompany", fields: [sourceCompanyId], references: [id], onDelete: Cascade)
  targetCategory   CompanyCategory    @relation("TargetCategory", fields: [targetCategoryId], references: [id], onDelete: Cascade)
  targetCompany    Company            @relation("TargetCategoryCompany", fields: [targetCompanyId], references: [id], onDelete: Cascade)

  @@unique([sourceCategoryId, targetCategoryId])
  @@index([partnershipId])
  @@index([sourceCompanyId])
  @@index([targetCompanyId])
  @@index([isActive])
  @@index([createdById], map: "shared_category_mappings_createdById_fkey")
  @@index([targetCategoryId], map: "shared_category_mappings_targetCategoryId_fkey")
  @@map("shared_category_mappings")
}

model AdminReport {
  id          Int          @id @default(autoincrement())
  type        ReportType
  period      ReportPeriod
  title       String
  description String?      @db.Text
  startDate   DateTime
  endDate     DateTime
  companies   Json
  metrics     Json
  charts      Json?
  summary     String?      @db.Text
  insights    String?      @db.Text
  comparisons Json?
  rankings    Json?
  benchmarks  Json?
  reportFile  String?
  createdById Int
  isPublic    Boolean      @default(false)
  sharedWith  Json?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  createdBy   User         @relation(fields: [createdById], references: [id])

  @@index([type, period])
  @@index([createdById])
  @@index([startDate, endDate])
  @@index([createdAt])
  @@map("admin_reports")
}

model CompanyMetrics {
  id                    Int          @id @default(autoincrement())
  companyId             Int
  date                  DateTime     @default(now())
  period                ReportPeriod @default(DAILY)
  totalOrders           Int          @default(0)
  completedOrders       Int          @default(0)
  cancelledOrders       Int          @default(0)
  pendingOrders         Int          @default(0)
  orderCompletionRate   Float?
  totalRevenue          Float        @default(0)
  averageOrderValue     Float?
  totalProfit           Float?
  profitMargin          Float?
  totalSamples          Int          @default(0)
  approvedSamples       Int          @default(0)
  sampleApprovalRate    Float?
  averageLeadTime       Int?
  onTimeDeliveryRate    Float?
  qualityScore          Float?
  defectRate            Float?
  returnRate            Float?
  customerSatisfaction  Float?
  activeCustomers       Int          @default(0)
  newCustomers          Int          @default(0)
  retainedCustomers     Int          @default(0)
  customerRetentionRate Float?
  capacityUtilization   Float?
  productivityScore     Float?
  employeeCount         Int?
  activeUsers           Int          @default(0)
  loginCount            Int          @default(0)
  featureUsage          Json?
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  company               Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, date, period])
  @@index([companyId, date])
  @@index([period, date])
  @@index([date])
  @@map("company_metrics")
}

enum Role {
  ADMIN
  COMPANY_OWNER
  COMPANY_EMPLOYEE
  INDIVIDUAL_CUSTOMER
  MANUFACTURE
  CUSTOMER
}

enum CompanyType {
  MANUFACTURER
  BUYER
  BOTH
}

enum Department {
  PURCHASING
  PRODUCTION
  QUALITY
  DESIGN
  SALES
  MANAGEMENT
}

enum SubscriptionPlan {
  FREE
  STARTER
  PROFESSIONAL
  ENTERPRISE
  CUSTOM
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  PAST_DUE
  CANCELLED
  EXPIRED
}

enum BillingCycle {
  MONTHLY
  YEARLY
}

enum Gender {
  WOMEN
  MEN
  GIRLS
  BOYS
  UNISEX
}

enum CategoryType {
  GLOBAL_STANDARD
  COMPANY_CUSTOM
}

enum CategoryLevel {
  ROOT
  MAIN
  SUB
  DETAIL
}

enum SampleType {
  STANDARD
  REVISION
  CUSTOM
  DEVELOPMENT
}

enum SampleStatus {
  AI_DESIGN
  PENDING_APPROVAL
  PENDING
  REVIEWED
  QUOTE_SENT
  CUSTOMER_QUOTE_SENT
  MANUFACTURER_REVIEWING_QUOTE
  CONFIRMED
  REJECTED
  REJECTED_BY_CUSTOMER
  REJECTED_BY_MANUFACTURER
  IN_DESIGN
  PATTERN_READY
  IN_PRODUCTION
  PRODUCTION_COMPLETE
  QUALITY_CHECK
  SHIPPED
  DELIVERED
  ON_HOLD
  CANCELLED
  REQUESTED
  RECEIVED
  COMPLETED
}

enum OrderStatus {
  PENDING
  REVIEWED
  QUOTE_SENT
  CUSTOMER_QUOTE_SENT
  MANUFACTURER_REVIEWING_QUOTE
  CONFIRMED
  PRODUCTION_PLAN_SENT
  PRODUCTION_PLAN_APPROVED
  PRODUCTION_PLAN_REJECTED
  REJECTED
  REJECTED_BY_CUSTOMER
  REJECTED_BY_MANUFACTURER
  IN_PRODUCTION
  PRODUCTION_COMPLETE
  QUALITY_CHECK
  SHIPPED
  DELIVERED
  CANCELLED
}

enum LibraryCategory {
  COLOR
  FABRIC
  MATERIAL
  SIZE_GROUP
  SEASON
  FIT
  CERTIFICATION
}

enum LibraryScope {
  PLATFORM_STANDARD
  COMPANY_CUSTOM
}

enum BOMComponentType {
  FABRIC
  MATERIAL
  LABOR
  OTHER
}

enum ProductionStage {
  PLANNING
  FABRIC
  CUTTING
  SEWING
  PRESSING
  QUALITY
  PACKAGING
  SHIPPING
}

enum StageStatus {
  NOT_STARTED
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  REQUIRES_REVISION
}

enum ProductionStatus {
  IN_PROGRESS
  WAITING
  BLOCKED
  COMPLETED
  CANCELLED
}

enum ApprovalStatus {
  DRAFT
  PENDING
  APPROVED
  REJECTED
  REVISION
}

enum QualityResult {
  PENDING
  PASSED
  FAILED
  CONDITIONAL_PASS
}

enum WorkshopType {
  SEWING
  PACKAGING
  QUALITY_CONTROL
  GENERAL
}

enum NotificationType {
  ORDER
  SAMPLE
  MESSAGE
  PRODUCTION
  QUALITY
  SYSTEM
  USER_MANAGEMENT
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

enum TaskType {
  STATUS_CHANGE
  QUOTATION
  REVIEW_QUOTE
  APPROVE_REJECT
  PAYMENT
  DOCUMENT
  PRODUCTION_STAGE
  QUALITY_CHECK
  SHIPMENT
  MATERIAL
  MEETING
  REVISION
  NOTIFICATION
  DEADLINE_WARNING
  OTHER
}

enum PartnershipType {
  SUPPLIER
  MANUFACTURER
  DISTRIBUTOR
  WHITE_LABEL
  CO_BRANDING
  SUBCONTRACTOR
  STRATEGIC_PARTNER
}

enum PartnershipStatus {
  PENDING
  ACTIVE
  SUSPENDED
  TERMINATED
  REJECTED
}

enum ReportType {
  COMPANY_COMPARISON
  PERFORMANCE
  FINANCIAL
  QUALITY
  MARKET_ANALYSIS
  TREND_ANALYSIS
  CUSTOM
}

enum ReportPeriod {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
  CUSTOM
}
