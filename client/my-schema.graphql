schema {
  query: Query
  mutation: Mutation
}

input AdminPasswordResetInput {
  newPassword: String!
  requireChangeOnLogin: Boolean
  userId: Int!
}

input AdminUserUpdateInput {
  companyId: Int
  email: String
  firstName: String
  isActive: Boolean
  lastName: String
  name: String
  phone: String
  role: Role
  username: String
}

type AuthPayload {
  token: String!
  user: User!
}

type Category {
  authorId: Int
  companyId: Int
  createdAt: String!
  description: String
  id: Int!
  name: String!
  parentCategoryId: Int
  updatedAt: String!
}

type Collection {
  authorId: Int
  categoryId: Int
  companyId: Int
  createdAt: String!
  description: String
  id: Int!
  images: String
  isActive: Boolean!
  isFeatured: Boolean!
  name: String!
  price: Float!
  sku: String
  slug: String
  stock: Int!
  updatedAt: String!
}

type Company {
  address: String
  createdAt: String!
  email: String!
  id: Int!
  isActive: Boolean!
  name: String!
  phone: String
  updatedAt: String!
  website: String
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input LoginInput {
  email: String!
  password: String!
  rememberMe: Boolean
}

type Message {
  companyId: Int
  content: String!
  createdAt: String!
  id: Int!
  isRead: Boolean!
  receiver: String
  senderId: Int!
  type: String!
  updatedAt: String!
}

type Mutation {
  changePassword(currentPassword: String!, newPassword: String!): Boolean
  deleteUser(userId: Int!): User
  login(input: LoginInput!): AuthPayload
  logout: Boolean
  resetUserPassword(newPassword: String!, userId: Int!): User
  signup(input: SignupInput!): AuthPayload
  updateProfile(input: UserUpdateInput!): User
  updateUserRole(role: Role!, userId: Int!): User
}

type Order {
  actualProductionEnd: String
  actualProductionStart: String
  cargoTrackingNumber: String
  collectionId: Int!
  companyId: Int
  createdAt: String!
  customerId: Int!
  customerNote: String
  deliveryAddress: String
  estimatedProductionDate: String
  id: Int!
  manufactureId: Int!
  manufacturerResponse: String
  orderNumber: String!
  productionDays: Int
  quantity: Int!
  shippingDate: String
  status: OrderStatus!
  totalPrice: Float!
  unitPrice: Float!
  updatedAt: String!
}

type OrderProduction {
  actualDate: String
  createdAt: String!
  estimatedDays: Int
  id: Int!
  note: String
  orderId: Int!
  status: OrderStatus!
  updatedById: Int!
}

"""Order status tracking"""
enum OrderStatus {
  CANCELLED
  CONFIRMED
  DELIVERED
  IN_PRODUCTION
  PENDING
  PRODUCTION_COMPLETE
  QUALITY_CHECK
  QUOTE_SENT
  REJECTED
  REVIEWED
  SHIPPED
}

input PasswordChangeInput {
  confirmPassword: String
  currentPassword: String!
  newPassword: String!
}

input PasswordResetInput {
  email: String!
  newPassword: String
  resetToken: String
}

type ProductionTracking {
  actualEnd: String
  companyId: Int
  createdAt: String!
  estimatedEnd: String
  id: Int!
  notes: String
  orderId: Int
  progress: Int!
  sampleId: Int
  stage: String!
  status: String!
  updatedAt: String!
}

type Query {
  allUsers(role: Role, searchString: String, skip: Int, take: Int): [User!]!
  me: User
  userStats: UserStats
}

type Question {
  answer: String
  collectionId: Int!
  createdAt: String!
  customerId: Int!
  id: Int!
  isAnswered: Boolean!
  isPublic: Boolean!
  manufactureId: Int!
  question: String!
  updatedAt: String!
}

type Review {
  collectionId: Int!
  comment: String
  createdAt: String!
  customerId: Int!
  id: Int!
  isApproved: Boolean!
  rating: Int!
  updatedAt: String!
}

type Revision {
  completedAt: String
  createdAt: String!
  id: Int!
  orderId: Int
  productionTrackingId: Int
  requestMessage: String
  requestedAt: String!
  responseMessage: String
  revisionNumber: Int!
  sampleId: Int
  status: String!
  updatedAt: String!
}

"""User roles in the system"""
enum Role {
  ADMIN
  CUSTOMER
  MANUFACTURE
}

type Sample {
  actualProductionDate: String
  cargoTrackingNumber: String
  collectionId: Int
  companyId: Int
  createdAt: String!
  customDesignImages: String
  customerId: Int!
  customerNote: String
  deliveryAddress: String
  estimatedProductionDate: String
  id: Int!
  manufactureId: Int!
  manufacturerResponse: String
  originalCollectionId: Int
  productionDays: Int
  revisionRequests: String
  sampleNumber: String!
  sampleType: SampleType!
  shippingDate: String
  status: SampleStatus!
  updatedAt: String!
}

type SampleProduction {
  actualDate: String
  createdAt: String!
  estimatedDays: Int
  id: Int!
  note: String
  sampleId: Int!
  status: SampleStatus!
  updatedById: Int!
}

"""Sample status tracking"""
enum SampleStatus {
  APPROVED
  DELIVERED
  IN_PRODUCTION
  PRODUCTION_COMPLETE
  QUOTE_SENT
  RECEIVED
  REJECTED
  REQUESTED
  REVIEWED
  SHIPPED
}

"""Sample types in the system"""
enum SampleType {
  CUSTOM
  DEVELOPMENT
  REVISION
  STANDARD
}

input SignupInput {
  companyId: Int
  email: String!
  firstName: String
  lastName: String
  name: String
  password: String!
  phone: String
  role: Role
  username: String
}

"""Sort order for queries"""
enum SortOrder {
  asc
  desc
}

type User {
  categories: [Category]
  collections: [Collection]
  company: Company
  companyId: Int
  createdAt: String!
  customerOrders: [Order]
  customerQuestions: [Question]
  customerReviews: [Review]
  customerSamples: [Sample]
  email: String!
  firstName: String
  id: Int!
  isActive: Boolean!
  lastName: String
  manufactureOrders: [Order]
  manufactureQuestions: [Question]
  manufactureSamples: [Sample]
  name: String
  orderProductionUpdates: [OrderProduction]
  phone: String
  role: Role!
  sampleProductionUpdates: [SampleProduction]
  sentMessages: [Message]
  updatedAt: String!
  username: String
}

input UserCreateInput {
  companyId: Int
  email: String!
  firstName: String
  isActive: Boolean
  lastName: String
  name: String
  password: String!
  phone: String
  role: Role
  username: String
}

input UserFilterInput {
  companyId: Int
  email: String
  isActive: Boolean
  name: String
  role: Role
  searchString: String
  username: String
}

input UserPaginationInput {
  orderBy: UserSortInput
  skip: Int
  take: Int
  where: UserFilterInput
}

input UserSortInput {
  createdAt: SortOrder
  email: SortOrder
  name: SortOrder
  role: SortOrder
  updatedAt: SortOrder
}

type UserStats {
  adminCount: Int!
  customerCount: Int!
  manufactureCount: Int!
  totalUsers: Int!
}

input UserUpdateInput {
  companyId: Int
  email: String
  firstName: String
  isActive: Boolean
  lastName: String
  name: String
  phone: String
  username: String
}