// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN // Platform admin
  COMPANY_OWNER // Firma sahibi (hem üretici hem müşteri)
  COMPANY_EMPLOYEE // Firma çalışanı (hem üretici hem müşteri)
  INDIVIDUAL_CUSTOMER // Bireysel müşteri (firma olmadan)

  // Backward compatibility (deprecated)
  MANUFACTURE
  CUSTOMER
}

enum CompanyType {
  MANUFACTURER // Üretici firma (Defacto)
  BUYER // Alıcı firma (LC Waikiki)
  BOTH // Her ikisi de (hem üretir hem alır)
}

// Tekstil Enums
enum Season {
  SS25 // Spring/Summer 2025
  FW25 // Fall/Winter 2025
  SS26 // Spring/Summer 2026
  FW26 // Fall/Winter 2026
  SS27
  FW27
}

enum Gender {
  WOMEN // Kadın
  MEN // Erkek
  GIRLS // Kız Çocuk
  BOYS // Erkek Çocuk
  UNISEX // Unisex
}

enum Fit {
  REGULAR // Regular
  SLIM // Slim
  RELAXED // Relaxed
  OVERSIZED // Oversized
  FITTED // Fitted
  LOOSE // Loose
}

model Company {
  id          Int         @id @default(autoincrement())
  name        String
  email       String      @unique
  phone       String?
  address     String?
  location    String? // Şehir/Bölge: "İstanbul", "İzmir", "Denizli"
  website     String?
  type        CompanyType @default(MANUFACTURER)
  description String?     @db.Text

  // Owner
  owner   User? @relation("CompanyOwner", fields: [ownerId], references: [id])
  ownerId Int?  @unique

  isActive Boolean @default(true)
  settings Json? // Company-wide settings

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  employees          User[]               @relation("CompanyEmployees")
  categories         Category[]
  collections        Collection[]
  samples            Sample[]
  orders             Order[]
  productionTracking ProductionTracking[]
  messages           Message[]

  // Library Management
  colors     Color[]
  fabrics        Fabric[]
  sizeGroups     SizeGroup[]
  seasons        SeasonItem[]
  fits           FitItem[]
  certifications Certification[]

  @@map("companies")
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  senderId  Int
  receiverId Int?    // Alıcı kullanıcı ID
  isRead    Boolean  @default(false)
  type      String   @default("general") // "order", "sample", "general"

  // Ürün bazlı mesajlaşma
  orderId   Int?
  sampleId  Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sender    User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver  User?    @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  order     Order?   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  sample    Sample?  @relation(fields: [sampleId], references: [id], onDelete: Cascade)
  company   Company? @relation(fields: [companyId], references: [id])
  companyId Int?

  @@index([orderId])
  @@index([sampleId])
  @@index([senderId])
  @@index([receiverId])
  @@map("messages")
}

model ProductionTracking {
  id       Int  @id @default(autoincrement())
  orderId  Int?
  sampleId Int?

  currentStage  ProductionStage  @default(PLANNING)
  overallStatus ProductionStatus @default(IN_PROGRESS)
  progress      Int              @default(0) // 0-100%

  estimatedStartDate DateTime?
  estimatedEndDate   DateTime?
  actualStartDate    DateTime?
  actualEndDate      DateTime?

  notes String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  order     Order?   @relation(fields: [orderId], references: [id])
  sample    Sample?  @relation(fields: [sampleId], references: [id])
  company   Company? @relation(fields: [companyId], references: [id])
  companyId Int?

  // New relations
  sewingWorkshop      Workshop? @relation("SewingWorkshop", fields: [sewingWorkshopId], references: [id])
  sewingWorkshopId    Int?
  packagingWorkshop   Workshop? @relation("PackagingWorkshop", fields: [packagingWorkshopId], references: [id])
  packagingWorkshopId Int?

  stageUpdates        ProductionStageUpdate[]
  qualityControls     QualityControl[]
  productionRevisions ProductionRevision[]
  revisions           Revision[] // Legacy
  notifications       Notification[] @relation("ProductionNotifications")

  @@map("production_tracking")
}

model Revision {
  id                   Int       @id @default(autoincrement())
  orderId              Int?
  sampleId             Int?
  productionTrackingId Int?
  revisionNumber       Int       @default(1)
  requestMessage       String?
  responseMessage      String?
  status               String    @default("pending")
  requestedAt          DateTime  @default(now())
  completedAt          DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // Relations
  order              Order?              @relation(fields: [orderId], references: [id])
  sample             Sample?             @relation(fields: [sampleId], references: [id])
  productionTracking ProductionTracking? @relation(fields: [productionTrackingId], references: [id])

  @@map("revisions")
}

model User {
  id        Int     @id @default(autoincrement())
  email     String  @unique
  password  String
  name      String?
  username  String? @unique
  firstName String?
  lastName  String?
  phone     String?

  // Company & Role
  company   Company? @relation("CompanyEmployees", fields: [companyId], references: [id])
  companyId Int?
  role      Role     @default(INDIVIDUAL_CUSTOMER)

  // Company Ownership & Permissions
  isCompanyOwner Boolean @default(false)
  department     String? // "Satın Alma", "Üretim", "Kalite"
  jobTitle       String? // "Müdür", "Uzman", "Koordinatör"
  permissions    Json? // Detaylı permission objesi

  // Status
  isActive          Boolean @default(true)
  isPendingApproval Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Owned Companies
  ownedCompanies Company[] @relation("CompanyOwner")

  // Messages relation
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  categories       Category[]
  collections      Collection[]

  // Customer relations
  customerSamples   Sample[]   @relation("CustomerSamples")
  customerOrders    Order[]    @relation("CustomerOrders")
  customerQuestions Question[] @relation("CustomerQuestions")
  customerReviews   Review[]   @relation("CustomerReviews")

  // Manufacture relations
  manufactureSamples      Sample[]           @relation("ManufactureSamples")
  manufactureOrders       Order[]            @relation("ManufactureOrders")
  manufactureQuestions    Question[]         @relation("ManufactureQuestions")
  sampleProductionUpdates SampleProduction[]
  orderProductionUpdates  OrderProduction[]  @relation("OrderProductionUpdates")

  // Production system relations
  qualityInspections QualityControl[]     @relation("QualityInspector")
  ownedWorkshops     Workshop[]           @relation("WorkshopOwner")
  revisionRequests   ProductionRevision[] @relation("RevisionRequester")

  // Favorites/Likes
  favoriteCollections UserFavoriteCollection[]

  // Notifications
  notifications Notification[] @relation("UserNotifications")

  @@map("users")
}

model Category {
  id               Int          @id @default(autoincrement())
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  name             String // Artık unique değil - farklı parent'lar altında aynı isim olabilir
  description      String?
  author           User?        @relation(fields: [authorId], references: [id])
  authorId         Int?
  collections      Collection[]
  subCategories    Category[]   @relation("CategoryToSubCategories")
  parentCategory   Category?    @relation("CategoryToSubCategories", fields: [parentCategoryId], references: [id])
  parentCategoryId Int?

  // Company relation
  company   Company? @relation(fields: [companyId], references: [id])
  companyId Int?

  // Aynı şirket, aynı parent altında aynı isim olamaz
  @@unique([companyId, parentCategoryId, name])
  @@map("categories")
}

model Collection {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String?

  // ADIM 1: Temel Bilgiler
  modelCode String  @unique // THS-2024-00
  season    Season? // SS25, FW25, SS26, FW26
  // klasman -> category ile handle edilecek (Gömlek, Pantolon, Triko)
  gender    Gender? // Kadın, Erkek, Kız Çocuk, Erkek Çocuk
  fit       String? // Library'den seçilen fit adı: "Slim Fit", "Regular Fit", "Relaxed Fit"
  trend     String? // Trend adı: "Minimalist", "Vintage", "Sport Chic", "Y2K"

  // ADIM 2: Varyantlar ve Ölçüler
  colors           String? // JSON array: ["beyaz", "siyah", "yeşil"]
  sizeGroups       String? // JSON array of group IDs: [1, 2, 3] - Birden fazla beden grubu (pantolon + gömlek)
  sizeRange        String? // Manuel override: "S-XL" veya "6-16" (legacy)
  measurementChart String? // File path: /uploads/measurements/xxx.pdf

  // ADIM 3: Teknik Detaylar
  fabricComposition String? // "%100 Cotton" veya "80% Cotton 20% Polyester"
  accessories       String? @db.Text // JSON: {"buttons": "metal", "zipper": "YKK", "labels": "woven"}
  images            String? @db.Text // JSON array: ["/uploads/products/img1.jpg", ...] or ["https://..."]
  techPack          String? // File path: /uploads/techpacks/xxx.pdf

  // ADIM 4: Ticari Bilgiler
  moq            Int? // Minimum Order Quantity
  targetPrice    Float? // Hedef fiyat (USD)
  targetLeadTime Int? // Hedef termin (gün)
  notes          String? @db.Text // Açıklama/Notlar

  // Sertifikalar (GOTS, OEKO-TEX, BSCI vb.)
  certifications Certification[] @relation("CollectionCertifications")

  // Beğeni/Favoriler
  likesCount      Int                        @default(0) // Toplam beğeni sayısı
  favoritedBy     UserFavoriteCollection[] // Beğenen kullanıcılar

  // Legacy fields (backward compatibility)
  price      Float   @default(0.00) // Şimdilik targetPrice ile aynı
  sku        String? @unique
  stock      Int     @default(0)
  isActive   Boolean @default(true)
  isFeatured Boolean @default(false)
  slug       String? @unique

  // Production Schedule - Her aşama için standart gün sayısı
  productionSchedule Json? // { "PLANNING": 5, "FABRIC": 3, "CUTTING": 2, "SEWING": 10, "QUALITY": 2, "PACKAGING": 2, "SHIPPING": 1 }

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?
  author     User?     @relation(fields: [authorId], references: [id]) // Üretici
  authorId   Int?

  // Relations
  samples        Sample[]   @relation("SampleCollection")
  revisedSamples Sample[]   @relation("OriginalCollection") // Bu ürün için yapılan revize numuneleri
  orders         Order[]
  questions      Question[]
  reviews        Review[]

  // Company relation
  company   Company? @relation(fields: [companyId], references: [id])
  companyId Int?

  @@map("collections")
}

// User Favorite Collections (Junction Table for Likes)
model UserFavoriteCollection {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId Int

  @@unique([userId, collectionId])
  @@index([userId])
  @@index([collectionId])
  @@map("user_favorite_collections")
}

// Numune talep ve üretim sistemi
model Sample {
  id                   Int          @id @default(autoincrement())
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  sampleNumber         String       @unique // Numune takip numarası
  sampleType           SampleType   @default(STANDARD) // Numune tipi
  status               SampleStatus @default(REQUESTED)
  customerNote         String?      @db.Text // Müşteri talep notu
  manufacturerResponse String?      @db.Text // Üretici yanıtı/değerlendirme

  // Revize/Özelleştirme bilgileri (CUSTOM ve REVISION tipleri için)
  customDesignImages   String? @db.Text // Müşteri tasarım görselleri (JSON)
  revisionRequests     String? // Revize istekleri (JSON: [{field, oldValue, newValue, note}])
  originalCollectionId Int? // Revize edilecek orijinal ürün ID'si

  // AI Generated Sample fields
  name         String? // Sample name
  description  String? @db.Text // Sample description (long text)
  images       String? @db.Text // JSON array of image URLs
  aiGenerated  Boolean? @default(false) // Is this an AI-generated sample
  aiPrompt     String? @db.Text // The prompt used for AI generation
  aiSketchUrl  String? // The sketch/reference image URL used

  // Üretim süreci bilgileri
  productionDays          Int? // Üretici: "X günde üretebilirim"
  estimatedProductionDate DateTime? // Hesaplanan üretim tarihi
  actualProductionDate    DateTime? // Gerçek üretim tamamlanma tarihi
  shippingDate            DateTime? // Kargoya veriliş tarihi
  deliveryAddress         String? // Teslimat adresi
  cargoTrackingNumber     String? // Kargo takip numarası (opsiyonel)

  collection         Collection?          @relation("SampleCollection", fields: [collectionId], references: [id])
  collectionId       Int?
  originalCollection Collection?          @relation("OriginalCollection", fields: [originalCollectionId], references: [id])
  customer           User                 @relation("CustomerSamples", fields: [customerId], references: [id])
  customerId         Int
  manufacture        User                 @relation("ManufactureSamples", fields: [manufactureId], references: [id])
  manufactureId      Int
  productionHistory  SampleProduction[] // Üretim geçmişi takibi
  productionTracking ProductionTracking[]
  revisions          Revision[]
  messages           Message[] // Numune bazlı mesajlaşma

  // Company relation
  company   Company? @relation(fields: [companyId], references: [id])
  companyId Int?

  // AI Analysis relation
  aiAnalysis AIAnalysis?

  // Notifications
  notifications Notification[] @relation("SampleNotifications")
}

// AI Analiz Sonuçları (Numune ile ilişkili)
model AIAnalysis {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Temel Analiz Sonuçları (Form'a yazılan)
  detectedProduct       String? // Tespit edilen ürün türü
  detectedColor         String? // Tespit edilen renk
  detectedFabric        String? // Tespit edilen kumaş
  detectedPattern       String? // Tespit edilen kalıp
  detectedGender        String? // Tespit edilen cinsiyet
  detectedClassification String? // Tespit edilen klasman
  detectedAccessories   String? // Tespit edilen aksesuarlar
  technicalDescription  String? @db.Text // Teknik açıklama

  // Kalite Analizi
  qualityAnalysis String? @db.Text // Kalite analiz raporu
  qualityScore    Float? // Genel kalite skoru (1-10)

  // Maliyet Analizi
  costAnalysis         String? @db.Text // Maliyet analiz raporu
  estimatedCostMin     Float? // Tahmini minimum maliyet (₺)
  estimatedCostMax     Float? // Tahmini maksimum maliyet (₺)
  suggestedMinOrder    Int? // Önerilen minimum sipariş adedi

  // Trend Analizi
  trendAnalysis    String? @db.Text // Trend analiz raporu
  trendScore       Float? // Trend skoru (1-10)
  targetMarket     String? // Hedef pazar segmenti
  salesPotential   String? // Satış potansiyeli (LOW/MEDIUM/HIGH)

  // Tasarım Önerileri
  designSuggestions String? @db.Text // Tasarım önerileri (JSON veya text)
  designStyle       String? // Seçilen stil yönü
  designFocus       String? // Odaklanılan alanlar (JSON array)

  // İlişki
  sample   Sample @relation(fields: [sampleId], references: [id], onDelete: Cascade)
  sampleId Int    @unique

  @@map("ai_analyses")
}

// Numune üretim geçmişi takibi
model SampleProduction {
  id            Int          @id @default(autoincrement())
  createdAt     DateTime     @default(now())
  status        SampleStatus
  note          String? // Üretici açıklaması
  estimatedDays Int? // Bu aşama için tahmini gün
  actualDate    DateTime? // Bu aşamanın gerçek tamamlanma tarihi
  sample        Sample       @relation(fields: [sampleId], references: [id])
  sampleId      Int
  updatedBy     User         @relation(fields: [updatedById], references: [id])
  updatedById   Int
}

// Sipariş ve üretim sistemi
model Order {
  id                   Int         @id @default(autoincrement())
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  orderNumber          String      @unique
  quantity             Int
  unitPrice            Float // Birim fiyat
  totalPrice           Float // Toplam fiyat
  status               OrderStatus @default(PENDING)
  customerNote         String? // Müşteri sipariş notu
  manufacturerResponse String? // Üretici yanıtı/değerlendirme

  // Üretim süreci bilgileri
  productionDays          Int? // Üretici: "X günde üretebilirim"
  estimatedProductionDate DateTime? // Hesaplanan üretim tarihi
  actualProductionStart   DateTime? // Gerçek üretime başlama tarihi
  actualProductionEnd     DateTime? // Gerçek üretim bitiş tarihi
  shippingDate            DateTime? // Kargoya veriliş tarihi
  deliveryAddress         String? // Teslimat adresi
  cargoTrackingNumber     String? // Kargo takip numarası

  collection         Collection           @relation(fields: [collectionId], references: [id])
  collectionId       Int
  customer           User                 @relation("CustomerOrders", fields: [customerId], references: [id])
  customerId         Int
  manufacture        User                 @relation("ManufactureOrders", fields: [manufactureId], references: [id])
  manufactureId      Int
  productionHistory  OrderProduction[] // Üretim süreç takibi
  productionTracking ProductionTracking[]
  revisions          Revision[]
  messages           Message[] // Sipariş bazlı mesajlaşma

  // Company relation
  company   Company? @relation(fields: [companyId], references: [id])
  companyId Int?

  // Notifications
  notifications Notification[] @relation("OrderNotifications")
}

// Sipariş üretim geçmişi takibi
model OrderProduction {
  id            Int         @id @default(autoincrement())
  createdAt     DateTime    @default(now())
  status        OrderStatus
  note          String? // Üretici açıklaması
  estimatedDays Int? // Bu aşama için tahmini gün
  actualDate    DateTime? // Bu aşamanın gerçek tamamlanma tarihi
  order         Order       @relation(fields: [orderId], references: [id])
  orderId       Int
  updatedBy     User        @relation("OrderProductionUpdates", fields: [updatedById], references: [id])
  updatedById   Int
}

// Soru-cevap sistemi
model Question {
  id            Int        @id @default(autoincrement())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  question      String
  answer        String?
  isAnswered    Boolean    @default(false)
  isPublic      Boolean    @default(true) // Herkese görünür mü?
  collection    Collection @relation(fields: [collectionId], references: [id])
  collectionId  Int
  customer      User       @relation("CustomerQuestions", fields: [customerId], references: [id])
  customerId    Int
  manufacture   User       @relation("ManufactureQuestions", fields: [manufactureId], references: [id])
  manufactureId Int
}

// Değerlendirme sistemi
model Review {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  rating       Int // 1-5 yıldız
  comment      String?
  isApproved   Boolean    @default(false) // Üretici onayı
  collection   Collection @relation(fields: [collectionId], references: [id])
  collectionId Int
  customer     User       @relation("CustomerReviews", fields: [customerId], references: [id])
  customerId   Int
}

// Enum'lar
enum SampleType {
  STANDARD // Mevcut ürün için standart numune
  REVISION // Mevcut ürün için revize istekli numune
  CUSTOM // Müşteri kendi tasarımı için numune
  DEVELOPMENT // Mevcut veriler için backward compatibility
}

enum SampleStatus {
  AI_DESIGN // AI ile oluşturulmuş tasarım (henüz üreticiye gönderilmedi)
  PENDING_APPROVAL // Üretici onayı bekleniyor
  REQUESTED // Müşteri tarafından talep edildi ve üretici onayladı
  RECEIVED // Üretici talebi aldı
  IN_DESIGN // Tasarım aşamasında
  PATTERN_READY // Kalıp hazır
  IN_PRODUCTION // Üretim aşamasında
  ON_HOLD // Durduruldu (geçici olarak askıya alındı)
  QUALITY_CHECK // Kalite kontrolde
  COMPLETED // Tamamlandı
  REJECTED // Reddedildi
  CANCELLED // İptal edildi
  SHIPPED // Kargoya verildi
}

enum OrderStatus {
  PENDING // Sipariş beklemede
  REVIEWED // Üretici tarafından inceleniyor
  QUOTE_SENT // Üretici süre ve fiyat teklifi gönderdi
  CONFIRMED // Müşteri siparişi onayladı
  REJECTED // Sipariş reddedildi
  IN_PRODUCTION // Üretim aşamasında
  PRODUCTION_COMPLETE // Üretim tamamlandı
  QUALITY_CHECK // Kalite kontrolü yapılıyor
  SHIPPED // Kargoya verildi
  DELIVERED // Müşteriye teslim edildi
  CANCELLED // İptal edildi
}

model File {
  id          String   @id @default(cuid())
  filename    String
  path        String
  size        Int
  mimetype    String
  encoding    String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("files")
}

// Production Stage Updates
model ProductionStageUpdate {
  id           Int                @id @default(autoincrement())
  production   ProductionTracking @relation(fields: [productionId], references: [id], onDelete: Cascade)
  productionId Int

  stage           ProductionStage
  status          StageStatus     @default(NOT_STARTED)
  actualStartDate DateTime?
  actualEndDate   DateTime?
  estimatedDays   Int?
  notes           String?         @db.Text
  photos          String?         @db.Text // JSON array
  isRevision      Boolean         @default(false)
  delayReason     String?         @db.Text // Gecikme sebebi
  extraDays       Int             @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("production_stage_updates")
}

// Quality Control
model QualityControl {
  id           Int                @id @default(autoincrement())
  production   ProductionTracking @relation(fields: [productionId], references: [id], onDelete: Cascade)
  productionId Int
  inspector    User               @relation("QualityInspector", fields: [inspectorId], references: [id])
  inspectorId  Int

  checkDate DateTime      @default(now())
  result    QualityResult @default(PENDING)
  score     Int? // 1-100 puan
  notes     String?       @db.Text
  photos    String?       @db.Text // JSON: defect photos

  // Hata kategorileri
  fabricDefects    Boolean @default(false)
  sewingDefects    Boolean @default(false)
  measureDefects   Boolean @default(false)
  finishingDefects Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("quality_controls")
}

// Workshop
model Workshop {
  id       Int          @id @default(autoincrement())
  name     String       @unique
  type     WorkshopType
  capacity Int? // Günlük kapasite
  location String?
  isActive Boolean      @default(true)

  owner   User @relation("WorkshopOwner", fields: [ownerId], references: [id])
  ownerId Int

  sewingProductions    ProductionTracking[] @relation("SewingWorkshop")
  packagingProductions ProductionTracking[] @relation("PackagingWorkshop")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("workshops")
}

// ========================================
// LIBRARY MANAGEMENT MODELS
// ========================================

// Renk Kütüphanesi - Üretici standart renk paletini yönetir
model Color {
  id       Int     @id @default(autoincrement())
  name     String // "Beyaz", "Lacivert", "Gri Melanj"
  code     String? // Pantone, HEX, RAL kodu: "PANTONE 18-3838", "#FF5733"
  hexCode  String? // Web için: "#FFFFFF"
  imageUrl String? // Renk örneği görseli
  isActive Boolean @default(true)

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([companyId, name]) // Bir firma içinde renk adı unique
  @@map("colors")
}

// Kumaş Kütüphanesi - Üretici mevcut kumaşlarını yönetir
model Fabric {
  id          Int     @id @default(autoincrement())
  name        String // "Premium Cotton", "Stretch Denim"
  code        String? // İç referans kodu: "FAB-001"
  composition String // "%100 Pamuk", "80% Cotton 20% Polyester"
  weight      Int? // Gram/m2: 180, 220, etc.
  width       Int? // cm: 150, 180
  supplier    String? // Tedarikçi firma adı
  price       Float? // Metre fiyatı
  minOrder    Int? // Minimum sipariş miktarı (metre)
  leadTime    Int? // Tedarik süresi (gün)
  imageUrl    String? // Kumaş dokusu görseli
  description String? @db.Text
  isActive    Boolean @default(true)

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([companyId, code]) // Firma içinde kod unique (opsiyonel)
  @@map("fabrics")
}

// Beden Grubu - Standart beden setleri
model SizeGroup {
  id          Int     @id @default(autoincrement())
  name        String // "Erkek Standart", "Kadın Plus Size", "Çocuk 0-2 Yaş"
  category    String? // "MEN", "WOMEN", "KIDS"
  sizes       String // JSON array: ["XS", "S", "M", "L", "XL"] veya ["2", "4", "6", "8"]
  description String?
  isActive    Boolean @default(true)

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([companyId, name])
  @@map("size_groups")
}

// Season Management (Library Item)
model SeasonItem {
  id          Int     @id @default(autoincrement())
  name        String // "SS25", "FW25", "SS26"
  fullName    String // "Spring/Summer 2025"
  year        Int // 2025, 2026
  type        String // "SS" (Spring/Summer) veya "FW" (Fall/Winter)
  startDate   DateTime? // Sezon başlangıç tarihi
  endDate     DateTime? // Sezon bitiş tarihi
  description String?
  isActive    Boolean @default(true)

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([companyId, name])
  @@map("seasons")
}

// Fit Management (Library Item)
model FitItem {
  id          Int     @id @default(autoincrement())
  name        String // "Slim Fit", "Regular Fit", "Oversized"
  code        String? // "FIT-SLIM", "FIT-REG"
  category    String? // "UPPER" (üst giyim), "LOWER" (alt giyim), "OUTERWEAR" (dış giyim)
  description String? @db.Text // Detaylı açıklama
  isActive    Boolean @default(true)

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([companyId, name])
  @@map("fits")
}

// Sertifika yönetimi (GOTS, OEKO-TEX, BSCI, GRS, vb.)
model Certification {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name     String                 // "GOTS", "OEKO-TEX Standard 100"
  code     String? // "GOTS-2023", "OEKO-100"
  category CertificationCategory // FIBER, CHEMICAL, SOCIAL, ENVIRONMENTAL, TRACEABILITY

  // Detaylar
  issuer            String? // "GOTS International" gibi veren kuruluş
  validFrom         DateTime? // Geçerlilik başlangıcı
  validUntil        DateTime? // Son kullanma tarihi
  certificateNumber String? // Sertifika numarası
  certificateFile   String? // PDF dosya yolu
  description       String?   @db.Text
  isActive          Boolean   @default(true)

  // İlişkiler
  company     Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId   Int
  collections Collection[] @relation("CollectionCertifications")

  @@index([companyId])
  @@index([category])
  @@index([isActive])
  @@map("certifications")
}

enum CertificationCategory {
  FIBER // Lif/Hammadde: GOTS, OCS, RCS, GRS, BCI
  CHEMICAL // Üretim/Kimyasal: OEKO-TEX, bluesign, ZDHC
  SOCIAL // Sosyal/Etik: BSCI, SA8000, WRAP
  ENVIRONMENTAL // Çevresel: LCA, ISO 14067, Carbon Footprint
  TRACEABILITY // İzlenebilirlik: DPP, Blockchain, QR
}

// ========================================

// Production Revisions
model ProductionRevision {
  id           Int                @id @default(autoincrement())
  production   ProductionTracking @relation(fields: [productionId], references: [id], onDelete: Cascade)
  productionId Int

  reason      String
  description String? @db.Text
  extraDays   Int     @default(0)
  extraCost   Float   @default(0)
  isApproved  Boolean @default(false)

  requestedBy   User @relation("RevisionRequester", fields: [requestedById], references: [id])
  requestedById Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("production_revisions")
}

// Production Enums
enum ProductionStage {
  PLANNING
  FABRIC
  CUTTING
  SEWING
  QUALITY
  PACKAGING
  SHIPPING
}

enum StageStatus {
  NOT_STARTED
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  REQUIRES_REVISION
}

enum ProductionStatus {
  IN_PROGRESS
  WAITING
  BLOCKED
  COMPLETED
  CANCELLED
}

enum QualityResult {
  PENDING
  PASSED
  FAILED
  CONDITIONAL_PASS
}

enum WorkshopType {
  SEWING
  PACKAGING
  QUALITY_CONTROL
  GENERAL
}

// ========================================
// NOTIFICATION SYSTEM
// ========================================

enum NotificationType {
  ORDER // Sipariş bildirimleri
  SAMPLE // Numune bildirimleri
  MESSAGE // Mesaj bildirimleri
  PRODUCTION // Üretim bildirimleri
  QUALITY // Kalite kontrol bildirimleri
  SYSTEM // Sistem bildirimleri
}

model Notification {
  id      Int              @id @default(autoincrement())
  type    NotificationType
  title   String
  message String           @db.Text
  link    String?          // İlgili sayfanın URL'i
  isRead  Boolean          @default(false)

  // İlişkiler
  userId Int
  user   User @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)

  // İlgili kayıtlar (opsiyonel)
  orderId            Int?
  order              Order?              @relation("OrderNotifications", fields: [orderId], references: [id], onDelete: Cascade)
  sampleId           Int?
  sample             Sample?             @relation("SampleNotifications", fields: [sampleId], references: [id], onDelete: Cascade)
  productionTrackingId Int?
  productionTracking ProductionTracking? @relation("ProductionNotifications", fields: [productionTrackingId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, isRead])
  @@index([userId, createdAt])
  @@map("notifications")
}

// ========================================
