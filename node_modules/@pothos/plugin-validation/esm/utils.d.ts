import { type InputFieldMapping, type InputFieldsMapping, type MaybePromise, type PartialResolveInfo, type SchemaTypes } from '@pothos/core';
import type { StandardSchemaV1 } from './standard-schema.js';
export declare function createArgsValidator<Types extends SchemaTypes>(argMappings: InputFieldsMapping<Types, {
    typeSchemas: StandardSchemaV1[];
    fieldSchemas: StandardSchemaV1[];
}> | null, argsSchemas: StandardSchemaV1[] | StandardSchemaV1 | null, options: {
    validationError: (failure: StandardSchemaV1.FailureResult, args: Record<string, unknown>, context: Types["Context"], info: PartialResolveInfo) => Error;
}): (args: Record<string, unknown>, context: Types["Context"], info: PartialResolveInfo) => MaybePromise<Record<string, unknown>>;
export declare function createInputValueMapper<Types extends SchemaTypes, T, Args extends unknown[] = [
]>(argMap: InputFieldsMapping<Types, T>, mapType: (val: unknown, mapping: InputFieldMapping<Types, T>, addIssues: (issues: readonly StandardSchemaV1.Issue[]) => void, ...args: Args) => unknown, mapField: (val: unknown, mapping: InputFieldMapping<Types, T>, addIssues: (issues: readonly StandardSchemaV1.Issue[]) => void, ...args: Args) => unknown): (obj: object, map?: InputFieldsMapping<Types, T>, path?: (string | number)[], ...args: Args) => MaybePromise<StandardSchemaV1.Result<Record<string, unknown>>>;
export declare function reduceMaybeAsync<T, R>(items: T[], initialValue: R, fn: (value: R, item: T, i: number) => MaybePromise<R | null>): MaybePromise<R | null>;
//# sourceMappingURL=utils.d.ts.map
