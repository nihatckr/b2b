"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get connectionRefs () {
        return connectionRefs;
    },
    get globalConnectionFieldsMap () {
        return globalConnectionFieldsMap;
    }
});
const _core = /*#__PURE__*/ _interop_require_wildcard(require("@pothos/core"));
const _graphql = require("graphql");
const _noderef = require("./node-ref");
const _utils = require("./utils");
const _addnodeprops = require("./utils/add-node-props");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const schemaBuilderProto = _core.default.prototype;
const pageInfoRefMap = new WeakMap();
const nodeInterfaceRefMap = new WeakMap();
const connectionRefs = new WeakMap();
const globalConnectionFieldsMap = new WeakMap();
schemaBuilderProto.pageInfoRef = function pageInfoRef() {
    var _this_options_relay, _this_options_relay1;
    if (pageInfoRefMap.has(this)) {
        return pageInfoRefMap.get(this);
    }
    const ref = this.objectRef('PageInfo');
    pageInfoRefMap.set(this, ref);
    var _this_options_relay_cursorType, _this_options_relay2;
    const { pageInfoCursorType = (_this_options_relay_cursorType = (_this_options_relay = this.options.relay) === null || _this_options_relay === void 0 ? void 0 : _this_options_relay.cursorType) !== null && _this_options_relay_cursorType !== void 0 ? _this_options_relay_cursorType : 'String', hasNextPageFieldOptions = {}, hasPreviousPageFieldOptions = {}, startCursorFieldOptions = {}, endCursorFieldOptions = {} } = (_this_options_relay2 = this.options.relay) !== null && _this_options_relay2 !== void 0 ? _this_options_relay2 : {};
    ref.implement({
        ...(_this_options_relay1 = this.options.relay) === null || _this_options_relay1 === void 0 ? void 0 : _this_options_relay1.pageInfoTypeOptions,
        fields: (t)=>({
                hasNextPage: t.exposeBoolean('hasNextPage', {
                    nullable: false,
                    ...hasNextPageFieldOptions
                }),
                hasPreviousPage: t.exposeBoolean('hasPreviousPage', {
                    nullable: false,
                    ...hasPreviousPageFieldOptions
                }),
                startCursor: t.expose('startCursor', {
                    nullable: true,
                    ...startCursorFieldOptions,
                    type: pageInfoCursorType
                }),
                endCursor: t.expose('endCursor', {
                    nullable: true,
                    ...endCursorFieldOptions,
                    type: pageInfoCursorType
                })
            })
    });
    return ref;
};
schemaBuilderProto.nodeInterfaceRef = function nodeInterfaceRef() {
    var _this_options_relay, _this_options_relay1, _this_options_relay2;
    if (nodeInterfaceRefMap.has(this)) {
        return nodeInterfaceRefMap.get(this);
    }
    const ref = this.interfaceRef('Node');
    nodeInterfaceRefMap.set(this, ref);
    ref.implement({
        resolveType: (value, context, info, graphQLType)=>{
            if (!value) {
                return (0, _graphql.defaultTypeResolver)(value, context, info, graphQLType);
            }
            const typeBrand = (0, _core.getTypeBrand)(value);
            if (typeBrand) {
                const type = this.configStore.getTypeConfig(typeBrand);
                return type.name;
            }
            try {
                if (typeof value === 'object') {
                    const typename = value.__typename;
                    if (typename) {
                        return typename;
                    }
                    const nodeRef = value.__type;
                    if (nodeRef) {
                        const config = this.configStore.getTypeConfig(nodeRef);
                        if (config) {
                            return config.name;
                        }
                    }
                }
            } catch  {
            // ignore
            }
            return (0, _graphql.defaultTypeResolver)(value, context, info, graphQLType);
        },
        ...(_this_options_relay = this.options.relay) === null || _this_options_relay === void 0 ? void 0 : _this_options_relay.nodeTypeOptions,
        fields: (t)=>{
            var _this_options_relay, _this_options_relay1;
            var _this_options_relay_idFieldName;
            return {
                [(_this_options_relay_idFieldName = (_this_options_relay = this.options.relay) === null || _this_options_relay === void 0 ? void 0 : _this_options_relay.idFieldName) !== null && _this_options_relay_idFieldName !== void 0 ? _this_options_relay_idFieldName : 'id']: t.globalID({
                    ...(_this_options_relay1 = this.options.relay) === null || _this_options_relay1 === void 0 ? void 0 : _this_options_relay1.idFieldOptions,
                    nullable: false,
                    resolve: (_parent)=>{
                        throw new _core.PothosValidationError('id field not implemented');
                    }
                })
            };
        }
    });
    const nodeQueryOptions = (_this_options_relay1 = this.options.relay) === null || _this_options_relay1 === void 0 ? void 0 : _this_options_relay1.nodeQueryOptions;
    if (nodeQueryOptions !== false) {
        const resolveNodeFn = nodeQueryOptions === null || nodeQueryOptions === void 0 ? void 0 : nodeQueryOptions.resolve;
        this.queryField('node', (t)=>{
            var _this_options_relay, _nodeQueryOptions_args, _nodeQueryOptions_args_id, _nodeQueryOptions_args1;
            return t.field({
                nullable: true,
                ...(_this_options_relay = this.options.relay) === null || _this_options_relay === void 0 ? void 0 : _this_options_relay.nodeQueryOptions,
                type: ref,
                args: {
                    id: t.arg.globalID({
                        ...nodeQueryOptions === null || nodeQueryOptions === void 0 ? void 0 : (_nodeQueryOptions_args = nodeQueryOptions.args) === null || _nodeQueryOptions_args === void 0 ? void 0 : _nodeQueryOptions_args.id,
                        required: true,
                        extensions: {
                            relayGlobalIDAlwaysParse: true,
                            ...nodeQueryOptions === null || nodeQueryOptions === void 0 ? void 0 : (_nodeQueryOptions_args1 = nodeQueryOptions.args) === null || _nodeQueryOptions_args1 === void 0 ? void 0 : (_nodeQueryOptions_args_id = _nodeQueryOptions_args1.id) === null || _nodeQueryOptions_args_id === void 0 ? void 0 : _nodeQueryOptions_args_id.extensions
                        }
                    })
                },
                resolve: resolveNodeFn ? (root, args, context, info)=>resolveNodeFn(root, args, context, info, (_ids)=>(0, _core.completeValue)((0, _utils.resolveNodes)(this, context, info, [
                            args.id
                        ]), (nodes)=>nodes[0])) : (_root, args, context, info)=>(0, _core.completeValue)((0, _utils.resolveNodes)(this, context, info, [
                        args.id
                    ]), (nodes)=>nodes[0])
            });
        });
    }
    const nodesQueryOptions = (_this_options_relay2 = this.options.relay) === null || _this_options_relay2 === void 0 ? void 0 : _this_options_relay2.nodesQueryOptions;
    if (nodesQueryOptions !== false) {
        const resolveNodesFn = nodesQueryOptions === null || nodesQueryOptions === void 0 ? void 0 : nodesQueryOptions.resolve;
        this.queryField('nodes', (t)=>{
            var _this_options_relay, _nodesQueryOptions_args, _nodesQueryOptions_args_ids, _nodesQueryOptions_args1;
            return t.field({
                nullable: {
                    list: false,
                    items: true
                },
                ...(_this_options_relay = this.options.relay) === null || _this_options_relay === void 0 ? void 0 : _this_options_relay.nodesQueryOptions,
                type: [
                    ref
                ],
                args: {
                    ids: t.arg.globalIDList({
                        ...nodesQueryOptions === null || nodesQueryOptions === void 0 ? void 0 : (_nodesQueryOptions_args = nodesQueryOptions.args) === null || _nodesQueryOptions_args === void 0 ? void 0 : _nodesQueryOptions_args.ids,
                        required: true,
                        extensions: {
                            relayGlobalIDAlwaysParse: true,
                            ...nodesQueryOptions === null || nodesQueryOptions === void 0 ? void 0 : (_nodesQueryOptions_args1 = nodesQueryOptions.args) === null || _nodesQueryOptions_args1 === void 0 ? void 0 : (_nodesQueryOptions_args_ids = _nodesQueryOptions_args1.ids) === null || _nodesQueryOptions_args_ids === void 0 ? void 0 : _nodesQueryOptions_args_ids.extensions
                        }
                    })
                },
                resolve: resolveNodesFn ? (root, args, context, info)=>resolveNodesFn(root, args, context, info, (_ids)=>(0, _utils.resolveNodes)(this, context, info, args.ids)) : (_root, args, context, info)=>(0, _utils.resolveNodes)(this, context, info, args.ids)
            });
        });
    }
    return ref;
};
schemaBuilderProto.nodeRef = function nodeRef(param, options) {
    if (typeof param === 'string') {
        return new _noderef.ImplementableNodeRef(this, param, options);
    }
    (0, _addnodeprops.addNodeProperties)(param.name, this, param, undefined, options);
    return param;
};
schemaBuilderProto.node = function node(param, { id, name, loadMany, loadOne, loadWithoutCache, loadManyWithoutCache, brandLoadedObjects, ...options }, fields) {
    (0, _core.verifyRef)(param);
    const nodeName = typeof param === 'string' ? param : param instanceof _core.BaseTypeRef ? param.name : name;
    const ref = new _noderef.NodeRef(this, nodeName, param, {
        id,
        loadMany,
        loadOne,
        loadWithoutCache,
        loadManyWithoutCache,
        brandLoadedObjects
    });
    if (typeof param !== 'string') {
        this.configStore.associateParamWithRef(param, ref);
    }
    this.objectType(ref, {
        name: nodeName,
        ...options
    }, fields);
    return ref;
};
schemaBuilderProto.globalConnectionField = function globalConnectionField(name, field) {
    this.globalConnectionFields((t)=>({
            [name]: field(t)
        }));
};
schemaBuilderProto.globalConnectionFields = function globalConnectionFields(fields) {
    const onRef = (ref)=>{
        this.configStore.onPrepare(()=>{
            const config = this.configStore.getTypeConfig(ref);
            this.objectFields(ref, (t)=>{
                const existingFields = this.configStore.getFields(config.name);
                const refs = {};
                for (const [name, field] of Object.entries(fields(t))){
                    if (!existingFields.has(name)) {
                        refs[name] = field;
                    }
                }
                return refs;
            });
        });
    };
    var _connectionRefs_get;
    for (const ref of (_connectionRefs_get = connectionRefs.get(this)) !== null && _connectionRefs_get !== void 0 ? _connectionRefs_get : []){
        onRef(ref);
    }
    if (!globalConnectionFieldsMap.has(this)) {
        globalConnectionFieldsMap.set(this, []);
    }
    globalConnectionFieldsMap.get(this).push(onRef);
};
const mutationIdCache = (0, _core.createContextCache)(()=>new Map());
schemaBuilderProto.relayMutationField = function relayMutationField(fieldName, inputOptionsOrRef, { resolve, args, ...fieldOptions }, { name: payloadName = `${(0, _utils.capitalize)(fieldName)}Payload`, outputFields, interfaces, ...payloadOptions }) {
    var _this_options_relay, _this_options_relay1, _this_options_relay2;
    const { relay: { clientMutationIdInputOptions = {}, clientMutationIdFieldOptions = {}, mutationInputArgOptions = {} } = {} } = this.options;
    const includeClientMutationId = ((_this_options_relay = this.options.relay) === null || _this_options_relay === void 0 ? void 0 : _this_options_relay.clientMutationId) && ((_this_options_relay1 = this.options.relay) === null || _this_options_relay1 === void 0 ? void 0 : _this_options_relay1.clientMutationId) !== 'omit';
    let inputRef;
    let argName = 'input';
    if (!inputOptionsOrRef || inputOptionsOrRef instanceof _core.InputObjectRef) {
        inputRef = inputOptionsOrRef;
    } else {
        var _this_options_relay3;
        const { name: inputName = `${(0, _utils.capitalize)(fieldName)}Input`, argName: argNameFromOptions = 'input', inputFields, ...inputOptions } = inputOptionsOrRef;
        argName = argNameFromOptions;
        inputRef = this.inputType(inputName, {
            ...(_this_options_relay3 = this.options.relay) === null || _this_options_relay3 === void 0 ? void 0 : _this_options_relay3.defaultMutationInputTypeOptions,
            ...inputOptions,
            fields: (t)=>{
                var _this_options_relay;
                return {
                    ...inputFields(t),
                    ...includeClientMutationId ? {
                        clientMutationId: t.id({
                            ...clientMutationIdInputOptions,
                            required: ((_this_options_relay = this.options.relay) === null || _this_options_relay === void 0 ? void 0 : _this_options_relay.clientMutationId) !== 'optional'
                        })
                    } : {}
                };
            }
        });
    }
    const payloadRef = this.objectRef(payloadName).implement({
        ...(_this_options_relay2 = this.options.relay) === null || _this_options_relay2 === void 0 ? void 0 : _this_options_relay2.defaultPayloadTypeOptions,
        ...payloadOptions,
        interfaces: interfaces,
        fields: (t)=>{
            var _this_options_relay;
            return {
                ...outputFields(t),
                ...includeClientMutationId ? {
                    clientMutationId: t.id({
                        nullable: ((_this_options_relay = this.options.relay) === null || _this_options_relay === void 0 ? void 0 : _this_options_relay.clientMutationId) === 'optional',
                        ...clientMutationIdFieldOptions,
                        resolve: (_parent, _args, context, info)=>mutationIdCache(context).get(String(info.path.prev.key))
                    })
                } : {}
            };
        }
    });
    this.mutationField(fieldName, (t)=>{
        var _this_options_relay;
        return t.field({
            ...(_this_options_relay = this.options.relay) === null || _this_options_relay === void 0 ? void 0 : _this_options_relay.relayMutationFieldOptions,
            ...fieldOptions,
            type: payloadRef,
            args: {
                ...args,
                ...inputRef ? {
                    [argName]: t.arg({
                        ...mutationInputArgOptions,
                        type: inputRef,
                        required: true
                    })
                } : {}
            },
            resolve: (root, fieldArgs, context, info)=>{
                if (inputRef) {
                    mutationIdCache(context).set(String(info.path.key), fieldArgs[argName].clientMutationId);
                }
                return resolve(root, fieldArgs, context, info);
            }
        });
    });
    return {
        inputType: inputRef,
        payloadType: payloadRef
    };
};
schemaBuilderProto.connectionObject = function connectionObject({ type, name: connectionName, edgesNullable: edgesNullableField, nodeNullable, edgesField, ...connectionOptions }, edgeOptionsOrRef) {
    var _this_options_relay_nodeFieldOptions, _this_options_relay, _this_options_relay1;
    (0, _core.verifyRef)(type);
    var _this_options_relay2;
    const { edgesFieldOptions: { nullable: edgesNullable = {
        items: this.defaultFieldNullability,
        list: this.defaultFieldNullability
    }, ...edgesFieldOptions } = {}, pageInfoFieldOptions = {} } = (_this_options_relay2 = this.options.relay) !== null && _this_options_relay2 !== void 0 ? _this_options_relay2 : {};
    const connectionRef = this.objectRef(connectionName);
    const edgeRef = edgeOptionsOrRef instanceof _core.ObjectRef ? edgeOptionsOrRef : this.edgeObject({
        name: `${connectionName.replace(/Connection$/, '')}Edge`,
        ...edgeOptionsOrRef,
        nodeNullable,
        type
    });
    const connectionFields = connectionOptions.fields;
    var _this_options_relay3;
    const { nodesOnConnection } = (_this_options_relay3 = this.options.relay) !== null && _this_options_relay3 !== void 0 ? _this_options_relay3 : {};
    const edgesNullableOption = edgesNullableField !== null && edgesNullableField !== void 0 ? edgesNullableField : edgesNullable;
    var _ref;
    const edgeListNullable = !!((_ref = typeof edgesNullableOption === 'object' ? edgesNullableOption.list : edgesNullableOption) !== null && _ref !== void 0 ? _ref : true);
    var _this_options_relay_nodeFieldOptions_nullable;
    const edgeItemsNullable = typeof edgesNullableOption === 'object' && 'items' in edgesNullableOption ? edgesNullableOption.items : (_this_options_relay_nodeFieldOptions_nullable = (_this_options_relay = this.options.relay) === null || _this_options_relay === void 0 ? void 0 : (_this_options_relay_nodeFieldOptions = _this_options_relay.nodeFieldOptions) === null || _this_options_relay_nodeFieldOptions === void 0 ? void 0 : _this_options_relay_nodeFieldOptions.nullable) !== null && _this_options_relay_nodeFieldOptions_nullable !== void 0 ? _this_options_relay_nodeFieldOptions_nullable : true;
    this.objectType(connectionRef, {
        ...(_this_options_relay1 = this.options.relay) === null || _this_options_relay1 === void 0 ? void 0 : _this_options_relay1.defaultConnectionTypeOptions,
        ...connectionOptions,
        fields: (t)=>{
            var _this_options_relay_nodeFieldOptions, _this_options_relay;
            var _ref;
            return {
                pageInfo: t.field({
                    nullable: false,
                    ...pageInfoFieldOptions,
                    type: this.pageInfoRef(),
                    resolve: (parent)=>parent.pageInfo
                }),
                edges: t.field({
                    nullable: edgesNullableField !== null && edgesNullableField !== void 0 ? edgesNullableField : edgesNullable,
                    ...edgesFieldOptions,
                    ...edgesField,
                    type: [
                        edgeRef
                    ],
                    resolve: (parent)=>parent.edges
                }),
                ...nodesOnConnection ? {
                    nodes: t.field({
                        ...typeof nodesOnConnection === 'object' ? nodesOnConnection : {},
                        type: [
                            type
                        ],
                        nullable: {
                            list: edgeListNullable,
                            items: edgeItemsNullable || ((_ref = nodeNullable !== null && nodeNullable !== void 0 ? nodeNullable : (_this_options_relay = this.options.relay) === null || _this_options_relay === void 0 ? void 0 : (_this_options_relay_nodeFieldOptions = _this_options_relay.nodeFieldOptions) === null || _this_options_relay_nodeFieldOptions === void 0 ? void 0 : _this_options_relay_nodeFieldOptions.nullable) !== null && _ref !== void 0 ? _ref : this.defaultFieldNullability)
                        },
                        resolve: (con)=>(0, _core.completeValue)(con.edges, (edges)=>{
                                if (!edges) {
                                    return edges;
                                }
                                if (Array.isArray(edges)) {
                                    return edges.map((e)=>e === null || e === void 0 ? void 0 : e.node);
                                }
                                if (edges[Symbol.asyncIterator]) {
                                    return async function*() {
                                        for await (const edge of edges){
                                            yield edge.node;
                                        }
                                    }();
                                }
                                return function*() {
                                    for (const edge of edges){
                                        if ((0, _core.isThenable)(edge)) {
                                            yield Promise.resolve(edge).then((e)=>e === null || e === void 0 ? void 0 : e.node);
                                        } else {
                                            yield edge === null || edge === void 0 ? void 0 : edge.node;
                                        }
                                    }
                                }();
                            })
                    })
                } : {},
                ...connectionFields === null || connectionFields === void 0 ? void 0 : connectionFields(t)
            };
        }
    });
    if (!connectionRefs.has(this)) {
        connectionRefs.set(this, []);
    }
    connectionRefs.get(this).push(connectionRef);
    var _globalConnectionFieldsMap_get;
    for (const fieldFn of (_globalConnectionFieldsMap_get = globalConnectionFieldsMap.get(this)) !== null && _globalConnectionFieldsMap_get !== void 0 ? _globalConnectionFieldsMap_get : []){
        fieldFn(connectionRef);
    }
    return connectionRef;
};
schemaBuilderProto.edgeObject = function edgeObject({ type, name: edgeName, nodeNullable: nodeFieldNullable, nodeField, ...edgeOptions }) {
    var _this_options_relay, _this_options_relay1;
    (0, _core.verifyRef)(type);
    var _this_options_relay_cursorType, _this_options_relay2;
    const { edgeCursorType = (_this_options_relay_cursorType = (_this_options_relay = this.options.relay) === null || _this_options_relay === void 0 ? void 0 : _this_options_relay.cursorType) !== null && _this_options_relay_cursorType !== void 0 ? _this_options_relay_cursorType : 'String', cursorFieldOptions = {}, nodeFieldOptions: { nullable: nodeNullable = this.defaultFieldNullability, ...nodeFieldOptions } = {} } = (_this_options_relay2 = this.options.relay) !== null && _this_options_relay2 !== void 0 ? _this_options_relay2 : {};
    const edgeRef = this.objectRef(edgeName);
    const edgeFields = edgeOptions.fields;
    this.objectType(edgeRef, {
        ...(_this_options_relay1 = this.options.relay) === null || _this_options_relay1 === void 0 ? void 0 : _this_options_relay1.defaultEdgeTypeOptions,
        ...edgeOptions,
        fields: (t)=>({
                node: t.field({
                    nullable: nodeFieldNullable !== null && nodeFieldNullable !== void 0 ? nodeFieldNullable : nodeNullable,
                    ...nodeFieldOptions,
                    ...nodeField,
                    type,
                    resolve: (parent)=>parent.node
                }),
                cursor: t.expose('cursor', {
                    nullable: false,
                    type: edgeCursorType,
                    ...cursorFieldOptions
                }),
                ...edgeFields === null || edgeFields === void 0 ? void 0 : edgeFields(t)
            })
    });
    return edgeRef;
};

//# sourceMappingURL=schema-builder.js.map