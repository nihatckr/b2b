"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "addNodeProperties", {
    enumerable: true,
    get: function() {
        return addNodeProperties;
    }
});
const _core = require("@pothos/core");
function addNodeProperties(name, builder, ref, param, options) {
    ref.addInterfaces([
        builder.nodeInterfaceRef()
    ]);
    ref.addFields(()=>{
        var _builder_options_relay, _builder_options_relay1;
        var _builder_options_relay_idFieldName;
        return {
            [(_builder_options_relay_idFieldName = (_builder_options_relay = builder.options.relay) === null || _builder_options_relay === void 0 ? void 0 : _builder_options_relay.idFieldName) !== null && _builder_options_relay_idFieldName !== void 0 ? _builder_options_relay_idFieldName : 'id']: new _core.ObjectFieldBuilder(builder).globalID({
                nullable: false,
                ...(_builder_options_relay1 = builder.options.relay) === null || _builder_options_relay1 === void 0 ? void 0 : _builder_options_relay1.idFieldOptions,
                ...options.id,
                args: {},
                resolve: (parent, args, context, info)=>(0, _core.completeValue)(options.id.resolve(parent, args, context, info), (globalId)=>({
                            type: name,
                            id: globalId
                        }))
            })
        };
    });
    ref.updateConfig(({ extensions, isTypeOf, pothosOptions, ...config })=>{
        return {
            ...config,
            extensions: {
                ...extensions,
                pothosParseGlobalID: options.id.parse
            },
            pothosOptions: {
                ...options,
                ...pothosOptions
            },
            isTypeOf: isTypeOf !== null && isTypeOf !== void 0 ? isTypeOf : typeof param === 'function' ? (maybeNode, _context, _info)=>{
                if (!maybeNode) {
                    return false;
                }
                if (maybeNode instanceof param) {
                    return true;
                }
                const proto = Object.getPrototypeOf(maybeNode);
                try {
                    if (proto === null || proto === void 0 ? void 0 : proto.constructor) {
                        const config = builder.configStore.getTypeConfig(proto.constructor);
                        return config.name === name;
                    }
                } catch  {
                // ignore
                }
                return false;
            } : undefined
        };
    });
}

//# sourceMappingURL=add-node-props.js.map