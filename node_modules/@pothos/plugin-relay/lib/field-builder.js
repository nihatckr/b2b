"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _core = require("@pothos/core");
const _utils = require("./utils");
const _internal = require("./utils/internal");
const fieldBuilderProto = _core.RootFieldBuilder.prototype;
fieldBuilderProto.globalIDList = function globalIDList({ resolve, ...options }) {
    return this.field({
        ...options,
        type: [
            'ID'
        ],
        resolve: async (parent, args, context, info)=>{
            const result = await resolve(parent, args, context, info);
            if (!result) {
                return result;
            }
            (0, _core.assertArray)(result);
            if (Array.isArray(result)) {
                return (await Promise.all(result)).map((item)=>item == null || typeof item === 'string' ? item : (0, _internal.internalEncodeGlobalID)(this.builder, this.builder.configStore.getTypeConfig(item.type).name, String(item.id), context));
            }
            return null;
        }
    });
};
fieldBuilderProto.globalID = function globalID({ resolve, ...options }) {
    return this.field({
        ...options,
        type: 'ID',
        resolve: async (parent, args, context, info)=>{
            const result = await resolve(parent, args, context, info);
            if (!result || typeof result !== 'object') {
                return result;
            }
            const item = result;
            return (0, _internal.internalEncodeGlobalID)(this.builder, this.builder.configStore.getTypeConfig(item.type).name, String(item.id), context);
        }
    });
};
fieldBuilderProto.node = function node({ id, ...options }) {
    return this.field({
        ...options,
        type: this.builder.nodeInterfaceRef(),
        nullable: true,
        resolve: async (parent, args, context, info)=>{
            const rawID = await id(parent, args, context, info);
            if (rawID == null) {
                return null;
            }
            const globalID = typeof rawID === 'string' ? (0, _internal.internalDecodeGlobalID)(this.builder, rawID, context, info, true) : rawID && {
                id: rawID.id,
                typename: this.builder.configStore.getTypeConfig(rawID.type).name
            };
            return (await (0, _utils.resolveNodes)(this.builder, context, info, [
                globalID
            ]))[0];
        }
    });
};
fieldBuilderProto.nodeList = function nodeList({ ids, ...options }) {
    return this.field({
        ...options,
        nullable: {
            list: false,
            items: true
        },
        type: [
            this.builder.nodeInterfaceRef()
        ],
        resolve: async (parent, args, context, info)=>{
            const rawIDList = await ids(parent, args, context, info);
            (0, _core.assertArray)(rawIDList);
            if (!Array.isArray(rawIDList)) {
                return [];
            }
            const rawIds = await Promise.all(rawIDList);
            const globalIds = rawIds.map((id)=>typeof id === 'string' ? (0, _internal.internalDecodeGlobalID)(this.builder, id, context, info, true) : id && {
                    id: id.id,
                    typename: this.builder.configStore.getTypeConfig(id.type).name
                });
            return (0, _utils.resolveNodes)(this.builder, context, info, globalIds);
        }
    });
};
fieldBuilderProto.connection = function connection({ type, edgesNullable, nodeNullable, ...fieldOptions }, connectionOptionsOrRef = {}, edgeOptionsOrRef = {}) {
    var _this_builder_options_relay;
    const connectionRef = connectionOptionsOrRef instanceof _core.ObjectRef ? connectionOptionsOrRef : new _core.ObjectRef('Unnamed connection');
    const fieldRef = this.field({
        ...(_this_builder_options_relay = this.builder.options.relay) === null || _this_builder_options_relay === void 0 ? void 0 : _this_builder_options_relay.defaultConnectionFieldOptions,
        ...fieldOptions,
        type: connectionRef,
        args: {
            ...fieldOptions.args,
            ...this.arg.connectionArgs()
        }
    });
    if (!(connectionOptionsOrRef instanceof _core.ObjectRef)) {
        fieldRef.onFirstUse((fieldConfig)=>{
            var _connectionOptionsOrRef_name;
            const connectionName = (_connectionOptionsOrRef_name = connectionOptionsOrRef.name) !== null && _connectionOptionsOrRef_name !== void 0 ? _connectionOptionsOrRef_name : `${fieldConfig.parentType}${(0, _utils.capitalize)(fieldConfig.name)}${fieldConfig.name.toLowerCase().endsWith('connection') ? '' : 'Connection'}`;
            this.builder.configStore.associateParamWithRef(connectionRef, this.builder.connectionObject({
                type,
                edgesNullable,
                nodeNullable,
                ...connectionOptionsOrRef,
                name: connectionName
            }, edgeOptionsOrRef instanceof _core.ObjectRef ? edgeOptionsOrRef : {
                name: `${connectionName}Edge`,
                ...edgeOptionsOrRef
            }));
        });
    }
    return fieldRef;
};

//# sourceMappingURL=field-builder.js.map