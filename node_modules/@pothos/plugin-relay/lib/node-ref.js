"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get ImplementableNodeRef () {
        return ImplementableNodeRef;
    },
    get NodeRef () {
        return NodeRef;
    },
    get relayIDShapeKey () {
        return relayIDShapeKey;
    }
});
const _core = require("@pothos/core");
const _addnodeprops = require("./utils/add-node-props");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
const relayIDShapeKey = Symbol.for('Pothos.relayIDShapeKey');
let _relayIDShapeKey = relayIDShapeKey;
class NodeRef extends _core.ObjectRef {
    constructor(builder, name, param, options){
        super(name), _define_property(this, _relayIDShapeKey, void 0), _define_property(this, "parseId", void 0);
        this.parseId = options.id.parse;
        (0, _addnodeprops.addNodeProperties)(name, builder, this, param, options);
    }
}
class ImplementableNodeRef extends _core.ImplementableObjectRef {
    constructor(builder, name, options){
        super(builder, name), _define_property(this, "parseId", void 0);
        this.parseId = options.id.parse;
        (0, _addnodeprops.addNodeProperties)(name, builder, this, undefined, options);
    }
}

//# sourceMappingURL=node-ref.js.map