import { ImplementableObjectRef, type ObjectParam, ObjectRef, type SchemaTypes } from '@pothos/core';
import type { NodeRefOptions } from './types';
export declare const relayIDShapeKey: unique symbol;
export declare class NodeRef<Types extends SchemaTypes, T, P = T, IDShape = string> extends ObjectRef<Types, T, P> {
    [relayIDShapeKey]: IDShape;
    parseId: ((id: string, ctx: object) => IDShape) | undefined;
    constructor(builder: PothosSchemaTypes.SchemaBuilder<Types>, name: string, param: ObjectParam<Types>, options: NodeRefOptions<Types, T, P, IDShape>);
}
export declare class ImplementableNodeRef<Types extends SchemaTypes, T, P = T, IDShape = string> extends ImplementableObjectRef<Types, T, P> {
    parseId: ((id: string, ctx: object) => IDShape) | undefined;
    constructor(builder: PothosSchemaTypes.SchemaBuilder<Types>, name: string, options: NodeRefOptions<Types, T, P, IDShape>);
}
//# sourceMappingURL=node-ref.d.ts.map