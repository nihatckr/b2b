function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    }
    else {
        obj[key] = value;
    }
    return obj;
}
import { ImplementableObjectRef, ObjectRef } from '@pothos/core';
import { addNodeProperties } from './utils/add-node-props.js';
export const relayIDShapeKey = Symbol.for("Pothos.relayIDShapeKey");
let _relayIDShapeKey = relayIDShapeKey;
export class NodeRef extends ObjectRef {
    constructor(builder, name, param, options) {
        super(name), _define_property(this, _relayIDShapeKey, void 0), _define_property(this, "parseId", void 0);
        this.parseId = options.id.parse;
        addNodeProperties(name, builder, this, param, options);
    }
}
export class ImplementableNodeRef extends ImplementableObjectRef {
    constructor(builder, name, options) {
        super(builder, name), _define_property(this, "parseId", void 0);
        this.parseId = options.id.parse;
        addNodeProperties(name, builder, this, undefined, options);
    }
}
//# sourceMappingURL=node-ref.js.map
