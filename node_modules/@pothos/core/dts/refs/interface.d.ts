import { type InterfaceParam, type InterfaceTypeOptions, type OutputRef, outputShapeKey, type PothosInterfaceTypeConfig, parentShapeKey, type SchemaTypes } from '../types';
import { TypeRefWithFields } from './base-with-fields';
export declare class InterfaceRef<Types extends SchemaTypes, T, P = T> extends TypeRefWithFields<Types, PothosInterfaceTypeConfig> implements OutputRef<T>, PothosSchemaTypes.InterfaceRef<Types, T, P> {
    kind: "Interface";
    $inferType: T;
    [outputShapeKey]: T;
    [parentShapeKey]: P;
    constructor(name: string, config?: PothosInterfaceTypeConfig);
}
export declare class ImplementableInterfaceRef<Types extends SchemaTypes, Shape, Parent = Shape> extends InterfaceRef<Types, Shape, Parent> {
    builder: PothosSchemaTypes.SchemaBuilder<Types>;
    constructor(builder: PothosSchemaTypes.SchemaBuilder<Types>, name: string);
    implement<const Interfaces extends InterfaceParam<Types>[]>(options: InterfaceTypeOptions<Types, ImplementableInterfaceRef<Types, Shape, Parent>, Parent, Interfaces>): PothosSchemaTypes.InterfaceRef<Types, Shape, Parent>;
}
//# sourceMappingURL=interface.d.ts.map