import type { FieldMap, InterfaceParam, PothosInterfaceTypeConfig, PothosMutationTypeConfig, PothosObjectTypeConfig, PothosQueryTypeConfig, PothosSubscriptionTypeConfig, SchemaTypes } from '../types';
import { BaseTypeRef } from './base';
import type { FieldRef } from './field';
export type ObjectLikeConfig = PothosMutationTypeConfig | PothosObjectTypeConfig | PothosQueryTypeConfig | PothosSubscriptionTypeConfig;
export declare class TypeRefWithFields<Types extends SchemaTypes, Config extends ObjectLikeConfig | PothosInterfaceTypeConfig> extends BaseTypeRef<Types, Config> {
    private fields;
    private fieldCbs;
    private interfaces;
    addFields(fields: () => FieldMap): void;
    addInterfaces(interfaces: InterfaceParam<Types>[] | (() => InterfaceParam<Types>[])): void;
    onField(cb: (name: string, ref: FieldRef<Types>) => void): void;
    prepareForBuild(): void;
}
//# sourceMappingURL=base-with-fields.d.ts.map