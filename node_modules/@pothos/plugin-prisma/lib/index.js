"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get ObjectFieldBuilder () {
        return ObjectFieldBuilder;
    },
    get PothosPrismaPlugin () {
        return PothosPrismaPlugin;
    },
    get PrismaInterfaceRef () {
        return _interfaceref.PrismaInterfaceRef;
    },
    get PrismaNodeRef () {
        return _noderef.PrismaNodeRef;
    },
    get PrismaObjectRef () {
        return _objectref.PrismaObjectRef;
    },
    get default () {
        return _default;
    },
    get formatPrismaCursor () {
        return _cursors.formatPrismaCursor;
    },
    get getModel () {
        return _datamodel.getModel;
    },
    get getRefFromModel () {
        return _datamodel.getRefFromModel;
    },
    get parsePrismaCursor () {
        return _cursors.parsePrismaCursor;
    },
    get prismaClientCache () {
        return _getclient.prismaClientCache;
    },
    get prismaConnectionHelpers () {
        return _connectionhelpers.prismaConnectionHelpers;
    },
    get prismaModelKey () {
        return _objectref.prismaModelKey;
    },
    get queryFromInfo () {
        return _mapquery.queryFromInfo;
    }
});
require("./global-types");
require("./schema-builder");
require("./field-builder");
const _core = /*#__PURE__*/ _interop_require_wildcard(require("@pothos/core"));
const _prismafieldbuilder = require("./prisma-field-builder");
const _cursors = require("./util/cursors");
const _datamodel = require("./util/datamodel");
const _loadermap = require("./util/loader-map");
const _mapquery = require("./util/map-query");
const _connectionhelpers = require("./connection-helpers");
const _interfaceref = require("./interface-ref");
const _noderef = require("./node-ref");
const _objectref = require("./object-ref");
_export_star(require("./types"), exports);
const _getclient = require("./util/get-client");
function _export_star(from, to) {
    Object.keys(from).forEach(function(k) {
        if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) {
            Object.defineProperty(to, k, {
                enumerable: true,
                get: function() {
                    return from[k];
                }
            });
        }
    });
    return from;
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const pluginName = 'prisma';
const _default = pluginName;
const ObjectFieldBuilder = _prismafieldbuilder.PrismaObjectFieldBuilder;
class PothosPrismaPlugin extends _core.BasePlugin {
    onTypeConfig(typeConfig) {
        var _typeConfig_extensions;
        if (typeConfig.kind !== 'Object' && typeConfig.kind !== 'Interface') {
            return typeConfig;
        }
        let model = (_typeConfig_extensions = typeConfig.extensions) === null || _typeConfig_extensions === void 0 ? void 0 : _typeConfig_extensions.pothosPrismaModel;
        for (const iface of typeConfig.interfaces){
            var _this_buildCache_getTypeConfig_extensions;
            const interfaceModel = (_this_buildCache_getTypeConfig_extensions = this.buildCache.getTypeConfig(iface, 'Interface').extensions) === null || _this_buildCache_getTypeConfig_extensions === void 0 ? void 0 : _this_buildCache_getTypeConfig_extensions.pothosPrismaModel;
            if (interfaceModel) {
                if (model && model !== interfaceModel) {
                    throw new _core.PothosSchemaError(`PrismaObjects must be based on the same prisma model as any PrismaInterfaces they extend. ${typeConfig.name} uses ${model} and ${iface.name} uses ${interfaceModel}`);
                }
                model = interfaceModel;
            }
        }
        return {
            ...typeConfig,
            extensions: {
                ...typeConfig.extensions,
                pothosPrismaModel: model
            }
        };
    }
    onOutputFieldConfig(fieldConfig) {
        if (fieldConfig.kind === 'PrismaObject' && fieldConfig.pothosOptions.select) {
            const { select } = fieldConfig.pothosOptions;
            return {
                ...fieldConfig,
                extensions: {
                    ...fieldConfig.extensions,
                    pothosPrismaSelect: typeof select === 'function' ? (args, ctx, nestedQuery)=>({
                            select: select(args, ctx, nestedQuery)
                        }) : select
                }
            };
        }
        return fieldConfig;
    }
    wrapResolve(resolver, fieldConfig) {
        var _fieldConfig_extensions, _fieldConfig_extensions1, _parentConfig_extensions, _fieldConfig_extensions2;
        if (fieldConfig.kind !== 'PrismaObject' || !((_fieldConfig_extensions = fieldConfig.extensions) === null || _fieldConfig_extensions === void 0 ? void 0 : _fieldConfig_extensions.pothosPrismaSelect)) {
            return resolver;
        }
        const parentConfig = this.buildCache.getTypeConfig(fieldConfig.parentType);
        const loadedCheck = (_fieldConfig_extensions1 = fieldConfig.extensions) === null || _fieldConfig_extensions1 === void 0 ? void 0 : _fieldConfig_extensions1.pothosPrismaLoaded;
        const loaderCache = (_parentConfig_extensions = parentConfig.extensions) === null || _parentConfig_extensions === void 0 ? void 0 : _parentConfig_extensions.pothosPrismaLoader;
        const fallback = (_fieldConfig_extensions2 = fieldConfig.extensions) === null || _fieldConfig_extensions2 === void 0 ? void 0 : _fieldConfig_extensions2.pothosPrismaFallback;
        const parentTypes = new Set([
            fieldConfig.parentType
        ]);
        if (parentConfig.kind === 'Interface' || parentConfig.kind === 'Object') {
            for (const iface of parentConfig.interfaces){
                var _interfaceConfig_extensions;
                const interfaceConfig = this.buildCache.getTypeConfig(iface, 'Interface');
                if ((_interfaceConfig_extensions = interfaceConfig.extensions) === null || _interfaceConfig_extensions === void 0 ? void 0 : _interfaceConfig_extensions.pothosPrismaModel) {
                    parentTypes.add(interfaceConfig.name);
                }
            }
        }
        return (parent, args, context, info)=>{
            let mapping = (0, _loadermap.getLoaderMapping)(context, info.path, info.parentType.name);
            if (!mapping) {
                for (const parentType of parentTypes){
                    mapping = (0, _loadermap.getLoaderMapping)(context, info.path, parentType);
                    if (mapping) {
                        break;
                    }
                }
            }
            if ((!loadedCheck || loadedCheck(parent, info)) && mapping) {
                (0, _loadermap.setLoaderMappings)(context, info, mapping);
                return resolver(parent, args, context, info);
            }
            if (fallback) {
                return fallback((0, _mapquery.queryFromInfo)({
                    context,
                    info,
                    skipDeferredFragments: this.builder.options.prisma.skipDeferredFragments
                }), parent, args, context, info);
            }
            return loaderCache(context).loadSelection(info, parent).then((result)=>resolver(result, args, context, info));
        };
    }
    constructor(cache){
        super(cache, pluginName);
    }
}
_core.default.registerPlugin(pluginName, PothosPrismaPlugin, {
    v3: (options)=>{
        var _options_prisma;
        var _options_prisma_filterConnectionTotalCount;
        return {
            prisma: {
                ...options.prisma,
                filterConnectionTotalCount: (_options_prisma_filterConnectionTotalCount = (_options_prisma = options.prisma) === null || _options_prisma === void 0 ? void 0 : _options_prisma.filterConnectionTotalCount) !== null && _options_prisma_filterConnectionTotalCount !== void 0 ? _options_prisma_filterConnectionTotalCount : false
            }
        };
    }
});

//# sourceMappingURL=index.js.map