"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
require("./global-types");
const _core = /*#__PURE__*/ _interop_require_wildcard(require("@pothos/core"));
const _interfaceref = require("./interface-ref");
const _modelloader = require("./model-loader");
const _noderef = require("./node-ref");
const _objectref = require("./object-ref");
const _prismafieldbuilder = require("./prisma-field-builder");
const _cursors = require("./util/cursors");
const _datamodel = require("./util/datamodel");
const _description = require("./util/description");
const _getclient = require("./util/get-client");
const _mapquery = require("./util/map-query");
const _relationmap = require("./util/relation-map");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const schemaBuilderProto = _core.default.prototype;
schemaBuilderProto.prismaObject = function prismaObject(type, { fields, findUnique, select, include, description, ...options }) {
    const ref = options.variant ? new _objectref.PrismaObjectRef(options.variant, type) : (0, _datamodel.getRefFromModel)(type, this);
    var _options_variant, _ref;
    const name = (_ref = (_options_variant = options.variant) !== null && _options_variant !== void 0 ? _options_variant : options.name) !== null && _ref !== void 0 ? _ref : type;
    const fieldMap = (0, _relationmap.getRelationMap)((0, _getclient.getDMMF)(this)).get(type);
    const idSelection = _modelloader.ModelLoader.getDefaultIDSelection(ref, type, this);
    ref.name = name;
    this.objectType(ref, {
        ...options,
        description: (0, _description.getModelDescription)(type, this, description),
        extensions: {
            ...options.extensions,
            pothosPrismaInclude: include,
            pothosPrismaModel: type,
            pothosPrismaFieldMap: fieldMap,
            pothosPrismaSelect: select && {
                ...idSelection,
                ...select
            },
            pothosPrismaLoader: _modelloader.ModelLoader.forRef(ref, type, findUnique, this)
        },
        name,
        fields: fields ? ()=>fields(new _prismafieldbuilder.PrismaObjectFieldBuilder(ref.name, this, type, (0, _relationmap.getRelationMap)((0, _getclient.getDMMF)(this)).get(type))) : undefined
    });
    return ref;
};
schemaBuilderProto.prismaInterface = function prismaInterface(type, { fields, findUnique, select, include, description, ...options }) {
    const ref = options.variant ? new _interfaceref.PrismaInterfaceRef(options.variant, type) : (0, _datamodel.getRefFromModel)(type, this, 'interface');
    var _options_variant, _ref;
    const name = (_ref = (_options_variant = options.variant) !== null && _options_variant !== void 0 ? _options_variant : options.name) !== null && _ref !== void 0 ? _ref : type;
    const fieldMap = (0, _relationmap.getRelationMap)((0, _getclient.getDMMF)(this)).get(type);
    const idSelection = _modelloader.ModelLoader.getDefaultIDSelection(ref, type, this);
    ref.name = name;
    this.interfaceType(ref, {
        ...options,
        description: (0, _description.getModelDescription)(type, this, description),
        extensions: {
            ...options.extensions,
            pothosPrismaInclude: include,
            pothosPrismaModel: type,
            pothosPrismaFieldMap: fieldMap,
            pothosPrismaSelect: select && {
                ...idSelection,
                ...select
            },
            pothosPrismaLoader: _modelloader.ModelLoader.forRef(ref, type, findUnique, this)
        },
        name,
        fields: fields ? ()=>fields(new _prismafieldbuilder.PrismaObjectFieldBuilder(name, this, type, (0, _relationmap.getRelationMap)((0, _getclient.getDMMF)(this)).get(type), 'Interface')) : undefined
    });
    return ref;
};
schemaBuilderProto.prismaNode = function prismaNode(type, { id: { field, resolve: rawResolve, ...idOptions }, findUnique: rawFindUnique, name, variant, nullable, ...options }) {
    const fieldName = field;
    const resolve = rawResolve !== null && rawResolve !== void 0 ? rawResolve : (0, _cursors.getDefaultIDSerializer)(type, fieldName, this);
    const idParser = fieldName ? (0, _cursors.getDefaultIDParser)(type, fieldName, this) : undefined;
    var _ref;
    const typeName = (_ref = variant !== null && variant !== void 0 ? variant : name) !== null && _ref !== void 0 ? _ref : type;
    const nodeRef = new _noderef.PrismaNodeRef(typeName, type);
    const findUnique = rawFindUnique ? (parent, context)=>rawFindUnique(resolve(parent, context), context) : _modelloader.ModelLoader.getFindUniqueForField(nodeRef, type, fieldName, this);
    const extendedOptions = {
        ...options,
        name,
        variant,
        findUnique
    };
    const ref = this.prismaObject(type, extendedOptions);
    this.nodeRef(ref, {
        id: {
            ...idOptions,
            resolve: (parent, _args, context)=>resolve(parent, context)
        },
        loadWithoutCache: async (id, context, info)=>{
            const query = (0, _mapquery.queryFromInfo)({
                context,
                info,
                typeName
            });
            const delegate = (0, _datamodel.getDelegateFromModel)((0, _getclient.getClient)(this, context), type);
            const record = await (delegate.findUniqueOrThrow && !nullable ? delegate.findUniqueOrThrow({
                ...query,
                where: rawFindUnique ? rawFindUnique(id, context) : {
                    [fieldName]: idParser(id)
                }
            }) : delegate.findUnique({
                ...query,
                ...nullable ? {} : {
                    rejectOnNotFound: true
                },
                where: rawFindUnique ? rawFindUnique(id, context) : {
                    [fieldName]: idParser(id)
                }
            }));
            (0, _core.brandWithType)(record, typeName);
            return record;
        }
    });
    this.configStore.associateParamWithRef(nodeRef, ref);
    return nodeRef;
};
schemaBuilderProto.prismaObjectField = function prismaObjectField(type, fieldName, field) {
    const ref = typeof type === 'string' ? (0, _datamodel.getRefFromModel)(type, this) : type;
    this.configStore.onTypeConfig(ref, ({ name })=>{
        this.configStore.addFields(ref, ()=>({
                [fieldName]: field(new _prismafieldbuilder.PrismaObjectFieldBuilder(name, this, ref.modelName, (0, _relationmap.getRelationMap)((0, _getclient.getDMMF)(this)).get(ref.modelName)))
            }));
    });
};
schemaBuilderProto.prismaInterfaceField = function prismaInterfaceField(type, fieldName, field) {
    const ref = typeof type === 'string' ? (0, _datamodel.getRefFromModel)(type, this) : type;
    this.configStore.onTypeConfig(ref, ({ name })=>{
        this.configStore.addFields(ref, ()=>({
                [fieldName]: field(new _prismafieldbuilder.PrismaObjectFieldBuilder(name, this, ref.modelName, (0, _relationmap.getRelationMap)((0, _getclient.getDMMF)(this)).get(ref.modelName), 'Interface'))
            }));
    });
};
schemaBuilderProto.prismaObjectFields = function prismaObjectFields(type, fields) {
    const ref = typeof type === 'string' ? (0, _datamodel.getRefFromModel)(type, this) : type;
    this.configStore.onTypeConfig(ref, ({ name })=>{
        this.configStore.addFields(ref, ()=>fields(new _prismafieldbuilder.PrismaObjectFieldBuilder(name, this, ref.modelName, (0, _relationmap.getRelationMap)((0, _getclient.getDMMF)(this)).get(ref.modelName))));
    });
};
schemaBuilderProto.prismaInterfaceFields = function prismaInterfaceFields(type, fields) {
    const ref = typeof type === 'string' ? (0, _datamodel.getRefFromModel)(type, this) : type;
    this.configStore.onTypeConfig(ref, ({ name })=>{
        this.configStore.addFields(ref, ()=>fields(new _prismafieldbuilder.PrismaObjectFieldBuilder(name, this, ref.modelName, (0, _relationmap.getRelationMap)((0, _getclient.getDMMF)(this)).get(ref.modelName), 'Interface')));
    });
};

//# sourceMappingURL=schema-builder.js.map