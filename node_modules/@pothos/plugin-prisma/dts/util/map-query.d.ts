import { type GraphQLNamedType, type GraphQLResolveInfo } from 'graphql';
import type { SelectionMap } from '../types';
import { type SelectionState } from './selections';
export declare function queryFromInfo<Select extends SelectionMap['select'] | undefined = undefined, Include extends SelectionMap['select'] | undefined = undefined>({ context, info, typeName, select, include, path, paths, withUsageCheck, skipDeferredFragments, }: {
    context: object;
    info: GraphQLResolveInfo;
    typeName?: string;
    path?: string[];
    paths?: string[][];
    withUsageCheck?: boolean;
    skipDeferredFragments?: boolean;
} & ({
    include?: Include;
    select?: never;
} | {
    select?: Select;
    include?: never;
})): undefined extends Include ? {
    select: Select;
} : {
    include: Include;
};
export declare function selectionStateFromInfo(context: object, info: GraphQLResolveInfo, skipDeferredFragments: boolean, typeName?: string): SelectionState;
export declare function getIndirectType(type: GraphQLNamedType, info: GraphQLResolveInfo): GraphQLNamedType;
//# sourceMappingURL=map-query.d.ts.map