import './global-types.js';
import './schema-builder.js';
import './field-builder.js';
import SchemaBuilder, { BasePlugin, PothosSchemaError } from '@pothos/core';
import { PrismaObjectFieldBuilder as InternalPrismaObjectFieldBuilder } from './prisma-field-builder.js';
import { formatPrismaCursor, parsePrismaCursor } from './util/cursors.js';
import { getModel, getRefFromModel } from './util/datamodel.js';
import { getLoaderMapping, setLoaderMappings } from './util/loader-map.js';
import { queryFromInfo } from './util/map-query.js';
export { prismaConnectionHelpers } from './connection-helpers.js';
export { PrismaInterfaceRef } from './interface-ref.js';
export { PrismaNodeRef } from './node-ref.js';
export { PrismaObjectRef, prismaModelKey } from './object-ref.js';
export * from './types.js';
export { prismaClientCache } from './util/get-client.js';
const pluginName = "prisma";
export default pluginName;
export { formatPrismaCursor, getModel, getRefFromModel, parsePrismaCursor, queryFromInfo };
export const ObjectFieldBuilder = InternalPrismaObjectFieldBuilder;
export class PothosPrismaPlugin extends BasePlugin {
    onTypeConfig(typeConfig) {
        var _typeConfig_extensions;
        if (typeConfig.kind !== "Object" && typeConfig.kind !== "Interface") {
            return typeConfig;
        }
        let model = (_typeConfig_extensions = typeConfig.extensions) === null || _typeConfig_extensions === void 0 ? void 0 : _typeConfig_extensions.pothosPrismaModel;
        for (const iface of typeConfig.interfaces) {
            var _this_buildCache_getTypeConfig_extensions;
            const interfaceModel = (_this_buildCache_getTypeConfig_extensions = this.buildCache.getTypeConfig(iface, "Interface").extensions) === null || _this_buildCache_getTypeConfig_extensions === void 0 ? void 0 : _this_buildCache_getTypeConfig_extensions.pothosPrismaModel;
            if (interfaceModel) {
                if (model && model !== interfaceModel) {
                    throw new PothosSchemaError(`PrismaObjects must be based on the same prisma model as any PrismaInterfaces they extend. ${typeConfig.name} uses ${model} and ${iface.name} uses ${interfaceModel}`);
                }
                model = interfaceModel;
            }
        }
        return {
            ...typeConfig,
            extensions: {
                ...typeConfig.extensions,
                pothosPrismaModel: model
            }
        };
    }
    onOutputFieldConfig(fieldConfig) {
        if (fieldConfig.kind === "PrismaObject" && fieldConfig.pothosOptions.select) {
            const { select } = fieldConfig.pothosOptions;
            return {
                ...fieldConfig,
                extensions: {
                    ...fieldConfig.extensions,
                    pothosPrismaSelect: typeof select === "function" ? (args, ctx, nestedQuery) => ({
                        select: select(args, ctx, nestedQuery)
                    }) : select
                }
            };
        }
        return fieldConfig;
    }
    wrapResolve(resolver, fieldConfig) {
        var _fieldConfig_extensions, _fieldConfig_extensions1, _parentConfig_extensions, _fieldConfig_extensions2;
        if (fieldConfig.kind !== "PrismaObject" || !((_fieldConfig_extensions = fieldConfig.extensions) === null || _fieldConfig_extensions === void 0 ? void 0 : _fieldConfig_extensions.pothosPrismaSelect)) {
            return resolver;
        }
        const parentConfig = this.buildCache.getTypeConfig(fieldConfig.parentType);
        const loadedCheck = (_fieldConfig_extensions1 = fieldConfig.extensions) === null || _fieldConfig_extensions1 === void 0 ? void 0 : _fieldConfig_extensions1.pothosPrismaLoaded;
        const loaderCache = (_parentConfig_extensions = parentConfig.extensions) === null || _parentConfig_extensions === void 0 ? void 0 : _parentConfig_extensions.pothosPrismaLoader;
        const fallback = (_fieldConfig_extensions2 = fieldConfig.extensions) === null || _fieldConfig_extensions2 === void 0 ? void 0 : _fieldConfig_extensions2.pothosPrismaFallback;
        const parentTypes = new Set([
            fieldConfig.parentType
        ]);
        if (parentConfig.kind === "Interface" || parentConfig.kind === "Object") {
            for (const iface of parentConfig.interfaces) {
                var _interfaceConfig_extensions;
                const interfaceConfig = this.buildCache.getTypeConfig(iface, "Interface");
                if ((_interfaceConfig_extensions = interfaceConfig.extensions) === null || _interfaceConfig_extensions === void 0 ? void 0 : _interfaceConfig_extensions.pothosPrismaModel) {
                    parentTypes.add(interfaceConfig.name);
                }
            }
        }
        return (parent, args, context, info) => {
            let mapping = getLoaderMapping(context, info.path, info.parentType.name);
            if (!mapping) {
                for (const parentType of parentTypes) {
                    mapping = getLoaderMapping(context, info.path, parentType);
                    if (mapping) {
                        break;
                    }
                }
            }
            if ((!loadedCheck || loadedCheck(parent, info)) && mapping) {
                setLoaderMappings(context, info, mapping);
                return resolver(parent, args, context, info);
            }
            if (fallback) {
                return fallback(queryFromInfo({
                    context,
                    info,
                    skipDeferredFragments: this.builder.options.prisma.skipDeferredFragments
                }), parent, args, context, info);
            }
            return loaderCache(context).loadSelection(info, parent).then((result) => resolver(result, args, context, info));
        };
    }
    constructor(cache) {
        super(cache, pluginName);
    }
}
SchemaBuilder.registerPlugin(pluginName, PothosPrismaPlugin, {
    v3: (options) => {
        var _options_prisma;
        var _options_prisma_filterConnectionTotalCount;
        return {
            prisma: {
                ...options.prisma,
                filterConnectionTotalCount: (_options_prisma_filterConnectionTotalCount = (_options_prisma = options.prisma) === null || _options_prisma === void 0 ? void 0 : _options_prisma.filterConnectionTotalCount) !== null && _options_prisma_filterConnectionTotalCount !== void 0 ? _options_prisma_filterConnectionTotalCount : false
            }
        };
    }
});
//# sourceMappingURL=index.js.map
