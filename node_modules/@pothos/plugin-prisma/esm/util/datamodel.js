import { PothosSchemaError } from '@pothos/core';
import { PrismaInterfaceRef } from '../interface-ref.js';
import { PrismaObjectRef } from '../object-ref.js';
import { getDMMF } from './get-client.js';
export const refMap = new WeakMap();
export const findUniqueMap = new WeakMap();
export const includeForRefMap = new WeakMap();
export function getRefFromModel(name, builder, type = "object") {
    if (!refMap.has(builder)) {
        refMap.set(builder, new Map());
    }
    const cache = refMap.get(builder);
    if (!cache.has(name)) {
        cache.set(name, type === "object" ? new PrismaObjectRef(name, name) : new PrismaInterfaceRef(name, name));
    }
    return cache.get(name);
}
export function getRelation(name, builder, relation) {
    const fieldData = getFieldData(name, builder, relation);
    if (fieldData.kind !== "object") {
        throw new PothosSchemaError(`Field ${relation} of model '${name}' is not a relation (${fieldData.kind})`);
    }
    return fieldData;
}
export function getFieldData(name, builder, fieldName) {
    const modelData = getModel(name, builder);
    const fieldData = modelData.fields.find((field) => field.name === fieldName);
    if (!fieldData) {
        throw new PothosSchemaError(`Field '${fieldName}' not found in model '${name}'`);
    }
    return fieldData;
}
export function getModel(name, builder) {
    const dmmf = getDMMF(builder);
    const modelData = Array.isArray(dmmf.models) ? dmmf.models.find((model) => model.name === name) : dmmf.models[name];
    if (!modelData) {
        throw new PothosSchemaError(`Model '${name}' not found in DMMF`);
    }
    return modelData;
}
export function getDelegateFromModel(client, model) {
    const lowerCase = `${model.slice(0, 1).toLowerCase()}${model.slice(1)}`;
    const delegate = lowerCase in client ? client[lowerCase] : null;
    if (!delegate) {
        throw new PothosSchemaError(`Unable to find delegate for model ${model}`);
    }
    return delegate;
}
//# sourceMappingURL=datamodel.js.map
