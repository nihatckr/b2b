function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    }
    else {
        obj[key] = value;
    }
    return obj;
}
import { abstractReturnShapeKey, brandWithType, ObjectRef, typeBrandKey } from '@pothos/core';
export const prismaModelKey = Symbol.for("Pothos.prismaModelKey");
let _prismaModelKey = prismaModelKey, _abstractReturnShapeKey = abstractReturnShapeKey;
export class PrismaObjectRef extends ObjectRef {
    addBrand(value) {
        if (Array.isArray(value)) {
            for (const val of value) {
                brandWithType(val, this.name);
            }
            return value;
        }
        brandWithType(value, this.name);
        return value;
    }
    hasBrand(value) {
        return typeof value === "object" && value !== null && typeBrandKey in value && value[typeBrandKey] === this.name;
    }
    constructor(name, modelName) {
        super(name), _define_property(this, _prismaModelKey, void 0), _define_property(this, _abstractReturnShapeKey, void 0), _define_property(this, "modelName", void 0);
        this.modelName = modelName;
    }
}
//# sourceMappingURL=object-ref.js.map
