/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n  mutation UpdateUser($id: Int!, $name: String!) {\n    updateUser(id: $id, name: $name) {\n      id\n      name\n    }\n  }\n": typeof types.UpdateUserDocument,
    "\n  query GetUser($id: Int!) {\n    user(id: $id) {\n      id\n      name\n      email\n    }\n  }\n": typeof types.GetUserDocument,
    "query AdminCategories($search: String, $skip: Int, $take: Int) {\n  categories(search: $search, skip: $skip, take: $take) {\n    id\n    name\n    description\n    createdAt\n    updatedAt\n    author {\n      id\n      name\n      email\n    }\n    company {\n      id\n      name\n    }\n    parentCategory {\n      id\n      name\n    }\n  }\n}\n\nquery AdminCategoriesCount($search: String) {\n  categoriesCount(search: $search)\n}\n\nquery AdminCategory($id: Int!) {\n  category(id: $id) {\n    id\n    name\n    description\n    createdAt\n    updatedAt\n    author {\n      id\n      name\n      email\n    }\n    company {\n      id\n      name\n    }\n    parentCategory {\n      id\n      name\n    }\n    subCategories {\n      id\n      name\n      description\n    }\n    collections {\n      id\n      name\n    }\n  }\n}\n\nquery AdminRootCategories {\n  rootCategories {\n    id\n    name\n    description\n    subCategories {\n      id\n      name\n      description\n    }\n  }\n}\n\nquery AdminCategoryTree {\n  categoryTree\n}\n\nmutation AdminCreateCategory($name: String!, $description: String, $parentCategoryId: Int) {\n  createCategory(\n    name: $name\n    description: $description\n    parentCategoryId: $parentCategoryId\n  ) {\n    id\n    name\n    description\n    createdAt\n    updatedAt\n    parentCategory {\n      id\n      name\n    }\n  }\n}\n\nmutation AdminUpdateCategory($id: Int!, $name: String, $description: String) {\n  updateCategory(id: $id, name: $name, description: $description) {\n    id\n    name\n    description\n    updatedAt\n  }\n}\n\nmutation AdminDeleteCategory($id: Int!) {\n  deleteCategory(id: $id)\n}": typeof types.AdminCategoriesDocument,
    "query AdminCompaniesList($skip: Int, $take: Int, $search: String, $type: String, $includeInactive: Boolean) {\n  companies(\n    skip: $skip\n    take: $take\n    search: $search\n    type: $type\n    includeInactive: $includeInactive\n  ) {\n    id\n    name\n    email\n    phone\n    type\n    description\n    website\n    address\n    city\n    country\n    logo\n    isActive\n    subscriptionPlan\n    subscriptionStatus\n    currentUsers\n    currentSamples\n    currentOrders\n    maxUsers\n    maxSamples\n    createdAt\n    updatedAt\n    owner {\n      id\n      name\n      email\n    }\n  }\n}\n\nquery AdminCompanyDetail($id: Int!) {\n  company(id: $id) {\n    id\n    name\n    email\n    phone\n    type\n    description\n    website\n    address\n    city\n    country\n    logo\n    coverImage\n    profileSlug\n    isPublicProfile\n    isActive\n    subscriptionPlan\n    subscriptionStatus\n    maxUsers\n    maxSamples\n    maxOrders\n    maxCollections\n    maxStorageGB\n    currentUsers\n    currentSamples\n    currentOrders\n    currentCollections\n    currentStorageGB\n    createdAt\n    updatedAt\n    owner {\n      id\n      name\n      email\n      phone\n    }\n    employees {\n      id\n      name\n      email\n      role\n      department\n      isActive\n      createdAt\n    }\n  }\n}\n\nquery AdminCompanyStats {\n  companies {\n    id\n    type\n    isActive\n    subscriptionPlan\n    currentUsers\n    currentSamples\n    currentOrders\n  }\n}\n\nmutation AdminUpdateCompany($id: Int!, $name: String, $email: String, $phone: String, $description: String, $website: String, $address: String, $city: String, $country: String, $logo: String, $subscriptionPlan: String, $subscriptionStatus: String) {\n  updateCompany(\n    id: $id\n    name: $name\n    email: $email\n    phone: $phone\n    description: $description\n    website: $website\n    address: $address\n    city: $city\n    country: $country\n    logo: $logo\n    subscriptionPlan: $subscriptionPlan\n    subscriptionStatus: $subscriptionStatus\n  ) {\n    id\n    name\n    email\n    type\n    isActive\n    subscriptionPlan\n    subscriptionStatus\n    updatedAt\n  }\n}\n\nmutation AdminToggleCompanyStatus($id: Int!) {\n  toggleCompanyStatus(id: $id) {\n    id\n    isActive\n  }\n}\n\nmutation AdminDeleteCompany($id: Int!, $hardDelete: Boolean) {\n  deleteCompany(id: $id, hardDelete: $hardDelete)\n}\n\nmutation AdminCreateCompany($name: String!, $email: String!, $phone: String, $type: String!) {\n  createCompany(name: $name, email: $email, phone: $phone, type: $type) {\n    id\n    name\n    email\n    type\n    phone\n    isActive\n    createdAt\n  }\n}": typeof types.AdminCompaniesListDocument,
    "query AdminStandardCategories($search: String, $level: String, $isActive: Boolean, $isPublic: Boolean, $skip: Int, $take: Int) {\n  adminStandardCategories(\n    search: $search\n    level: $level\n    isActive: $isActive\n    isPublic: $isPublic\n    skip: $skip\n    take: $take\n  ) {\n    id\n    code\n    name\n    description\n    level\n    order\n    icon\n    image\n    isActive\n    isPublic\n    keywords\n    tags\n    createdAt\n    updatedAt\n    createdBy {\n      id\n      name\n      email\n    }\n    parentCategory {\n      id\n      code\n      name\n    }\n    subCategories {\n      id\n      code\n      name\n      level\n    }\n  }\n}\n\nquery AdminStandardCategoriesCount($search: String, $level: String, $isActive: Boolean, $isPublic: Boolean) {\n  adminStandardCategoriesCount(\n    search: $search\n    level: $level\n    isActive: $isActive\n    isPublic: $isPublic\n  )\n}\n\nquery AdminStandardCategory($id: Int!) {\n  adminStandardCategory(id: $id) {\n    id\n    code\n    name\n    description\n    level\n    order\n    icon\n    image\n    isActive\n    isPublic\n    keywords\n    tags\n    createdAt\n    updatedAt\n    createdBy {\n      id\n      name\n      email\n    }\n    parentCategory {\n      id\n      code\n      name\n      level\n    }\n    subCategories {\n      id\n      code\n      name\n      description\n      level\n      order\n      isActive\n    }\n  }\n}\n\nquery AdminRootStandardCategories {\n  adminRootStandardCategories {\n    id\n    code\n    name\n    description\n    level\n    order\n    icon\n    image\n    isActive\n    subCategories {\n      id\n      code\n      name\n      level\n      order\n    }\n  }\n}\n\nquery AdminStandardCategoryTree {\n  adminStandardCategoryTree\n}\n\nquery AdminStandardCategoryStats {\n  adminStandardCategoryStats\n}\n\nmutation AdminCreateStandardCategory($input: CreateStandardCategoryInput!) {\n  createStandardCategory(input: $input) {\n    id\n    code\n    name\n    description\n    level\n    order\n    icon\n    image\n    isActive\n    isPublic\n    createdAt\n    parentCategory {\n      id\n      code\n      name\n    }\n  }\n}\n\nmutation AdminUpdateStandardCategory($id: Int!, $input: UpdateStandardCategoryInput!) {\n  updateStandardCategory(id: $id, input: $input) {\n    id\n    code\n    name\n    description\n    level\n    order\n    icon\n    image\n    isActive\n    isPublic\n    updatedAt\n    parentCategory {\n      id\n      code\n      name\n    }\n  }\n}\n\nmutation AdminDeleteStandardCategory($id: Int!) {\n  deleteStandardCategory(id: $id)\n}\n\nmutation AdminToggleStandardCategoryStatus($id: Int!) {\n  toggleStandardCategoryStatus(id: $id) {\n    id\n    isActive\n    updatedAt\n  }\n}\n\nmutation AdminUpdateStandardCategoryOrder($updates: [CategoryOrderUpdate!]!) {\n  updateStandardCategoryOrder(updates: $updates)\n}": typeof types.AdminStandardCategoriesDocument,
    "query AdminUsers($skip: Int, $take: Int, $role: String, $search: String) {\n  users(skip: $skip, take: $take, role: $role, search: $search) {\n    id\n    email\n    name\n    firstName\n    lastName\n    phone\n    role\n    department\n    jobTitle\n    isActive\n    isPendingApproval\n    createdAt\n    updatedAt\n    company {\n      id\n      name\n      type\n    }\n  }\n}\n\nquery AdminUsersCountByRole {\n  usersCountByRole\n}\n\nquery AdminUser($id: Int!) {\n  user(id: $id) {\n    id\n    email\n    name\n    firstName\n    lastName\n    phone\n    role\n    department\n    jobTitle\n    isActive\n    isPendingApproval\n    avatar\n    customAvatar\n    bio\n    socialLinks\n    emailNotifications\n    pushNotifications\n    language\n    timezone\n    createdAt\n    updatedAt\n    company {\n      id\n      name\n      type\n      email\n    }\n  }\n}\n\nquery AdminUserActivity($userId: Int!) {\n  userActivity(userId: $userId)\n}\n\nquery AdminCompanies($take: Int, $search: String) {\n  companies(take: $take, search: $search) {\n    id\n    name\n    type\n    email\n  }\n}\n\nmutation AdminCreateUser($email: String!, $password: String!, $name: String!, $role: String!, $companyId: Int) {\n  createUserByAdmin(\n    email: $email\n    password: $password\n    name: $name\n    role: $role\n    companyId: $companyId\n  ) {\n    id\n    email\n    name\n    role\n    createdAt\n    company {\n      id\n      name\n    }\n  }\n}\n\nmutation AdminUpdateUser($id: Int!, $name: String, $email: String, $phone: String, $password: String, $role: String, $companyId: Int, $department: String, $jobTitle: String) {\n  updateUser(\n    id: $id\n    name: $name\n    email: $email\n    phone: $phone\n    password: $password\n    role: $role\n    companyId: $companyId\n    department: $department\n    jobTitle: $jobTitle\n  ) {\n    id\n    name\n    email\n    phone\n    role\n    companyId\n    department\n    jobTitle\n    updatedAt\n  }\n}\n\nmutation AdminDeleteUser($id: Int!) {\n  deleteUserByAdmin(id: $id)\n}\n\nmutation AdminResetUserPassword($userId: Int!, $newPassword: String!) {\n  resetUserPassword(userId: $userId, newPassword: $newPassword) {\n    id\n    email\n    name\n  }\n}\n\nmutation AdminUpdateUserRole($userId: Int!, $role: String!) {\n  updateUserRole(userId: $userId, role: $role) {\n    id\n    email\n    name\n    role\n  }\n}\n\nmutation AdminToggleUserStatus($userId: Int!, $isActive: Boolean!) {\n  toggleUserStatusByAdmin(userId: $userId, isActive: $isActive) {\n    id\n    email\n    name\n    isActive\n  }\n}\n\nmutation AdminUpdateUserCompany($userId: Int!, $companyId: Int) {\n  updateUserCompanyByAdmin(userId: $userId, companyId: $companyId) {\n    id\n    email\n    name\n    company {\n      id\n      name\n    }\n  }\n}\n\nmutation AdminBulkToggleUserStatus($userIds: [Int!]!, $isActive: Boolean!) {\n  bulkToggleUserStatus(userIds: $userIds, isActive: $isActive)\n}\n\nmutation AdminBulkDeleteUsers($userIds: [Int!]!) {\n  bulkDeleteUsersByAdmin(userIds: $userIds)\n}": typeof types.AdminUsersDocument,
    "mutation AuthRequestPasswordReset($email: String!) {\n  requestPasswordReset(email: $email)\n}\n\nmutation AuthResetPassword($token: String!, $newPassword: String!) {\n  resetPassword(token: $token, newPassword: $newPassword)\n}\n\nmutation AuthVerifyEmail($token: String!) {\n  verifyEmail(token: $token)\n}\n\nmutation AuthResendVerificationEmail {\n  resendVerificationEmail\n}\n\nmutation AuthRefreshToken {\n  refreshToken\n}": typeof types.AuthRequestPasswordResetDocument,
    "query CollectionsList($skip: Int, $take: Int, $search: String, $featured: Boolean, $categoryId: Int, $season: String, $gender: String) {\n  collections(\n    skip: $skip\n    take: $take\n    search: $search\n    featured: $featured\n    categoryId: $categoryId\n    season: $season\n    gender: $gender\n  ) {\n    id\n    name\n    description\n    modelCode\n    season\n    gender\n    images\n    price\n    isFeatured\n    isActive\n    targetPrice\n    currency\n    moq\n    targetLeadTime\n    deadline\n    deadlineDays\n    fit\n    trend\n    colors\n    sizeRange\n    fabricComposition\n    accessories\n    fabricDetails {\n      id\n      name\n      iconValue\n      certifications {\n        id\n        name\n        iconValue\n        data\n      }\n    }\n    accessoryDetails {\n      id\n      name\n      iconValue\n      certifications {\n        id\n        name\n        iconValue\n        data\n      }\n    }\n    viewCount\n    likesCount\n    createdAt\n    updatedAt\n    author {\n      id\n      name\n    }\n    category {\n      id\n      name\n    }\n    company {\n      id\n      name\n    }\n  }\n}\n\nquery CollectionsDetail($id: Int!) {\n  collection(id: $id) {\n    id\n    name\n    description\n    modelCode\n    slug\n    season\n    gender\n    fit\n    trend\n    colors\n    sizeGroups\n    sizeRange\n    measurementChart\n    fabricComposition\n    accessories\n    images\n    techPack\n    fabricDetails {\n      id\n      name\n      description\n      imageUrl\n      iconValue\n      data\n      tags\n      certifications {\n        id\n        name\n        category\n        description\n        imageUrl\n        iconValue\n      }\n    }\n    accessoryDetails {\n      id\n      name\n      description\n      imageUrl\n      iconValue\n      data\n      tags\n      certifications {\n        id\n        name\n        category\n        description\n        imageUrl\n        iconValue\n      }\n    }\n    moq\n    targetPrice\n    currency\n    targetLeadTime\n    deadline\n    deadlineDays\n    notes\n    isActive\n    isFeatured\n    price\n    sku\n    stock\n    viewCount\n    shareCount\n    likesCount\n    lastViewedAt\n    createdAt\n    updatedAt\n    author {\n      id\n      name\n    }\n    category {\n      id\n      name\n    }\n    companyCategory {\n      id\n      name\n    }\n    company {\n      id\n      name\n      type\n    }\n    certifications {\n      id\n      name\n      category\n      description\n      imageUrl\n      iconValue\n    }\n    samples {\n      id\n      sampleNumber\n      name\n      status\n      images\n    }\n    orders {\n      id\n      orderNumber\n      quantity\n      status\n    }\n  }\n}\n\nquery CollectionsFeatured($skip: Int, $take: Int) {\n  featuredCollections(skip: $skip, take: $take) {\n    id\n    name\n    modelCode\n    description\n    season\n    gender\n    images\n    company {\n      id\n      name\n    }\n    createdAt\n  }\n}\n\nmutation CollectionsCreate($name: String!, $description: String, $modelCode: String, $season: String, $gender: String, $fit: String, $trend: String, $colors: String, $sizeRange: String, $fabricComposition: String, $accessories: String, $images: String, $moq: Int, $targetPrice: Float, $currency: String, $deadlineDays: Int, $notes: String) {\n  createCollection(\n    name: $name\n    description: $description\n    modelCode: $modelCode\n    season: $season\n    gender: $gender\n    fit: $fit\n    trend: $trend\n    colors: $colors\n    sizeRange: $sizeRange\n    fabricComposition: $fabricComposition\n    accessories: $accessories\n    images: $images\n    moq: $moq\n    targetPrice: $targetPrice\n    currency: $currency\n    deadlineDays: $deadlineDays\n    notes: $notes\n  ) {\n    id\n    name\n    modelCode\n    description\n    season\n    gender\n    fit\n    trend\n    colors\n    sizeRange\n    fabricComposition\n    accessories\n    images\n    moq\n    targetPrice\n    currency\n    deadline\n    deadlineDays\n    notes\n    createdAt\n    updatedAt\n  }\n}\n\nmutation CollectionsUpdate($id: Int!, $name: String, $description: String, $isFeatured: Boolean, $season: String, $gender: String, $fit: String, $trend: String, $colors: String, $sizeGroups: String, $sizeRange: String, $measurementChart: String, $fabricComposition: String, $accessories: String, $techPack: String, $moq: Int, $targetPrice: Float, $currency: String, $targetLeadTime: Int, $deadline: DateTime, $deadlineDays: Int, $notes: String, $images: String, $productionSchedule: String) {\n  updateCollection(\n    id: $id\n    name: $name\n    description: $description\n    isFeatured: $isFeatured\n    season: $season\n    gender: $gender\n    fit: $fit\n    trend: $trend\n    colors: $colors\n    sizeGroups: $sizeGroups\n    sizeRange: $sizeRange\n    measurementChart: $measurementChart\n    fabricComposition: $fabricComposition\n    accessories: $accessories\n    techPack: $techPack\n    moq: $moq\n    targetPrice: $targetPrice\n    currency: $currency\n    targetLeadTime: $targetLeadTime\n    deadline: $deadline\n    deadlineDays: $deadlineDays\n    notes: $notes\n    images: $images\n    productionSchedule: $productionSchedule\n  ) {\n    id\n    name\n    description\n    modelCode\n    season\n    gender\n    fit\n    trend\n    colors\n    sizeGroups\n    sizeRange\n    fabricComposition\n    accessories\n    images\n    moq\n    targetPrice\n    currency\n    targetLeadTime\n    deadline\n    deadlineDays\n    notes\n    isFeatured\n    updatedAt\n  }\n}\n\nmutation CollectionsDelete($id: Int!) {\n  deleteCollection(id: $id)\n}\n\nmutation CollectionsPublish($id: Int!) {\n  publishCollection(id: $id)\n}\n\nmutation CollectionsToggleLike($id: Int!) {\n  toggleCollectionLike(id: $id) {\n    id\n    likesCount\n  }\n}\n\nmutation CollectionsIncrementView($id: Int!) {\n  incrementCollectionView(id: $id) {\n    id\n    viewCount\n    lastViewedAt\n  }\n}": typeof types.CollectionsListDocument,
    "query DashboardGetMyCompany {\n  myCompany {\n    id\n    name\n    email\n    phone\n    website\n    address\n  }\n}\n\nmutation DashboardResendVerificationEmail {\n  resendVerificationEmail\n}": typeof types.DashboardGetMyCompanyDocument,
    "query DashboardPlatformStandards($category: String) {\n  platformStandards(category: $category) {\n    id\n    category\n    scope\n    code\n    name\n    description\n    imageUrl\n    data\n    tags\n    isActive\n    isPopular\n    createdAt\n    updatedAt\n    company {\n      id\n      name\n    }\n    createdBy {\n      id\n      name\n      email\n    }\n    certifications {\n      id\n      code\n      name\n      data\n      tags\n      iconValue\n      isActive\n      createdAt\n    }\n  }\n}\n\nquery DashboardMyCompanyLibrary($category: String) {\n  myCompanyLibrary(category: $category) {\n    id\n    category\n    scope\n    code\n    name\n    description\n    imageUrl\n    data\n    tags\n    isActive\n    isPopular\n    createdAt\n    updatedAt\n    standardItem {\n      id\n      name\n      code\n    }\n    createdBy {\n      id\n      name\n      email\n    }\n    certifications {\n      id\n      code\n      name\n      data\n      tags\n      iconValue\n      isActive\n      createdAt\n    }\n  }\n}\n\nquery DashboardLibraryItems($filter: LibraryFilterInput, $limit: Int, $offset: Int) {\n  libraryItems(filter: $filter, limit: $limit, offset: $offset) {\n    id\n    category\n    scope\n    code\n    name\n    description\n    imageUrl\n    data\n    tags\n    isActive\n    isPopular\n    createdAt\n    updatedAt\n    company {\n      id\n      name\n    }\n    standardItem {\n      id\n      name\n      code\n    }\n    createdBy {\n      id\n      name\n      email\n    }\n    certifications {\n      id\n      code\n      name\n      data\n      tags\n      iconValue\n      isActive\n      createdAt\n    }\n  }\n}\n\nquery DashboardLibraryItem($id: Int!) {\n  libraryItem(id: $id) {\n    id\n    category\n    scope\n    code\n    name\n    description\n    imageUrl\n    data\n    tags\n    isActive\n    isPopular\n    createdAt\n    updatedAt\n    company {\n      id\n      name\n      email\n    }\n    standardItem {\n      id\n      name\n      code\n      description\n      data\n    }\n    createdBy {\n      id\n      name\n      email\n    }\n  }\n}\n\nquery DashboardLibraryItemByCode($code: String!) {\n  libraryItemByCode(code: $code) {\n    id\n    category\n    scope\n    code\n    name\n    description\n    imageUrl\n    data\n    tags\n    isActive\n    isPopular\n  }\n}\n\nmutation DashboardCreateLibraryItem($input: CreateLibraryItemInput!) {\n  createLibraryItem(input: $input) {\n    id\n    category\n    scope\n    code\n    name\n    description\n    imageUrl\n    data\n    tags\n    isActive\n    isPopular\n    createdAt\n    company {\n      id\n      name\n    }\n    standardItem {\n      id\n      name\n      code\n    }\n    createdBy {\n      id\n      name\n      email\n    }\n    certifications {\n      id\n      code\n      name\n      data\n      tags\n      iconValue\n      isActive\n      createdAt\n    }\n  }\n}\n\nmutation DashboardUpdateLibraryItem($id: Int!, $input: UpdateLibraryItemInput!) {\n  updateLibraryItem(id: $id, input: $input) {\n    id\n    category\n    scope\n    code\n    name\n    description\n    imageUrl\n    data\n    tags\n    isActive\n    isPopular\n    updatedAt\n    company {\n      id\n      name\n    }\n    standardItem {\n      id\n      name\n      code\n    }\n    createdBy {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation DashboardDeleteLibraryItem($id: Int!) {\n  deleteLibraryItem(id: $id)\n}\n\nmutation DashboardSingleUpload($file: File!, $category: String, $description: String) {\n  singleUpload(file: $file, category: $category, description: $description)\n}\n\nquery DashboardStandardCategories($level: String, $parentId: Int) {\n  standardCategories(level: $level, parentId: $parentId) {\n    id\n    code\n    name\n    description\n    level\n    order\n    icon\n    image\n    isActive\n    isPublic\n    keywords\n    tags\n    parentId\n    subCategories {\n      id\n      name\n      code\n      level\n    }\n  }\n}\n\nquery DashboardMyCompanyCategories {\n  myCompanyCategories {\n    id\n    type\n    name\n    description\n    internalCode\n    isActive\n    customFields\n    standardCategoryId\n    parentId\n    subCategories {\n      id\n      name\n      internalCode\n    }\n  }\n}": typeof types.DashboardPlatformStandardsDocument,
    "mutation AuthOperationSignup($input: SignupInput!) {\n  signup(input: $input)\n}\n\nmutation AuthOperationLogin($email: String!, $password: String!) {\n  login(email: $email, password: $password)\n}\n\nmutation AuthOperationSignupOAuth($email: String!, $name: String!) {\n  signupOAuth(email: $email, name: $name)\n}\n\nmutation AuthOperationRefreshToken {\n  refreshToken\n}": typeof types.AuthOperationSignupDocument,
    "mutation FileUploadSingle($file: File!, $category: String, $description: String) {\n  singleUpload(file: $file, category: $category, description: $description)\n}\n\nmutation FileUploadMultiple($files: [File!]!, $category: String, $description: String) {\n  multipleUpload(files: $files, category: $category, description: $description)\n}": typeof types.FileUploadSingleDocument,
    "subscription NotificationOnNewNotification {\n  newNotification {\n    id\n    title\n    message\n    type\n    isRead\n    link\n    orderId\n    sampleId\n    productionTrackingId\n    createdAt\n  }\n}\n\nsubscription NotificationOnTaskAssigned {\n  taskAssigned {\n    id\n    title\n    description\n    priority\n    dueDate\n    createdAt\n  }\n}": typeof types.NotificationOnNewNotificationDocument,
    "query OrderNegotiations($orderId: Int!) {\n  orderNegotiations(orderId: $orderId) {\n    id\n    orderId\n    senderId\n    senderRole\n    unitPrice\n    productionDays\n    quantity\n    currency\n    message\n    status\n    respondedAt\n    respondedBy\n    createdAt\n    sender {\n      id\n      name\n      email\n    }\n    responder {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation SendOrderOffer($input: SendOrderOfferInput!) {\n  sendOrderOffer(input: $input) {\n    id\n    orderId\n    senderId\n    senderRole\n    unitPrice\n    productionDays\n    quantity\n    currency\n    message\n    status\n    createdAt\n  }\n}\n\nmutation RespondToOrderOffer($input: RespondToOfferInput!) {\n  respondToOrderOffer(input: $input) {\n    id\n    status\n    respondedAt\n    respondedBy\n  }\n}": typeof types.OrderNegotiationsDocument,
    "query BuyerOrders($skip: Int, $take: Int, $status: String, $search: String) {\n  orders(skip: $skip, take: $take, status: $status, search: $search) {\n    id\n    orderNumber\n    quantity\n    targetPrice\n    currency\n    deadline\n    status\n    notes\n    createdAt\n    updatedAt\n    collection {\n      id\n      name\n      modelCode\n      images\n      targetPrice\n      currency\n      company {\n        id\n        name\n      }\n    }\n    customer {\n      id\n      name\n      email\n    }\n    manufacturer {\n      id\n      name\n      email\n    }\n  }\n}\n\nquery BuyerOrderDetail($id: Int!) {\n  order(id: $id) {\n    id\n    orderNumber\n    quantity\n    targetPrice\n    currency\n    deadline\n    status\n    notes\n    unitPrice\n    productionDays\n    manufacturerResponse\n    actualProductionStart\n    createdAt\n    updatedAt\n    collection {\n      id\n      name\n      description\n      modelCode\n      season\n      gender\n      fit\n      trend\n      colors\n      sizeRange\n      fabricComposition\n      accessories\n      images\n      moq\n      targetPrice\n      currency\n      deadlineDays\n      notes\n      company {\n        id\n        name\n        email\n        phone\n        address\n        city\n        country\n        website\n      }\n    }\n    customer {\n      id\n      name\n      email\n      phone\n      company {\n        id\n        name\n        email\n        phone\n        address\n        city\n        country\n      }\n    }\n    manufacturer {\n      id\n      name\n      email\n      phone\n      company {\n        id\n        name\n        email\n        phone\n        address\n        city\n        country\n      }\n    }\n    productionTracking {\n      id\n      currentStage\n      overallStatus\n      progress\n      estimatedStartDate\n      estimatedEndDate\n      actualStartDate\n      actualEndDate\n      notes\n      customerApprovalStatus\n      customerApprovedAt\n      customerNote\n      revisionCount\n      stageUpdates {\n        id\n        stage\n        status\n        actualStartDate\n        actualEndDate\n        estimatedDays\n        notes\n        extraDays\n        isRevision\n        delayReason\n      }\n    }\n  }\n}\n\nmutation CustomerCounterOffer($id: Int!, $customerQuotedPrice: Float!, $customerQuoteDays: Int, $customerQuoteNote: String) {\n  updateOrder(\n    id: $id\n    customerQuotedPrice: $customerQuotedPrice\n    customerQuoteDays: $customerQuoteDays\n    customerQuoteNote: $customerQuoteNote\n    status: \"CUSTOMER_NEGOTIATING\"\n  ) {\n    id\n    orderNumber\n    status\n    customerQuotedPrice\n    customerQuoteDays\n    customerQuoteNote\n  }\n}\n\nmutation CustomerAcceptQuote($id: Int!) {\n  updateOrder(id: $id, status: \"CONFIRMED\") {\n    id\n    orderNumber\n    status\n  }\n}\n\nmutation CustomerRejectQuote($id: Int!) {\n  updateOrder(id: $id, status: \"REJECTED\") {\n    id\n    orderNumber\n    status\n  }\n}\n\nmutation ManufacturerAcceptCustomerQuote($orderId: Int!) {\n  manufacturerAcceptCustomerQuote(orderId: $orderId) {\n    id\n    orderNumber\n    status\n    unitPrice\n    productionDays\n  }\n}\n\nmutation CreateProductionPlan($orderId: Int!, $stagesJson: String!, $estimatedStartDate: DateTime, $notes: String) {\n  createProductionPlan(\n    orderId: $orderId\n    stagesJson: $stagesJson\n    estimatedStartDate: $estimatedStartDate\n    notes: $notes\n  ) {\n    id\n    currentStage\n    overallStatus\n    progress\n    estimatedStartDate\n    estimatedEndDate\n    notes\n    customerApprovalStatus\n  }\n}\n\nmutation UpdateProductionPlan($productionId: Int!, $stagesJson: String!, $notes: String) {\n  updateProductionPlan(\n    productionId: $productionId\n    stagesJson: $stagesJson\n    notes: $notes\n  ) {\n    id\n    currentStage\n    overallStatus\n    progress\n    estimatedStartDate\n    estimatedEndDate\n    notes\n    customerApprovalStatus\n    revisionCount\n  }\n}\n\nmutation SendProductionPlanForApproval($productionId: Int!) {\n  sendProductionPlanForApproval(productionId: $productionId) {\n    id\n    customerApprovalStatus\n    currentStage\n    overallStatus\n  }\n}\n\nmutation RespondToProductionPlan($productionId: Int!, $approved: Boolean!, $customerNote: String) {\n  respondToProductionPlan(\n    productionId: $productionId\n    approved: $approved\n    customerNote: $customerNote\n  ) {\n    id\n    customerApprovalStatus\n    customerApprovedAt\n    customerNote\n    currentStage\n    overallStatus\n  }\n}": typeof types.BuyerOrdersDocument,
    "mutation CreateOrder($input: CreateOrderInput!) {\n  createOrder(input: $input) {\n    id\n    orderNumber\n    quantity\n    unitPrice\n    totalPrice\n    status\n    customerQuotedPrice\n    customerQuoteNote\n    collection {\n      id\n      name\n      modelCode\n      images\n    }\n    customer {\n      id\n      name\n      email\n    }\n    manufacture {\n      id\n      name\n      email\n    }\n    company {\n      id\n      name\n    }\n    createdAt\n  }\n}": typeof types.CreateOrderDocument,
    "mutation SendQuote($id: Int!, $unitPrice: Float!, $productionDays: Int!, $note: String) {\n  sendQuote(\n    id: $id\n    unitPrice: $unitPrice\n    productionDays: $productionDays\n    note: $note\n  ) {\n    id\n    orderNumber\n    status\n    unitPrice\n    totalPrice\n    productionDays\n    manufacturerResponse\n    updatedAt\n  }\n}\n\nmutation AcceptQuote($id: Int!, $note: String) {\n  acceptQuote(id: $id, note: $note) {\n    id\n    orderNumber\n    status\n    customerNote\n    updatedAt\n  }\n}\n\nmutation RejectQuote($id: Int!, $reason: String!) {\n  rejectQuote(id: $id, reason: $reason) {\n    id\n    orderNumber\n    status\n    customerNote\n    updatedAt\n  }\n}": typeof types.SendQuoteDocument,
    "query SettingsGetCurrentUser {\n  me {\n    id\n    name\n    firstName\n    lastName\n    email\n    phone\n    jobTitle\n    bio\n    avatar\n    customAvatar\n    socialLinks\n    emailNotifications\n    pushNotifications\n    language\n    timezone\n  }\n}\n\nquery SettingsGetMyCompany {\n  myCompany {\n    id\n    name\n    email\n    phone\n    description\n    website\n    address\n    city\n    country\n    logo\n    coverImage\n    type\n    socialLinks\n    brandColors\n    profileSlug\n    isPublicProfile\n  }\n}\n\nmutation SettingsUpdateUserProfile($name: String, $firstName: String, $lastName: String, $phone: String, $jobTitle: String, $bio: String, $avatar: String, $customAvatar: String, $socialLinks: String) {\n  updateProfile(\n    name: $name\n    firstName: $firstName\n    lastName: $lastName\n    phone: $phone\n    jobTitle: $jobTitle\n    bio: $bio\n    avatar: $avatar\n    customAvatar: $customAvatar\n    socialLinks: $socialLinks\n  ) {\n    id\n    name\n    firstName\n    lastName\n    phone\n    jobTitle\n    bio\n    avatar\n    customAvatar\n    socialLinks\n  }\n}\n\nmutation SettingsUpdateUserNotifications($emailNotifications: Boolean, $pushNotifications: Boolean) {\n  updateProfile(\n    emailNotifications: $emailNotifications\n    pushNotifications: $pushNotifications\n  ) {\n    id\n    emailNotifications\n    pushNotifications\n  }\n}\n\nmutation SettingsUpdateUserPreferences($language: String, $timezone: String) {\n  updateProfile(language: $language, timezone: $timezone) {\n    id\n    language\n    timezone\n  }\n}\n\nmutation SettingsUpdateCompanyInfo($id: Int!, $name: String, $email: String, $phone: String, $description: String, $website: String, $address: String, $city: String, $country: String, $logo: String, $coverImage: String, $socialLinks: String, $brandColors: String, $profileSlug: String, $isPublicProfile: Boolean) {\n  updateCompany(\n    id: $id\n    name: $name\n    email: $email\n    phone: $phone\n    description: $description\n    website: $website\n    address: $address\n    city: $city\n    country: $country\n    logo: $logo\n    coverImage: $coverImage\n    socialLinks: $socialLinks\n    brandColors: $brandColors\n    profileSlug: $profileSlug\n    isPublicProfile: $isPublicProfile\n  ) {\n    id\n    name\n    email\n    phone\n    description\n    website\n    address\n    city\n    country\n    logo\n    coverImage\n    socialLinks\n    brandColors\n    profileSlug\n    isPublicProfile\n  }\n}\n\nmutation SettingsResendVerificationEmail {\n  resendVerificationEmail\n}": typeof types.SettingsGetCurrentUserDocument,
};
const documents: Documents = {
    "\n  mutation UpdateUser($id: Int!, $name: String!) {\n    updateUser(id: $id, name: $name) {\n      id\n      name\n    }\n  }\n": types.UpdateUserDocument,
    "\n  query GetUser($id: Int!) {\n    user(id: $id) {\n      id\n      name\n      email\n    }\n  }\n": types.GetUserDocument,
    "query AdminCategories($search: String, $skip: Int, $take: Int) {\n  categories(search: $search, skip: $skip, take: $take) {\n    id\n    name\n    description\n    createdAt\n    updatedAt\n    author {\n      id\n      name\n      email\n    }\n    company {\n      id\n      name\n    }\n    parentCategory {\n      id\n      name\n    }\n  }\n}\n\nquery AdminCategoriesCount($search: String) {\n  categoriesCount(search: $search)\n}\n\nquery AdminCategory($id: Int!) {\n  category(id: $id) {\n    id\n    name\n    description\n    createdAt\n    updatedAt\n    author {\n      id\n      name\n      email\n    }\n    company {\n      id\n      name\n    }\n    parentCategory {\n      id\n      name\n    }\n    subCategories {\n      id\n      name\n      description\n    }\n    collections {\n      id\n      name\n    }\n  }\n}\n\nquery AdminRootCategories {\n  rootCategories {\n    id\n    name\n    description\n    subCategories {\n      id\n      name\n      description\n    }\n  }\n}\n\nquery AdminCategoryTree {\n  categoryTree\n}\n\nmutation AdminCreateCategory($name: String!, $description: String, $parentCategoryId: Int) {\n  createCategory(\n    name: $name\n    description: $description\n    parentCategoryId: $parentCategoryId\n  ) {\n    id\n    name\n    description\n    createdAt\n    updatedAt\n    parentCategory {\n      id\n      name\n    }\n  }\n}\n\nmutation AdminUpdateCategory($id: Int!, $name: String, $description: String) {\n  updateCategory(id: $id, name: $name, description: $description) {\n    id\n    name\n    description\n    updatedAt\n  }\n}\n\nmutation AdminDeleteCategory($id: Int!) {\n  deleteCategory(id: $id)\n}": types.AdminCategoriesDocument,
    "query AdminCompaniesList($skip: Int, $take: Int, $search: String, $type: String, $includeInactive: Boolean) {\n  companies(\n    skip: $skip\n    take: $take\n    search: $search\n    type: $type\n    includeInactive: $includeInactive\n  ) {\n    id\n    name\n    email\n    phone\n    type\n    description\n    website\n    address\n    city\n    country\n    logo\n    isActive\n    subscriptionPlan\n    subscriptionStatus\n    currentUsers\n    currentSamples\n    currentOrders\n    maxUsers\n    maxSamples\n    createdAt\n    updatedAt\n    owner {\n      id\n      name\n      email\n    }\n  }\n}\n\nquery AdminCompanyDetail($id: Int!) {\n  company(id: $id) {\n    id\n    name\n    email\n    phone\n    type\n    description\n    website\n    address\n    city\n    country\n    logo\n    coverImage\n    profileSlug\n    isPublicProfile\n    isActive\n    subscriptionPlan\n    subscriptionStatus\n    maxUsers\n    maxSamples\n    maxOrders\n    maxCollections\n    maxStorageGB\n    currentUsers\n    currentSamples\n    currentOrders\n    currentCollections\n    currentStorageGB\n    createdAt\n    updatedAt\n    owner {\n      id\n      name\n      email\n      phone\n    }\n    employees {\n      id\n      name\n      email\n      role\n      department\n      isActive\n      createdAt\n    }\n  }\n}\n\nquery AdminCompanyStats {\n  companies {\n    id\n    type\n    isActive\n    subscriptionPlan\n    currentUsers\n    currentSamples\n    currentOrders\n  }\n}\n\nmutation AdminUpdateCompany($id: Int!, $name: String, $email: String, $phone: String, $description: String, $website: String, $address: String, $city: String, $country: String, $logo: String, $subscriptionPlan: String, $subscriptionStatus: String) {\n  updateCompany(\n    id: $id\n    name: $name\n    email: $email\n    phone: $phone\n    description: $description\n    website: $website\n    address: $address\n    city: $city\n    country: $country\n    logo: $logo\n    subscriptionPlan: $subscriptionPlan\n    subscriptionStatus: $subscriptionStatus\n  ) {\n    id\n    name\n    email\n    type\n    isActive\n    subscriptionPlan\n    subscriptionStatus\n    updatedAt\n  }\n}\n\nmutation AdminToggleCompanyStatus($id: Int!) {\n  toggleCompanyStatus(id: $id) {\n    id\n    isActive\n  }\n}\n\nmutation AdminDeleteCompany($id: Int!, $hardDelete: Boolean) {\n  deleteCompany(id: $id, hardDelete: $hardDelete)\n}\n\nmutation AdminCreateCompany($name: String!, $email: String!, $phone: String, $type: String!) {\n  createCompany(name: $name, email: $email, phone: $phone, type: $type) {\n    id\n    name\n    email\n    type\n    phone\n    isActive\n    createdAt\n  }\n}": types.AdminCompaniesListDocument,
    "query AdminStandardCategories($search: String, $level: String, $isActive: Boolean, $isPublic: Boolean, $skip: Int, $take: Int) {\n  adminStandardCategories(\n    search: $search\n    level: $level\n    isActive: $isActive\n    isPublic: $isPublic\n    skip: $skip\n    take: $take\n  ) {\n    id\n    code\n    name\n    description\n    level\n    order\n    icon\n    image\n    isActive\n    isPublic\n    keywords\n    tags\n    createdAt\n    updatedAt\n    createdBy {\n      id\n      name\n      email\n    }\n    parentCategory {\n      id\n      code\n      name\n    }\n    subCategories {\n      id\n      code\n      name\n      level\n    }\n  }\n}\n\nquery AdminStandardCategoriesCount($search: String, $level: String, $isActive: Boolean, $isPublic: Boolean) {\n  adminStandardCategoriesCount(\n    search: $search\n    level: $level\n    isActive: $isActive\n    isPublic: $isPublic\n  )\n}\n\nquery AdminStandardCategory($id: Int!) {\n  adminStandardCategory(id: $id) {\n    id\n    code\n    name\n    description\n    level\n    order\n    icon\n    image\n    isActive\n    isPublic\n    keywords\n    tags\n    createdAt\n    updatedAt\n    createdBy {\n      id\n      name\n      email\n    }\n    parentCategory {\n      id\n      code\n      name\n      level\n    }\n    subCategories {\n      id\n      code\n      name\n      description\n      level\n      order\n      isActive\n    }\n  }\n}\n\nquery AdminRootStandardCategories {\n  adminRootStandardCategories {\n    id\n    code\n    name\n    description\n    level\n    order\n    icon\n    image\n    isActive\n    subCategories {\n      id\n      code\n      name\n      level\n      order\n    }\n  }\n}\n\nquery AdminStandardCategoryTree {\n  adminStandardCategoryTree\n}\n\nquery AdminStandardCategoryStats {\n  adminStandardCategoryStats\n}\n\nmutation AdminCreateStandardCategory($input: CreateStandardCategoryInput!) {\n  createStandardCategory(input: $input) {\n    id\n    code\n    name\n    description\n    level\n    order\n    icon\n    image\n    isActive\n    isPublic\n    createdAt\n    parentCategory {\n      id\n      code\n      name\n    }\n  }\n}\n\nmutation AdminUpdateStandardCategory($id: Int!, $input: UpdateStandardCategoryInput!) {\n  updateStandardCategory(id: $id, input: $input) {\n    id\n    code\n    name\n    description\n    level\n    order\n    icon\n    image\n    isActive\n    isPublic\n    updatedAt\n    parentCategory {\n      id\n      code\n      name\n    }\n  }\n}\n\nmutation AdminDeleteStandardCategory($id: Int!) {\n  deleteStandardCategory(id: $id)\n}\n\nmutation AdminToggleStandardCategoryStatus($id: Int!) {\n  toggleStandardCategoryStatus(id: $id) {\n    id\n    isActive\n    updatedAt\n  }\n}\n\nmutation AdminUpdateStandardCategoryOrder($updates: [CategoryOrderUpdate!]!) {\n  updateStandardCategoryOrder(updates: $updates)\n}": types.AdminStandardCategoriesDocument,
    "query AdminUsers($skip: Int, $take: Int, $role: String, $search: String) {\n  users(skip: $skip, take: $take, role: $role, search: $search) {\n    id\n    email\n    name\n    firstName\n    lastName\n    phone\n    role\n    department\n    jobTitle\n    isActive\n    isPendingApproval\n    createdAt\n    updatedAt\n    company {\n      id\n      name\n      type\n    }\n  }\n}\n\nquery AdminUsersCountByRole {\n  usersCountByRole\n}\n\nquery AdminUser($id: Int!) {\n  user(id: $id) {\n    id\n    email\n    name\n    firstName\n    lastName\n    phone\n    role\n    department\n    jobTitle\n    isActive\n    isPendingApproval\n    avatar\n    customAvatar\n    bio\n    socialLinks\n    emailNotifications\n    pushNotifications\n    language\n    timezone\n    createdAt\n    updatedAt\n    company {\n      id\n      name\n      type\n      email\n    }\n  }\n}\n\nquery AdminUserActivity($userId: Int!) {\n  userActivity(userId: $userId)\n}\n\nquery AdminCompanies($take: Int, $search: String) {\n  companies(take: $take, search: $search) {\n    id\n    name\n    type\n    email\n  }\n}\n\nmutation AdminCreateUser($email: String!, $password: String!, $name: String!, $role: String!, $companyId: Int) {\n  createUserByAdmin(\n    email: $email\n    password: $password\n    name: $name\n    role: $role\n    companyId: $companyId\n  ) {\n    id\n    email\n    name\n    role\n    createdAt\n    company {\n      id\n      name\n    }\n  }\n}\n\nmutation AdminUpdateUser($id: Int!, $name: String, $email: String, $phone: String, $password: String, $role: String, $companyId: Int, $department: String, $jobTitle: String) {\n  updateUser(\n    id: $id\n    name: $name\n    email: $email\n    phone: $phone\n    password: $password\n    role: $role\n    companyId: $companyId\n    department: $department\n    jobTitle: $jobTitle\n  ) {\n    id\n    name\n    email\n    phone\n    role\n    companyId\n    department\n    jobTitle\n    updatedAt\n  }\n}\n\nmutation AdminDeleteUser($id: Int!) {\n  deleteUserByAdmin(id: $id)\n}\n\nmutation AdminResetUserPassword($userId: Int!, $newPassword: String!) {\n  resetUserPassword(userId: $userId, newPassword: $newPassword) {\n    id\n    email\n    name\n  }\n}\n\nmutation AdminUpdateUserRole($userId: Int!, $role: String!) {\n  updateUserRole(userId: $userId, role: $role) {\n    id\n    email\n    name\n    role\n  }\n}\n\nmutation AdminToggleUserStatus($userId: Int!, $isActive: Boolean!) {\n  toggleUserStatusByAdmin(userId: $userId, isActive: $isActive) {\n    id\n    email\n    name\n    isActive\n  }\n}\n\nmutation AdminUpdateUserCompany($userId: Int!, $companyId: Int) {\n  updateUserCompanyByAdmin(userId: $userId, companyId: $companyId) {\n    id\n    email\n    name\n    company {\n      id\n      name\n    }\n  }\n}\n\nmutation AdminBulkToggleUserStatus($userIds: [Int!]!, $isActive: Boolean!) {\n  bulkToggleUserStatus(userIds: $userIds, isActive: $isActive)\n}\n\nmutation AdminBulkDeleteUsers($userIds: [Int!]!) {\n  bulkDeleteUsersByAdmin(userIds: $userIds)\n}": types.AdminUsersDocument,
    "mutation AuthRequestPasswordReset($email: String!) {\n  requestPasswordReset(email: $email)\n}\n\nmutation AuthResetPassword($token: String!, $newPassword: String!) {\n  resetPassword(token: $token, newPassword: $newPassword)\n}\n\nmutation AuthVerifyEmail($token: String!) {\n  verifyEmail(token: $token)\n}\n\nmutation AuthResendVerificationEmail {\n  resendVerificationEmail\n}\n\nmutation AuthRefreshToken {\n  refreshToken\n}": types.AuthRequestPasswordResetDocument,
    "query CollectionsList($skip: Int, $take: Int, $search: String, $featured: Boolean, $categoryId: Int, $season: String, $gender: String) {\n  collections(\n    skip: $skip\n    take: $take\n    search: $search\n    featured: $featured\n    categoryId: $categoryId\n    season: $season\n    gender: $gender\n  ) {\n    id\n    name\n    description\n    modelCode\n    season\n    gender\n    images\n    price\n    isFeatured\n    isActive\n    targetPrice\n    currency\n    moq\n    targetLeadTime\n    deadline\n    deadlineDays\n    fit\n    trend\n    colors\n    sizeRange\n    fabricComposition\n    accessories\n    fabricDetails {\n      id\n      name\n      iconValue\n      certifications {\n        id\n        name\n        iconValue\n        data\n      }\n    }\n    accessoryDetails {\n      id\n      name\n      iconValue\n      certifications {\n        id\n        name\n        iconValue\n        data\n      }\n    }\n    viewCount\n    likesCount\n    createdAt\n    updatedAt\n    author {\n      id\n      name\n    }\n    category {\n      id\n      name\n    }\n    company {\n      id\n      name\n    }\n  }\n}\n\nquery CollectionsDetail($id: Int!) {\n  collection(id: $id) {\n    id\n    name\n    description\n    modelCode\n    slug\n    season\n    gender\n    fit\n    trend\n    colors\n    sizeGroups\n    sizeRange\n    measurementChart\n    fabricComposition\n    accessories\n    images\n    techPack\n    fabricDetails {\n      id\n      name\n      description\n      imageUrl\n      iconValue\n      data\n      tags\n      certifications {\n        id\n        name\n        category\n        description\n        imageUrl\n        iconValue\n      }\n    }\n    accessoryDetails {\n      id\n      name\n      description\n      imageUrl\n      iconValue\n      data\n      tags\n      certifications {\n        id\n        name\n        category\n        description\n        imageUrl\n        iconValue\n      }\n    }\n    moq\n    targetPrice\n    currency\n    targetLeadTime\n    deadline\n    deadlineDays\n    notes\n    isActive\n    isFeatured\n    price\n    sku\n    stock\n    viewCount\n    shareCount\n    likesCount\n    lastViewedAt\n    createdAt\n    updatedAt\n    author {\n      id\n      name\n    }\n    category {\n      id\n      name\n    }\n    companyCategory {\n      id\n      name\n    }\n    company {\n      id\n      name\n      type\n    }\n    certifications {\n      id\n      name\n      category\n      description\n      imageUrl\n      iconValue\n    }\n    samples {\n      id\n      sampleNumber\n      name\n      status\n      images\n    }\n    orders {\n      id\n      orderNumber\n      quantity\n      status\n    }\n  }\n}\n\nquery CollectionsFeatured($skip: Int, $take: Int) {\n  featuredCollections(skip: $skip, take: $take) {\n    id\n    name\n    modelCode\n    description\n    season\n    gender\n    images\n    company {\n      id\n      name\n    }\n    createdAt\n  }\n}\n\nmutation CollectionsCreate($name: String!, $description: String, $modelCode: String, $season: String, $gender: String, $fit: String, $trend: String, $colors: String, $sizeRange: String, $fabricComposition: String, $accessories: String, $images: String, $moq: Int, $targetPrice: Float, $currency: String, $deadlineDays: Int, $notes: String) {\n  createCollection(\n    name: $name\n    description: $description\n    modelCode: $modelCode\n    season: $season\n    gender: $gender\n    fit: $fit\n    trend: $trend\n    colors: $colors\n    sizeRange: $sizeRange\n    fabricComposition: $fabricComposition\n    accessories: $accessories\n    images: $images\n    moq: $moq\n    targetPrice: $targetPrice\n    currency: $currency\n    deadlineDays: $deadlineDays\n    notes: $notes\n  ) {\n    id\n    name\n    modelCode\n    description\n    season\n    gender\n    fit\n    trend\n    colors\n    sizeRange\n    fabricComposition\n    accessories\n    images\n    moq\n    targetPrice\n    currency\n    deadline\n    deadlineDays\n    notes\n    createdAt\n    updatedAt\n  }\n}\n\nmutation CollectionsUpdate($id: Int!, $name: String, $description: String, $isFeatured: Boolean, $season: String, $gender: String, $fit: String, $trend: String, $colors: String, $sizeGroups: String, $sizeRange: String, $measurementChart: String, $fabricComposition: String, $accessories: String, $techPack: String, $moq: Int, $targetPrice: Float, $currency: String, $targetLeadTime: Int, $deadline: DateTime, $deadlineDays: Int, $notes: String, $images: String, $productionSchedule: String) {\n  updateCollection(\n    id: $id\n    name: $name\n    description: $description\n    isFeatured: $isFeatured\n    season: $season\n    gender: $gender\n    fit: $fit\n    trend: $trend\n    colors: $colors\n    sizeGroups: $sizeGroups\n    sizeRange: $sizeRange\n    measurementChart: $measurementChart\n    fabricComposition: $fabricComposition\n    accessories: $accessories\n    techPack: $techPack\n    moq: $moq\n    targetPrice: $targetPrice\n    currency: $currency\n    targetLeadTime: $targetLeadTime\n    deadline: $deadline\n    deadlineDays: $deadlineDays\n    notes: $notes\n    images: $images\n    productionSchedule: $productionSchedule\n  ) {\n    id\n    name\n    description\n    modelCode\n    season\n    gender\n    fit\n    trend\n    colors\n    sizeGroups\n    sizeRange\n    fabricComposition\n    accessories\n    images\n    moq\n    targetPrice\n    currency\n    targetLeadTime\n    deadline\n    deadlineDays\n    notes\n    isFeatured\n    updatedAt\n  }\n}\n\nmutation CollectionsDelete($id: Int!) {\n  deleteCollection(id: $id)\n}\n\nmutation CollectionsPublish($id: Int!) {\n  publishCollection(id: $id)\n}\n\nmutation CollectionsToggleLike($id: Int!) {\n  toggleCollectionLike(id: $id) {\n    id\n    likesCount\n  }\n}\n\nmutation CollectionsIncrementView($id: Int!) {\n  incrementCollectionView(id: $id) {\n    id\n    viewCount\n    lastViewedAt\n  }\n}": types.CollectionsListDocument,
    "query DashboardGetMyCompany {\n  myCompany {\n    id\n    name\n    email\n    phone\n    website\n    address\n  }\n}\n\nmutation DashboardResendVerificationEmail {\n  resendVerificationEmail\n}": types.DashboardGetMyCompanyDocument,
    "query DashboardPlatformStandards($category: String) {\n  platformStandards(category: $category) {\n    id\n    category\n    scope\n    code\n    name\n    description\n    imageUrl\n    data\n    tags\n    isActive\n    isPopular\n    createdAt\n    updatedAt\n    company {\n      id\n      name\n    }\n    createdBy {\n      id\n      name\n      email\n    }\n    certifications {\n      id\n      code\n      name\n      data\n      tags\n      iconValue\n      isActive\n      createdAt\n    }\n  }\n}\n\nquery DashboardMyCompanyLibrary($category: String) {\n  myCompanyLibrary(category: $category) {\n    id\n    category\n    scope\n    code\n    name\n    description\n    imageUrl\n    data\n    tags\n    isActive\n    isPopular\n    createdAt\n    updatedAt\n    standardItem {\n      id\n      name\n      code\n    }\n    createdBy {\n      id\n      name\n      email\n    }\n    certifications {\n      id\n      code\n      name\n      data\n      tags\n      iconValue\n      isActive\n      createdAt\n    }\n  }\n}\n\nquery DashboardLibraryItems($filter: LibraryFilterInput, $limit: Int, $offset: Int) {\n  libraryItems(filter: $filter, limit: $limit, offset: $offset) {\n    id\n    category\n    scope\n    code\n    name\n    description\n    imageUrl\n    data\n    tags\n    isActive\n    isPopular\n    createdAt\n    updatedAt\n    company {\n      id\n      name\n    }\n    standardItem {\n      id\n      name\n      code\n    }\n    createdBy {\n      id\n      name\n      email\n    }\n    certifications {\n      id\n      code\n      name\n      data\n      tags\n      iconValue\n      isActive\n      createdAt\n    }\n  }\n}\n\nquery DashboardLibraryItem($id: Int!) {\n  libraryItem(id: $id) {\n    id\n    category\n    scope\n    code\n    name\n    description\n    imageUrl\n    data\n    tags\n    isActive\n    isPopular\n    createdAt\n    updatedAt\n    company {\n      id\n      name\n      email\n    }\n    standardItem {\n      id\n      name\n      code\n      description\n      data\n    }\n    createdBy {\n      id\n      name\n      email\n    }\n  }\n}\n\nquery DashboardLibraryItemByCode($code: String!) {\n  libraryItemByCode(code: $code) {\n    id\n    category\n    scope\n    code\n    name\n    description\n    imageUrl\n    data\n    tags\n    isActive\n    isPopular\n  }\n}\n\nmutation DashboardCreateLibraryItem($input: CreateLibraryItemInput!) {\n  createLibraryItem(input: $input) {\n    id\n    category\n    scope\n    code\n    name\n    description\n    imageUrl\n    data\n    tags\n    isActive\n    isPopular\n    createdAt\n    company {\n      id\n      name\n    }\n    standardItem {\n      id\n      name\n      code\n    }\n    createdBy {\n      id\n      name\n      email\n    }\n    certifications {\n      id\n      code\n      name\n      data\n      tags\n      iconValue\n      isActive\n      createdAt\n    }\n  }\n}\n\nmutation DashboardUpdateLibraryItem($id: Int!, $input: UpdateLibraryItemInput!) {\n  updateLibraryItem(id: $id, input: $input) {\n    id\n    category\n    scope\n    code\n    name\n    description\n    imageUrl\n    data\n    tags\n    isActive\n    isPopular\n    updatedAt\n    company {\n      id\n      name\n    }\n    standardItem {\n      id\n      name\n      code\n    }\n    createdBy {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation DashboardDeleteLibraryItem($id: Int!) {\n  deleteLibraryItem(id: $id)\n}\n\nmutation DashboardSingleUpload($file: File!, $category: String, $description: String) {\n  singleUpload(file: $file, category: $category, description: $description)\n}\n\nquery DashboardStandardCategories($level: String, $parentId: Int) {\n  standardCategories(level: $level, parentId: $parentId) {\n    id\n    code\n    name\n    description\n    level\n    order\n    icon\n    image\n    isActive\n    isPublic\n    keywords\n    tags\n    parentId\n    subCategories {\n      id\n      name\n      code\n      level\n    }\n  }\n}\n\nquery DashboardMyCompanyCategories {\n  myCompanyCategories {\n    id\n    type\n    name\n    description\n    internalCode\n    isActive\n    customFields\n    standardCategoryId\n    parentId\n    subCategories {\n      id\n      name\n      internalCode\n    }\n  }\n}": types.DashboardPlatformStandardsDocument,
    "mutation AuthOperationSignup($input: SignupInput!) {\n  signup(input: $input)\n}\n\nmutation AuthOperationLogin($email: String!, $password: String!) {\n  login(email: $email, password: $password)\n}\n\nmutation AuthOperationSignupOAuth($email: String!, $name: String!) {\n  signupOAuth(email: $email, name: $name)\n}\n\nmutation AuthOperationRefreshToken {\n  refreshToken\n}": types.AuthOperationSignupDocument,
    "mutation FileUploadSingle($file: File!, $category: String, $description: String) {\n  singleUpload(file: $file, category: $category, description: $description)\n}\n\nmutation FileUploadMultiple($files: [File!]!, $category: String, $description: String) {\n  multipleUpload(files: $files, category: $category, description: $description)\n}": types.FileUploadSingleDocument,
    "subscription NotificationOnNewNotification {\n  newNotification {\n    id\n    title\n    message\n    type\n    isRead\n    link\n    orderId\n    sampleId\n    productionTrackingId\n    createdAt\n  }\n}\n\nsubscription NotificationOnTaskAssigned {\n  taskAssigned {\n    id\n    title\n    description\n    priority\n    dueDate\n    createdAt\n  }\n}": types.NotificationOnNewNotificationDocument,
    "query OrderNegotiations($orderId: Int!) {\n  orderNegotiations(orderId: $orderId) {\n    id\n    orderId\n    senderId\n    senderRole\n    unitPrice\n    productionDays\n    quantity\n    currency\n    message\n    status\n    respondedAt\n    respondedBy\n    createdAt\n    sender {\n      id\n      name\n      email\n    }\n    responder {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation SendOrderOffer($input: SendOrderOfferInput!) {\n  sendOrderOffer(input: $input) {\n    id\n    orderId\n    senderId\n    senderRole\n    unitPrice\n    productionDays\n    quantity\n    currency\n    message\n    status\n    createdAt\n  }\n}\n\nmutation RespondToOrderOffer($input: RespondToOfferInput!) {\n  respondToOrderOffer(input: $input) {\n    id\n    status\n    respondedAt\n    respondedBy\n  }\n}": types.OrderNegotiationsDocument,
    "query BuyerOrders($skip: Int, $take: Int, $status: String, $search: String) {\n  orders(skip: $skip, take: $take, status: $status, search: $search) {\n    id\n    orderNumber\n    quantity\n    targetPrice\n    currency\n    deadline\n    status\n    notes\n    createdAt\n    updatedAt\n    collection {\n      id\n      name\n      modelCode\n      images\n      targetPrice\n      currency\n      company {\n        id\n        name\n      }\n    }\n    customer {\n      id\n      name\n      email\n    }\n    manufacturer {\n      id\n      name\n      email\n    }\n  }\n}\n\nquery BuyerOrderDetail($id: Int!) {\n  order(id: $id) {\n    id\n    orderNumber\n    quantity\n    targetPrice\n    currency\n    deadline\n    status\n    notes\n    unitPrice\n    productionDays\n    manufacturerResponse\n    actualProductionStart\n    createdAt\n    updatedAt\n    collection {\n      id\n      name\n      description\n      modelCode\n      season\n      gender\n      fit\n      trend\n      colors\n      sizeRange\n      fabricComposition\n      accessories\n      images\n      moq\n      targetPrice\n      currency\n      deadlineDays\n      notes\n      company {\n        id\n        name\n        email\n        phone\n        address\n        city\n        country\n        website\n      }\n    }\n    customer {\n      id\n      name\n      email\n      phone\n      company {\n        id\n        name\n        email\n        phone\n        address\n        city\n        country\n      }\n    }\n    manufacturer {\n      id\n      name\n      email\n      phone\n      company {\n        id\n        name\n        email\n        phone\n        address\n        city\n        country\n      }\n    }\n    productionTracking {\n      id\n      currentStage\n      overallStatus\n      progress\n      estimatedStartDate\n      estimatedEndDate\n      actualStartDate\n      actualEndDate\n      notes\n      customerApprovalStatus\n      customerApprovedAt\n      customerNote\n      revisionCount\n      stageUpdates {\n        id\n        stage\n        status\n        actualStartDate\n        actualEndDate\n        estimatedDays\n        notes\n        extraDays\n        isRevision\n        delayReason\n      }\n    }\n  }\n}\n\nmutation CustomerCounterOffer($id: Int!, $customerQuotedPrice: Float!, $customerQuoteDays: Int, $customerQuoteNote: String) {\n  updateOrder(\n    id: $id\n    customerQuotedPrice: $customerQuotedPrice\n    customerQuoteDays: $customerQuoteDays\n    customerQuoteNote: $customerQuoteNote\n    status: \"CUSTOMER_NEGOTIATING\"\n  ) {\n    id\n    orderNumber\n    status\n    customerQuotedPrice\n    customerQuoteDays\n    customerQuoteNote\n  }\n}\n\nmutation CustomerAcceptQuote($id: Int!) {\n  updateOrder(id: $id, status: \"CONFIRMED\") {\n    id\n    orderNumber\n    status\n  }\n}\n\nmutation CustomerRejectQuote($id: Int!) {\n  updateOrder(id: $id, status: \"REJECTED\") {\n    id\n    orderNumber\n    status\n  }\n}\n\nmutation ManufacturerAcceptCustomerQuote($orderId: Int!) {\n  manufacturerAcceptCustomerQuote(orderId: $orderId) {\n    id\n    orderNumber\n    status\n    unitPrice\n    productionDays\n  }\n}\n\nmutation CreateProductionPlan($orderId: Int!, $stagesJson: String!, $estimatedStartDate: DateTime, $notes: String) {\n  createProductionPlan(\n    orderId: $orderId\n    stagesJson: $stagesJson\n    estimatedStartDate: $estimatedStartDate\n    notes: $notes\n  ) {\n    id\n    currentStage\n    overallStatus\n    progress\n    estimatedStartDate\n    estimatedEndDate\n    notes\n    customerApprovalStatus\n  }\n}\n\nmutation UpdateProductionPlan($productionId: Int!, $stagesJson: String!, $notes: String) {\n  updateProductionPlan(\n    productionId: $productionId\n    stagesJson: $stagesJson\n    notes: $notes\n  ) {\n    id\n    currentStage\n    overallStatus\n    progress\n    estimatedStartDate\n    estimatedEndDate\n    notes\n    customerApprovalStatus\n    revisionCount\n  }\n}\n\nmutation SendProductionPlanForApproval($productionId: Int!) {\n  sendProductionPlanForApproval(productionId: $productionId) {\n    id\n    customerApprovalStatus\n    currentStage\n    overallStatus\n  }\n}\n\nmutation RespondToProductionPlan($productionId: Int!, $approved: Boolean!, $customerNote: String) {\n  respondToProductionPlan(\n    productionId: $productionId\n    approved: $approved\n    customerNote: $customerNote\n  ) {\n    id\n    customerApprovalStatus\n    customerApprovedAt\n    customerNote\n    currentStage\n    overallStatus\n  }\n}": types.BuyerOrdersDocument,
    "mutation CreateOrder($input: CreateOrderInput!) {\n  createOrder(input: $input) {\n    id\n    orderNumber\n    quantity\n    unitPrice\n    totalPrice\n    status\n    customerQuotedPrice\n    customerQuoteNote\n    collection {\n      id\n      name\n      modelCode\n      images\n    }\n    customer {\n      id\n      name\n      email\n    }\n    manufacture {\n      id\n      name\n      email\n    }\n    company {\n      id\n      name\n    }\n    createdAt\n  }\n}": types.CreateOrderDocument,
    "mutation SendQuote($id: Int!, $unitPrice: Float!, $productionDays: Int!, $note: String) {\n  sendQuote(\n    id: $id\n    unitPrice: $unitPrice\n    productionDays: $productionDays\n    note: $note\n  ) {\n    id\n    orderNumber\n    status\n    unitPrice\n    totalPrice\n    productionDays\n    manufacturerResponse\n    updatedAt\n  }\n}\n\nmutation AcceptQuote($id: Int!, $note: String) {\n  acceptQuote(id: $id, note: $note) {\n    id\n    orderNumber\n    status\n    customerNote\n    updatedAt\n  }\n}\n\nmutation RejectQuote($id: Int!, $reason: String!) {\n  rejectQuote(id: $id, reason: $reason) {\n    id\n    orderNumber\n    status\n    customerNote\n    updatedAt\n  }\n}": types.SendQuoteDocument,
    "query SettingsGetCurrentUser {\n  me {\n    id\n    name\n    firstName\n    lastName\n    email\n    phone\n    jobTitle\n    bio\n    avatar\n    customAvatar\n    socialLinks\n    emailNotifications\n    pushNotifications\n    language\n    timezone\n  }\n}\n\nquery SettingsGetMyCompany {\n  myCompany {\n    id\n    name\n    email\n    phone\n    description\n    website\n    address\n    city\n    country\n    logo\n    coverImage\n    type\n    socialLinks\n    brandColors\n    profileSlug\n    isPublicProfile\n  }\n}\n\nmutation SettingsUpdateUserProfile($name: String, $firstName: String, $lastName: String, $phone: String, $jobTitle: String, $bio: String, $avatar: String, $customAvatar: String, $socialLinks: String) {\n  updateProfile(\n    name: $name\n    firstName: $firstName\n    lastName: $lastName\n    phone: $phone\n    jobTitle: $jobTitle\n    bio: $bio\n    avatar: $avatar\n    customAvatar: $customAvatar\n    socialLinks: $socialLinks\n  ) {\n    id\n    name\n    firstName\n    lastName\n    phone\n    jobTitle\n    bio\n    avatar\n    customAvatar\n    socialLinks\n  }\n}\n\nmutation SettingsUpdateUserNotifications($emailNotifications: Boolean, $pushNotifications: Boolean) {\n  updateProfile(\n    emailNotifications: $emailNotifications\n    pushNotifications: $pushNotifications\n  ) {\n    id\n    emailNotifications\n    pushNotifications\n  }\n}\n\nmutation SettingsUpdateUserPreferences($language: String, $timezone: String) {\n  updateProfile(language: $language, timezone: $timezone) {\n    id\n    language\n    timezone\n  }\n}\n\nmutation SettingsUpdateCompanyInfo($id: Int!, $name: String, $email: String, $phone: String, $description: String, $website: String, $address: String, $city: String, $country: String, $logo: String, $coverImage: String, $socialLinks: String, $brandColors: String, $profileSlug: String, $isPublicProfile: Boolean) {\n  updateCompany(\n    id: $id\n    name: $name\n    email: $email\n    phone: $phone\n    description: $description\n    website: $website\n    address: $address\n    city: $city\n    country: $country\n    logo: $logo\n    coverImage: $coverImage\n    socialLinks: $socialLinks\n    brandColors: $brandColors\n    profileSlug: $profileSlug\n    isPublicProfile: $isPublicProfile\n  ) {\n    id\n    name\n    email\n    phone\n    description\n    website\n    address\n    city\n    country\n    logo\n    coverImage\n    socialLinks\n    brandColors\n    profileSlug\n    isPublicProfile\n  }\n}\n\nmutation SettingsResendVerificationEmail {\n  resendVerificationEmail\n}": types.SettingsGetCurrentUserDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateUser($id: Int!, $name: String!) {\n    updateUser(id: $id, name: $name) {\n      id\n      name\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateUser($id: Int!, $name: String!) {\n    updateUser(id: $id, name: $name) {\n      id\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetUser($id: Int!) {\n    user(id: $id) {\n      id\n      name\n      email\n    }\n  }\n"): (typeof documents)["\n  query GetUser($id: Int!) {\n    user(id: $id) {\n      id\n      name\n      email\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query AdminCategories($search: String, $skip: Int, $take: Int) {\n  categories(search: $search, skip: $skip, take: $take) {\n    id\n    name\n    description\n    createdAt\n    updatedAt\n    author {\n      id\n      name\n      email\n    }\n    company {\n      id\n      name\n    }\n    parentCategory {\n      id\n      name\n    }\n  }\n}\n\nquery AdminCategoriesCount($search: String) {\n  categoriesCount(search: $search)\n}\n\nquery AdminCategory($id: Int!) {\n  category(id: $id) {\n    id\n    name\n    description\n    createdAt\n    updatedAt\n    author {\n      id\n      name\n      email\n    }\n    company {\n      id\n      name\n    }\n    parentCategory {\n      id\n      name\n    }\n    subCategories {\n      id\n      name\n      description\n    }\n    collections {\n      id\n      name\n    }\n  }\n}\n\nquery AdminRootCategories {\n  rootCategories {\n    id\n    name\n    description\n    subCategories {\n      id\n      name\n      description\n    }\n  }\n}\n\nquery AdminCategoryTree {\n  categoryTree\n}\n\nmutation AdminCreateCategory($name: String!, $description: String, $parentCategoryId: Int) {\n  createCategory(\n    name: $name\n    description: $description\n    parentCategoryId: $parentCategoryId\n  ) {\n    id\n    name\n    description\n    createdAt\n    updatedAt\n    parentCategory {\n      id\n      name\n    }\n  }\n}\n\nmutation AdminUpdateCategory($id: Int!, $name: String, $description: String) {\n  updateCategory(id: $id, name: $name, description: $description) {\n    id\n    name\n    description\n    updatedAt\n  }\n}\n\nmutation AdminDeleteCategory($id: Int!) {\n  deleteCategory(id: $id)\n}"): (typeof documents)["query AdminCategories($search: String, $skip: Int, $take: Int) {\n  categories(search: $search, skip: $skip, take: $take) {\n    id\n    name\n    description\n    createdAt\n    updatedAt\n    author {\n      id\n      name\n      email\n    }\n    company {\n      id\n      name\n    }\n    parentCategory {\n      id\n      name\n    }\n  }\n}\n\nquery AdminCategoriesCount($search: String) {\n  categoriesCount(search: $search)\n}\n\nquery AdminCategory($id: Int!) {\n  category(id: $id) {\n    id\n    name\n    description\n    createdAt\n    updatedAt\n    author {\n      id\n      name\n      email\n    }\n    company {\n      id\n      name\n    }\n    parentCategory {\n      id\n      name\n    }\n    subCategories {\n      id\n      name\n      description\n    }\n    collections {\n      id\n      name\n    }\n  }\n}\n\nquery AdminRootCategories {\n  rootCategories {\n    id\n    name\n    description\n    subCategories {\n      id\n      name\n      description\n    }\n  }\n}\n\nquery AdminCategoryTree {\n  categoryTree\n}\n\nmutation AdminCreateCategory($name: String!, $description: String, $parentCategoryId: Int) {\n  createCategory(\n    name: $name\n    description: $description\n    parentCategoryId: $parentCategoryId\n  ) {\n    id\n    name\n    description\n    createdAt\n    updatedAt\n    parentCategory {\n      id\n      name\n    }\n  }\n}\n\nmutation AdminUpdateCategory($id: Int!, $name: String, $description: String) {\n  updateCategory(id: $id, name: $name, description: $description) {\n    id\n    name\n    description\n    updatedAt\n  }\n}\n\nmutation AdminDeleteCategory($id: Int!) {\n  deleteCategory(id: $id)\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query AdminCompaniesList($skip: Int, $take: Int, $search: String, $type: String, $includeInactive: Boolean) {\n  companies(\n    skip: $skip\n    take: $take\n    search: $search\n    type: $type\n    includeInactive: $includeInactive\n  ) {\n    id\n    name\n    email\n    phone\n    type\n    description\n    website\n    address\n    city\n    country\n    logo\n    isActive\n    subscriptionPlan\n    subscriptionStatus\n    currentUsers\n    currentSamples\n    currentOrders\n    maxUsers\n    maxSamples\n    createdAt\n    updatedAt\n    owner {\n      id\n      name\n      email\n    }\n  }\n}\n\nquery AdminCompanyDetail($id: Int!) {\n  company(id: $id) {\n    id\n    name\n    email\n    phone\n    type\n    description\n    website\n    address\n    city\n    country\n    logo\n    coverImage\n    profileSlug\n    isPublicProfile\n    isActive\n    subscriptionPlan\n    subscriptionStatus\n    maxUsers\n    maxSamples\n    maxOrders\n    maxCollections\n    maxStorageGB\n    currentUsers\n    currentSamples\n    currentOrders\n    currentCollections\n    currentStorageGB\n    createdAt\n    updatedAt\n    owner {\n      id\n      name\n      email\n      phone\n    }\n    employees {\n      id\n      name\n      email\n      role\n      department\n      isActive\n      createdAt\n    }\n  }\n}\n\nquery AdminCompanyStats {\n  companies {\n    id\n    type\n    isActive\n    subscriptionPlan\n    currentUsers\n    currentSamples\n    currentOrders\n  }\n}\n\nmutation AdminUpdateCompany($id: Int!, $name: String, $email: String, $phone: String, $description: String, $website: String, $address: String, $city: String, $country: String, $logo: String, $subscriptionPlan: String, $subscriptionStatus: String) {\n  updateCompany(\n    id: $id\n    name: $name\n    email: $email\n    phone: $phone\n    description: $description\n    website: $website\n    address: $address\n    city: $city\n    country: $country\n    logo: $logo\n    subscriptionPlan: $subscriptionPlan\n    subscriptionStatus: $subscriptionStatus\n  ) {\n    id\n    name\n    email\n    type\n    isActive\n    subscriptionPlan\n    subscriptionStatus\n    updatedAt\n  }\n}\n\nmutation AdminToggleCompanyStatus($id: Int!) {\n  toggleCompanyStatus(id: $id) {\n    id\n    isActive\n  }\n}\n\nmutation AdminDeleteCompany($id: Int!, $hardDelete: Boolean) {\n  deleteCompany(id: $id, hardDelete: $hardDelete)\n}\n\nmutation AdminCreateCompany($name: String!, $email: String!, $phone: String, $type: String!) {\n  createCompany(name: $name, email: $email, phone: $phone, type: $type) {\n    id\n    name\n    email\n    type\n    phone\n    isActive\n    createdAt\n  }\n}"): (typeof documents)["query AdminCompaniesList($skip: Int, $take: Int, $search: String, $type: String, $includeInactive: Boolean) {\n  companies(\n    skip: $skip\n    take: $take\n    search: $search\n    type: $type\n    includeInactive: $includeInactive\n  ) {\n    id\n    name\n    email\n    phone\n    type\n    description\n    website\n    address\n    city\n    country\n    logo\n    isActive\n    subscriptionPlan\n    subscriptionStatus\n    currentUsers\n    currentSamples\n    currentOrders\n    maxUsers\n    maxSamples\n    createdAt\n    updatedAt\n    owner {\n      id\n      name\n      email\n    }\n  }\n}\n\nquery AdminCompanyDetail($id: Int!) {\n  company(id: $id) {\n    id\n    name\n    email\n    phone\n    type\n    description\n    website\n    address\n    city\n    country\n    logo\n    coverImage\n    profileSlug\n    isPublicProfile\n    isActive\n    subscriptionPlan\n    subscriptionStatus\n    maxUsers\n    maxSamples\n    maxOrders\n    maxCollections\n    maxStorageGB\n    currentUsers\n    currentSamples\n    currentOrders\n    currentCollections\n    currentStorageGB\n    createdAt\n    updatedAt\n    owner {\n      id\n      name\n      email\n      phone\n    }\n    employees {\n      id\n      name\n      email\n      role\n      department\n      isActive\n      createdAt\n    }\n  }\n}\n\nquery AdminCompanyStats {\n  companies {\n    id\n    type\n    isActive\n    subscriptionPlan\n    currentUsers\n    currentSamples\n    currentOrders\n  }\n}\n\nmutation AdminUpdateCompany($id: Int!, $name: String, $email: String, $phone: String, $description: String, $website: String, $address: String, $city: String, $country: String, $logo: String, $subscriptionPlan: String, $subscriptionStatus: String) {\n  updateCompany(\n    id: $id\n    name: $name\n    email: $email\n    phone: $phone\n    description: $description\n    website: $website\n    address: $address\n    city: $city\n    country: $country\n    logo: $logo\n    subscriptionPlan: $subscriptionPlan\n    subscriptionStatus: $subscriptionStatus\n  ) {\n    id\n    name\n    email\n    type\n    isActive\n    subscriptionPlan\n    subscriptionStatus\n    updatedAt\n  }\n}\n\nmutation AdminToggleCompanyStatus($id: Int!) {\n  toggleCompanyStatus(id: $id) {\n    id\n    isActive\n  }\n}\n\nmutation AdminDeleteCompany($id: Int!, $hardDelete: Boolean) {\n  deleteCompany(id: $id, hardDelete: $hardDelete)\n}\n\nmutation AdminCreateCompany($name: String!, $email: String!, $phone: String, $type: String!) {\n  createCompany(name: $name, email: $email, phone: $phone, type: $type) {\n    id\n    name\n    email\n    type\n    phone\n    isActive\n    createdAt\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query AdminStandardCategories($search: String, $level: String, $isActive: Boolean, $isPublic: Boolean, $skip: Int, $take: Int) {\n  adminStandardCategories(\n    search: $search\n    level: $level\n    isActive: $isActive\n    isPublic: $isPublic\n    skip: $skip\n    take: $take\n  ) {\n    id\n    code\n    name\n    description\n    level\n    order\n    icon\n    image\n    isActive\n    isPublic\n    keywords\n    tags\n    createdAt\n    updatedAt\n    createdBy {\n      id\n      name\n      email\n    }\n    parentCategory {\n      id\n      code\n      name\n    }\n    subCategories {\n      id\n      code\n      name\n      level\n    }\n  }\n}\n\nquery AdminStandardCategoriesCount($search: String, $level: String, $isActive: Boolean, $isPublic: Boolean) {\n  adminStandardCategoriesCount(\n    search: $search\n    level: $level\n    isActive: $isActive\n    isPublic: $isPublic\n  )\n}\n\nquery AdminStandardCategory($id: Int!) {\n  adminStandardCategory(id: $id) {\n    id\n    code\n    name\n    description\n    level\n    order\n    icon\n    image\n    isActive\n    isPublic\n    keywords\n    tags\n    createdAt\n    updatedAt\n    createdBy {\n      id\n      name\n      email\n    }\n    parentCategory {\n      id\n      code\n      name\n      level\n    }\n    subCategories {\n      id\n      code\n      name\n      description\n      level\n      order\n      isActive\n    }\n  }\n}\n\nquery AdminRootStandardCategories {\n  adminRootStandardCategories {\n    id\n    code\n    name\n    description\n    level\n    order\n    icon\n    image\n    isActive\n    subCategories {\n      id\n      code\n      name\n      level\n      order\n    }\n  }\n}\n\nquery AdminStandardCategoryTree {\n  adminStandardCategoryTree\n}\n\nquery AdminStandardCategoryStats {\n  adminStandardCategoryStats\n}\n\nmutation AdminCreateStandardCategory($input: CreateStandardCategoryInput!) {\n  createStandardCategory(input: $input) {\n    id\n    code\n    name\n    description\n    level\n    order\n    icon\n    image\n    isActive\n    isPublic\n    createdAt\n    parentCategory {\n      id\n      code\n      name\n    }\n  }\n}\n\nmutation AdminUpdateStandardCategory($id: Int!, $input: UpdateStandardCategoryInput!) {\n  updateStandardCategory(id: $id, input: $input) {\n    id\n    code\n    name\n    description\n    level\n    order\n    icon\n    image\n    isActive\n    isPublic\n    updatedAt\n    parentCategory {\n      id\n      code\n      name\n    }\n  }\n}\n\nmutation AdminDeleteStandardCategory($id: Int!) {\n  deleteStandardCategory(id: $id)\n}\n\nmutation AdminToggleStandardCategoryStatus($id: Int!) {\n  toggleStandardCategoryStatus(id: $id) {\n    id\n    isActive\n    updatedAt\n  }\n}\n\nmutation AdminUpdateStandardCategoryOrder($updates: [CategoryOrderUpdate!]!) {\n  updateStandardCategoryOrder(updates: $updates)\n}"): (typeof documents)["query AdminStandardCategories($search: String, $level: String, $isActive: Boolean, $isPublic: Boolean, $skip: Int, $take: Int) {\n  adminStandardCategories(\n    search: $search\n    level: $level\n    isActive: $isActive\n    isPublic: $isPublic\n    skip: $skip\n    take: $take\n  ) {\n    id\n    code\n    name\n    description\n    level\n    order\n    icon\n    image\n    isActive\n    isPublic\n    keywords\n    tags\n    createdAt\n    updatedAt\n    createdBy {\n      id\n      name\n      email\n    }\n    parentCategory {\n      id\n      code\n      name\n    }\n    subCategories {\n      id\n      code\n      name\n      level\n    }\n  }\n}\n\nquery AdminStandardCategoriesCount($search: String, $level: String, $isActive: Boolean, $isPublic: Boolean) {\n  adminStandardCategoriesCount(\n    search: $search\n    level: $level\n    isActive: $isActive\n    isPublic: $isPublic\n  )\n}\n\nquery AdminStandardCategory($id: Int!) {\n  adminStandardCategory(id: $id) {\n    id\n    code\n    name\n    description\n    level\n    order\n    icon\n    image\n    isActive\n    isPublic\n    keywords\n    tags\n    createdAt\n    updatedAt\n    createdBy {\n      id\n      name\n      email\n    }\n    parentCategory {\n      id\n      code\n      name\n      level\n    }\n    subCategories {\n      id\n      code\n      name\n      description\n      level\n      order\n      isActive\n    }\n  }\n}\n\nquery AdminRootStandardCategories {\n  adminRootStandardCategories {\n    id\n    code\n    name\n    description\n    level\n    order\n    icon\n    image\n    isActive\n    subCategories {\n      id\n      code\n      name\n      level\n      order\n    }\n  }\n}\n\nquery AdminStandardCategoryTree {\n  adminStandardCategoryTree\n}\n\nquery AdminStandardCategoryStats {\n  adminStandardCategoryStats\n}\n\nmutation AdminCreateStandardCategory($input: CreateStandardCategoryInput!) {\n  createStandardCategory(input: $input) {\n    id\n    code\n    name\n    description\n    level\n    order\n    icon\n    image\n    isActive\n    isPublic\n    createdAt\n    parentCategory {\n      id\n      code\n      name\n    }\n  }\n}\n\nmutation AdminUpdateStandardCategory($id: Int!, $input: UpdateStandardCategoryInput!) {\n  updateStandardCategory(id: $id, input: $input) {\n    id\n    code\n    name\n    description\n    level\n    order\n    icon\n    image\n    isActive\n    isPublic\n    updatedAt\n    parentCategory {\n      id\n      code\n      name\n    }\n  }\n}\n\nmutation AdminDeleteStandardCategory($id: Int!) {\n  deleteStandardCategory(id: $id)\n}\n\nmutation AdminToggleStandardCategoryStatus($id: Int!) {\n  toggleStandardCategoryStatus(id: $id) {\n    id\n    isActive\n    updatedAt\n  }\n}\n\nmutation AdminUpdateStandardCategoryOrder($updates: [CategoryOrderUpdate!]!) {\n  updateStandardCategoryOrder(updates: $updates)\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query AdminUsers($skip: Int, $take: Int, $role: String, $search: String) {\n  users(skip: $skip, take: $take, role: $role, search: $search) {\n    id\n    email\n    name\n    firstName\n    lastName\n    phone\n    role\n    department\n    jobTitle\n    isActive\n    isPendingApproval\n    createdAt\n    updatedAt\n    company {\n      id\n      name\n      type\n    }\n  }\n}\n\nquery AdminUsersCountByRole {\n  usersCountByRole\n}\n\nquery AdminUser($id: Int!) {\n  user(id: $id) {\n    id\n    email\n    name\n    firstName\n    lastName\n    phone\n    role\n    department\n    jobTitle\n    isActive\n    isPendingApproval\n    avatar\n    customAvatar\n    bio\n    socialLinks\n    emailNotifications\n    pushNotifications\n    language\n    timezone\n    createdAt\n    updatedAt\n    company {\n      id\n      name\n      type\n      email\n    }\n  }\n}\n\nquery AdminUserActivity($userId: Int!) {\n  userActivity(userId: $userId)\n}\n\nquery AdminCompanies($take: Int, $search: String) {\n  companies(take: $take, search: $search) {\n    id\n    name\n    type\n    email\n  }\n}\n\nmutation AdminCreateUser($email: String!, $password: String!, $name: String!, $role: String!, $companyId: Int) {\n  createUserByAdmin(\n    email: $email\n    password: $password\n    name: $name\n    role: $role\n    companyId: $companyId\n  ) {\n    id\n    email\n    name\n    role\n    createdAt\n    company {\n      id\n      name\n    }\n  }\n}\n\nmutation AdminUpdateUser($id: Int!, $name: String, $email: String, $phone: String, $password: String, $role: String, $companyId: Int, $department: String, $jobTitle: String) {\n  updateUser(\n    id: $id\n    name: $name\n    email: $email\n    phone: $phone\n    password: $password\n    role: $role\n    companyId: $companyId\n    department: $department\n    jobTitle: $jobTitle\n  ) {\n    id\n    name\n    email\n    phone\n    role\n    companyId\n    department\n    jobTitle\n    updatedAt\n  }\n}\n\nmutation AdminDeleteUser($id: Int!) {\n  deleteUserByAdmin(id: $id)\n}\n\nmutation AdminResetUserPassword($userId: Int!, $newPassword: String!) {\n  resetUserPassword(userId: $userId, newPassword: $newPassword) {\n    id\n    email\n    name\n  }\n}\n\nmutation AdminUpdateUserRole($userId: Int!, $role: String!) {\n  updateUserRole(userId: $userId, role: $role) {\n    id\n    email\n    name\n    role\n  }\n}\n\nmutation AdminToggleUserStatus($userId: Int!, $isActive: Boolean!) {\n  toggleUserStatusByAdmin(userId: $userId, isActive: $isActive) {\n    id\n    email\n    name\n    isActive\n  }\n}\n\nmutation AdminUpdateUserCompany($userId: Int!, $companyId: Int) {\n  updateUserCompanyByAdmin(userId: $userId, companyId: $companyId) {\n    id\n    email\n    name\n    company {\n      id\n      name\n    }\n  }\n}\n\nmutation AdminBulkToggleUserStatus($userIds: [Int!]!, $isActive: Boolean!) {\n  bulkToggleUserStatus(userIds: $userIds, isActive: $isActive)\n}\n\nmutation AdminBulkDeleteUsers($userIds: [Int!]!) {\n  bulkDeleteUsersByAdmin(userIds: $userIds)\n}"): (typeof documents)["query AdminUsers($skip: Int, $take: Int, $role: String, $search: String) {\n  users(skip: $skip, take: $take, role: $role, search: $search) {\n    id\n    email\n    name\n    firstName\n    lastName\n    phone\n    role\n    department\n    jobTitle\n    isActive\n    isPendingApproval\n    createdAt\n    updatedAt\n    company {\n      id\n      name\n      type\n    }\n  }\n}\n\nquery AdminUsersCountByRole {\n  usersCountByRole\n}\n\nquery AdminUser($id: Int!) {\n  user(id: $id) {\n    id\n    email\n    name\n    firstName\n    lastName\n    phone\n    role\n    department\n    jobTitle\n    isActive\n    isPendingApproval\n    avatar\n    customAvatar\n    bio\n    socialLinks\n    emailNotifications\n    pushNotifications\n    language\n    timezone\n    createdAt\n    updatedAt\n    company {\n      id\n      name\n      type\n      email\n    }\n  }\n}\n\nquery AdminUserActivity($userId: Int!) {\n  userActivity(userId: $userId)\n}\n\nquery AdminCompanies($take: Int, $search: String) {\n  companies(take: $take, search: $search) {\n    id\n    name\n    type\n    email\n  }\n}\n\nmutation AdminCreateUser($email: String!, $password: String!, $name: String!, $role: String!, $companyId: Int) {\n  createUserByAdmin(\n    email: $email\n    password: $password\n    name: $name\n    role: $role\n    companyId: $companyId\n  ) {\n    id\n    email\n    name\n    role\n    createdAt\n    company {\n      id\n      name\n    }\n  }\n}\n\nmutation AdminUpdateUser($id: Int!, $name: String, $email: String, $phone: String, $password: String, $role: String, $companyId: Int, $department: String, $jobTitle: String) {\n  updateUser(\n    id: $id\n    name: $name\n    email: $email\n    phone: $phone\n    password: $password\n    role: $role\n    companyId: $companyId\n    department: $department\n    jobTitle: $jobTitle\n  ) {\n    id\n    name\n    email\n    phone\n    role\n    companyId\n    department\n    jobTitle\n    updatedAt\n  }\n}\n\nmutation AdminDeleteUser($id: Int!) {\n  deleteUserByAdmin(id: $id)\n}\n\nmutation AdminResetUserPassword($userId: Int!, $newPassword: String!) {\n  resetUserPassword(userId: $userId, newPassword: $newPassword) {\n    id\n    email\n    name\n  }\n}\n\nmutation AdminUpdateUserRole($userId: Int!, $role: String!) {\n  updateUserRole(userId: $userId, role: $role) {\n    id\n    email\n    name\n    role\n  }\n}\n\nmutation AdminToggleUserStatus($userId: Int!, $isActive: Boolean!) {\n  toggleUserStatusByAdmin(userId: $userId, isActive: $isActive) {\n    id\n    email\n    name\n    isActive\n  }\n}\n\nmutation AdminUpdateUserCompany($userId: Int!, $companyId: Int) {\n  updateUserCompanyByAdmin(userId: $userId, companyId: $companyId) {\n    id\n    email\n    name\n    company {\n      id\n      name\n    }\n  }\n}\n\nmutation AdminBulkToggleUserStatus($userIds: [Int!]!, $isActive: Boolean!) {\n  bulkToggleUserStatus(userIds: $userIds, isActive: $isActive)\n}\n\nmutation AdminBulkDeleteUsers($userIds: [Int!]!) {\n  bulkDeleteUsersByAdmin(userIds: $userIds)\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation AuthRequestPasswordReset($email: String!) {\n  requestPasswordReset(email: $email)\n}\n\nmutation AuthResetPassword($token: String!, $newPassword: String!) {\n  resetPassword(token: $token, newPassword: $newPassword)\n}\n\nmutation AuthVerifyEmail($token: String!) {\n  verifyEmail(token: $token)\n}\n\nmutation AuthResendVerificationEmail {\n  resendVerificationEmail\n}\n\nmutation AuthRefreshToken {\n  refreshToken\n}"): (typeof documents)["mutation AuthRequestPasswordReset($email: String!) {\n  requestPasswordReset(email: $email)\n}\n\nmutation AuthResetPassword($token: String!, $newPassword: String!) {\n  resetPassword(token: $token, newPassword: $newPassword)\n}\n\nmutation AuthVerifyEmail($token: String!) {\n  verifyEmail(token: $token)\n}\n\nmutation AuthResendVerificationEmail {\n  resendVerificationEmail\n}\n\nmutation AuthRefreshToken {\n  refreshToken\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query CollectionsList($skip: Int, $take: Int, $search: String, $featured: Boolean, $categoryId: Int, $season: String, $gender: String) {\n  collections(\n    skip: $skip\n    take: $take\n    search: $search\n    featured: $featured\n    categoryId: $categoryId\n    season: $season\n    gender: $gender\n  ) {\n    id\n    name\n    description\n    modelCode\n    season\n    gender\n    images\n    price\n    isFeatured\n    isActive\n    targetPrice\n    currency\n    moq\n    targetLeadTime\n    deadline\n    deadlineDays\n    fit\n    trend\n    colors\n    sizeRange\n    fabricComposition\n    accessories\n    fabricDetails {\n      id\n      name\n      iconValue\n      certifications {\n        id\n        name\n        iconValue\n        data\n      }\n    }\n    accessoryDetails {\n      id\n      name\n      iconValue\n      certifications {\n        id\n        name\n        iconValue\n        data\n      }\n    }\n    viewCount\n    likesCount\n    createdAt\n    updatedAt\n    author {\n      id\n      name\n    }\n    category {\n      id\n      name\n    }\n    company {\n      id\n      name\n    }\n  }\n}\n\nquery CollectionsDetail($id: Int!) {\n  collection(id: $id) {\n    id\n    name\n    description\n    modelCode\n    slug\n    season\n    gender\n    fit\n    trend\n    colors\n    sizeGroups\n    sizeRange\n    measurementChart\n    fabricComposition\n    accessories\n    images\n    techPack\n    fabricDetails {\n      id\n      name\n      description\n      imageUrl\n      iconValue\n      data\n      tags\n      certifications {\n        id\n        name\n        category\n        description\n        imageUrl\n        iconValue\n      }\n    }\n    accessoryDetails {\n      id\n      name\n      description\n      imageUrl\n      iconValue\n      data\n      tags\n      certifications {\n        id\n        name\n        category\n        description\n        imageUrl\n        iconValue\n      }\n    }\n    moq\n    targetPrice\n    currency\n    targetLeadTime\n    deadline\n    deadlineDays\n    notes\n    isActive\n    isFeatured\n    price\n    sku\n    stock\n    viewCount\n    shareCount\n    likesCount\n    lastViewedAt\n    createdAt\n    updatedAt\n    author {\n      id\n      name\n    }\n    category {\n      id\n      name\n    }\n    companyCategory {\n      id\n      name\n    }\n    company {\n      id\n      name\n      type\n    }\n    certifications {\n      id\n      name\n      category\n      description\n      imageUrl\n      iconValue\n    }\n    samples {\n      id\n      sampleNumber\n      name\n      status\n      images\n    }\n    orders {\n      id\n      orderNumber\n      quantity\n      status\n    }\n  }\n}\n\nquery CollectionsFeatured($skip: Int, $take: Int) {\n  featuredCollections(skip: $skip, take: $take) {\n    id\n    name\n    modelCode\n    description\n    season\n    gender\n    images\n    company {\n      id\n      name\n    }\n    createdAt\n  }\n}\n\nmutation CollectionsCreate($name: String!, $description: String, $modelCode: String, $season: String, $gender: String, $fit: String, $trend: String, $colors: String, $sizeRange: String, $fabricComposition: String, $accessories: String, $images: String, $moq: Int, $targetPrice: Float, $currency: String, $deadlineDays: Int, $notes: String) {\n  createCollection(\n    name: $name\n    description: $description\n    modelCode: $modelCode\n    season: $season\n    gender: $gender\n    fit: $fit\n    trend: $trend\n    colors: $colors\n    sizeRange: $sizeRange\n    fabricComposition: $fabricComposition\n    accessories: $accessories\n    images: $images\n    moq: $moq\n    targetPrice: $targetPrice\n    currency: $currency\n    deadlineDays: $deadlineDays\n    notes: $notes\n  ) {\n    id\n    name\n    modelCode\n    description\n    season\n    gender\n    fit\n    trend\n    colors\n    sizeRange\n    fabricComposition\n    accessories\n    images\n    moq\n    targetPrice\n    currency\n    deadline\n    deadlineDays\n    notes\n    createdAt\n    updatedAt\n  }\n}\n\nmutation CollectionsUpdate($id: Int!, $name: String, $description: String, $isFeatured: Boolean, $season: String, $gender: String, $fit: String, $trend: String, $colors: String, $sizeGroups: String, $sizeRange: String, $measurementChart: String, $fabricComposition: String, $accessories: String, $techPack: String, $moq: Int, $targetPrice: Float, $currency: String, $targetLeadTime: Int, $deadline: DateTime, $deadlineDays: Int, $notes: String, $images: String, $productionSchedule: String) {\n  updateCollection(\n    id: $id\n    name: $name\n    description: $description\n    isFeatured: $isFeatured\n    season: $season\n    gender: $gender\n    fit: $fit\n    trend: $trend\n    colors: $colors\n    sizeGroups: $sizeGroups\n    sizeRange: $sizeRange\n    measurementChart: $measurementChart\n    fabricComposition: $fabricComposition\n    accessories: $accessories\n    techPack: $techPack\n    moq: $moq\n    targetPrice: $targetPrice\n    currency: $currency\n    targetLeadTime: $targetLeadTime\n    deadline: $deadline\n    deadlineDays: $deadlineDays\n    notes: $notes\n    images: $images\n    productionSchedule: $productionSchedule\n  ) {\n    id\n    name\n    description\n    modelCode\n    season\n    gender\n    fit\n    trend\n    colors\n    sizeGroups\n    sizeRange\n    fabricComposition\n    accessories\n    images\n    moq\n    targetPrice\n    currency\n    targetLeadTime\n    deadline\n    deadlineDays\n    notes\n    isFeatured\n    updatedAt\n  }\n}\n\nmutation CollectionsDelete($id: Int!) {\n  deleteCollection(id: $id)\n}\n\nmutation CollectionsPublish($id: Int!) {\n  publishCollection(id: $id)\n}\n\nmutation CollectionsToggleLike($id: Int!) {\n  toggleCollectionLike(id: $id) {\n    id\n    likesCount\n  }\n}\n\nmutation CollectionsIncrementView($id: Int!) {\n  incrementCollectionView(id: $id) {\n    id\n    viewCount\n    lastViewedAt\n  }\n}"): (typeof documents)["query CollectionsList($skip: Int, $take: Int, $search: String, $featured: Boolean, $categoryId: Int, $season: String, $gender: String) {\n  collections(\n    skip: $skip\n    take: $take\n    search: $search\n    featured: $featured\n    categoryId: $categoryId\n    season: $season\n    gender: $gender\n  ) {\n    id\n    name\n    description\n    modelCode\n    season\n    gender\n    images\n    price\n    isFeatured\n    isActive\n    targetPrice\n    currency\n    moq\n    targetLeadTime\n    deadline\n    deadlineDays\n    fit\n    trend\n    colors\n    sizeRange\n    fabricComposition\n    accessories\n    fabricDetails {\n      id\n      name\n      iconValue\n      certifications {\n        id\n        name\n        iconValue\n        data\n      }\n    }\n    accessoryDetails {\n      id\n      name\n      iconValue\n      certifications {\n        id\n        name\n        iconValue\n        data\n      }\n    }\n    viewCount\n    likesCount\n    createdAt\n    updatedAt\n    author {\n      id\n      name\n    }\n    category {\n      id\n      name\n    }\n    company {\n      id\n      name\n    }\n  }\n}\n\nquery CollectionsDetail($id: Int!) {\n  collection(id: $id) {\n    id\n    name\n    description\n    modelCode\n    slug\n    season\n    gender\n    fit\n    trend\n    colors\n    sizeGroups\n    sizeRange\n    measurementChart\n    fabricComposition\n    accessories\n    images\n    techPack\n    fabricDetails {\n      id\n      name\n      description\n      imageUrl\n      iconValue\n      data\n      tags\n      certifications {\n        id\n        name\n        category\n        description\n        imageUrl\n        iconValue\n      }\n    }\n    accessoryDetails {\n      id\n      name\n      description\n      imageUrl\n      iconValue\n      data\n      tags\n      certifications {\n        id\n        name\n        category\n        description\n        imageUrl\n        iconValue\n      }\n    }\n    moq\n    targetPrice\n    currency\n    targetLeadTime\n    deadline\n    deadlineDays\n    notes\n    isActive\n    isFeatured\n    price\n    sku\n    stock\n    viewCount\n    shareCount\n    likesCount\n    lastViewedAt\n    createdAt\n    updatedAt\n    author {\n      id\n      name\n    }\n    category {\n      id\n      name\n    }\n    companyCategory {\n      id\n      name\n    }\n    company {\n      id\n      name\n      type\n    }\n    certifications {\n      id\n      name\n      category\n      description\n      imageUrl\n      iconValue\n    }\n    samples {\n      id\n      sampleNumber\n      name\n      status\n      images\n    }\n    orders {\n      id\n      orderNumber\n      quantity\n      status\n    }\n  }\n}\n\nquery CollectionsFeatured($skip: Int, $take: Int) {\n  featuredCollections(skip: $skip, take: $take) {\n    id\n    name\n    modelCode\n    description\n    season\n    gender\n    images\n    company {\n      id\n      name\n    }\n    createdAt\n  }\n}\n\nmutation CollectionsCreate($name: String!, $description: String, $modelCode: String, $season: String, $gender: String, $fit: String, $trend: String, $colors: String, $sizeRange: String, $fabricComposition: String, $accessories: String, $images: String, $moq: Int, $targetPrice: Float, $currency: String, $deadlineDays: Int, $notes: String) {\n  createCollection(\n    name: $name\n    description: $description\n    modelCode: $modelCode\n    season: $season\n    gender: $gender\n    fit: $fit\n    trend: $trend\n    colors: $colors\n    sizeRange: $sizeRange\n    fabricComposition: $fabricComposition\n    accessories: $accessories\n    images: $images\n    moq: $moq\n    targetPrice: $targetPrice\n    currency: $currency\n    deadlineDays: $deadlineDays\n    notes: $notes\n  ) {\n    id\n    name\n    modelCode\n    description\n    season\n    gender\n    fit\n    trend\n    colors\n    sizeRange\n    fabricComposition\n    accessories\n    images\n    moq\n    targetPrice\n    currency\n    deadline\n    deadlineDays\n    notes\n    createdAt\n    updatedAt\n  }\n}\n\nmutation CollectionsUpdate($id: Int!, $name: String, $description: String, $isFeatured: Boolean, $season: String, $gender: String, $fit: String, $trend: String, $colors: String, $sizeGroups: String, $sizeRange: String, $measurementChart: String, $fabricComposition: String, $accessories: String, $techPack: String, $moq: Int, $targetPrice: Float, $currency: String, $targetLeadTime: Int, $deadline: DateTime, $deadlineDays: Int, $notes: String, $images: String, $productionSchedule: String) {\n  updateCollection(\n    id: $id\n    name: $name\n    description: $description\n    isFeatured: $isFeatured\n    season: $season\n    gender: $gender\n    fit: $fit\n    trend: $trend\n    colors: $colors\n    sizeGroups: $sizeGroups\n    sizeRange: $sizeRange\n    measurementChart: $measurementChart\n    fabricComposition: $fabricComposition\n    accessories: $accessories\n    techPack: $techPack\n    moq: $moq\n    targetPrice: $targetPrice\n    currency: $currency\n    targetLeadTime: $targetLeadTime\n    deadline: $deadline\n    deadlineDays: $deadlineDays\n    notes: $notes\n    images: $images\n    productionSchedule: $productionSchedule\n  ) {\n    id\n    name\n    description\n    modelCode\n    season\n    gender\n    fit\n    trend\n    colors\n    sizeGroups\n    sizeRange\n    fabricComposition\n    accessories\n    images\n    moq\n    targetPrice\n    currency\n    targetLeadTime\n    deadline\n    deadlineDays\n    notes\n    isFeatured\n    updatedAt\n  }\n}\n\nmutation CollectionsDelete($id: Int!) {\n  deleteCollection(id: $id)\n}\n\nmutation CollectionsPublish($id: Int!) {\n  publishCollection(id: $id)\n}\n\nmutation CollectionsToggleLike($id: Int!) {\n  toggleCollectionLike(id: $id) {\n    id\n    likesCount\n  }\n}\n\nmutation CollectionsIncrementView($id: Int!) {\n  incrementCollectionView(id: $id) {\n    id\n    viewCount\n    lastViewedAt\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query DashboardGetMyCompany {\n  myCompany {\n    id\n    name\n    email\n    phone\n    website\n    address\n  }\n}\n\nmutation DashboardResendVerificationEmail {\n  resendVerificationEmail\n}"): (typeof documents)["query DashboardGetMyCompany {\n  myCompany {\n    id\n    name\n    email\n    phone\n    website\n    address\n  }\n}\n\nmutation DashboardResendVerificationEmail {\n  resendVerificationEmail\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query DashboardPlatformStandards($category: String) {\n  platformStandards(category: $category) {\n    id\n    category\n    scope\n    code\n    name\n    description\n    imageUrl\n    data\n    tags\n    isActive\n    isPopular\n    createdAt\n    updatedAt\n    company {\n      id\n      name\n    }\n    createdBy {\n      id\n      name\n      email\n    }\n    certifications {\n      id\n      code\n      name\n      data\n      tags\n      iconValue\n      isActive\n      createdAt\n    }\n  }\n}\n\nquery DashboardMyCompanyLibrary($category: String) {\n  myCompanyLibrary(category: $category) {\n    id\n    category\n    scope\n    code\n    name\n    description\n    imageUrl\n    data\n    tags\n    isActive\n    isPopular\n    createdAt\n    updatedAt\n    standardItem {\n      id\n      name\n      code\n    }\n    createdBy {\n      id\n      name\n      email\n    }\n    certifications {\n      id\n      code\n      name\n      data\n      tags\n      iconValue\n      isActive\n      createdAt\n    }\n  }\n}\n\nquery DashboardLibraryItems($filter: LibraryFilterInput, $limit: Int, $offset: Int) {\n  libraryItems(filter: $filter, limit: $limit, offset: $offset) {\n    id\n    category\n    scope\n    code\n    name\n    description\n    imageUrl\n    data\n    tags\n    isActive\n    isPopular\n    createdAt\n    updatedAt\n    company {\n      id\n      name\n    }\n    standardItem {\n      id\n      name\n      code\n    }\n    createdBy {\n      id\n      name\n      email\n    }\n    certifications {\n      id\n      code\n      name\n      data\n      tags\n      iconValue\n      isActive\n      createdAt\n    }\n  }\n}\n\nquery DashboardLibraryItem($id: Int!) {\n  libraryItem(id: $id) {\n    id\n    category\n    scope\n    code\n    name\n    description\n    imageUrl\n    data\n    tags\n    isActive\n    isPopular\n    createdAt\n    updatedAt\n    company {\n      id\n      name\n      email\n    }\n    standardItem {\n      id\n      name\n      code\n      description\n      data\n    }\n    createdBy {\n      id\n      name\n      email\n    }\n  }\n}\n\nquery DashboardLibraryItemByCode($code: String!) {\n  libraryItemByCode(code: $code) {\n    id\n    category\n    scope\n    code\n    name\n    description\n    imageUrl\n    data\n    tags\n    isActive\n    isPopular\n  }\n}\n\nmutation DashboardCreateLibraryItem($input: CreateLibraryItemInput!) {\n  createLibraryItem(input: $input) {\n    id\n    category\n    scope\n    code\n    name\n    description\n    imageUrl\n    data\n    tags\n    isActive\n    isPopular\n    createdAt\n    company {\n      id\n      name\n    }\n    standardItem {\n      id\n      name\n      code\n    }\n    createdBy {\n      id\n      name\n      email\n    }\n    certifications {\n      id\n      code\n      name\n      data\n      tags\n      iconValue\n      isActive\n      createdAt\n    }\n  }\n}\n\nmutation DashboardUpdateLibraryItem($id: Int!, $input: UpdateLibraryItemInput!) {\n  updateLibraryItem(id: $id, input: $input) {\n    id\n    category\n    scope\n    code\n    name\n    description\n    imageUrl\n    data\n    tags\n    isActive\n    isPopular\n    updatedAt\n    company {\n      id\n      name\n    }\n    standardItem {\n      id\n      name\n      code\n    }\n    createdBy {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation DashboardDeleteLibraryItem($id: Int!) {\n  deleteLibraryItem(id: $id)\n}\n\nmutation DashboardSingleUpload($file: File!, $category: String, $description: String) {\n  singleUpload(file: $file, category: $category, description: $description)\n}\n\nquery DashboardStandardCategories($level: String, $parentId: Int) {\n  standardCategories(level: $level, parentId: $parentId) {\n    id\n    code\n    name\n    description\n    level\n    order\n    icon\n    image\n    isActive\n    isPublic\n    keywords\n    tags\n    parentId\n    subCategories {\n      id\n      name\n      code\n      level\n    }\n  }\n}\n\nquery DashboardMyCompanyCategories {\n  myCompanyCategories {\n    id\n    type\n    name\n    description\n    internalCode\n    isActive\n    customFields\n    standardCategoryId\n    parentId\n    subCategories {\n      id\n      name\n      internalCode\n    }\n  }\n}"): (typeof documents)["query DashboardPlatformStandards($category: String) {\n  platformStandards(category: $category) {\n    id\n    category\n    scope\n    code\n    name\n    description\n    imageUrl\n    data\n    tags\n    isActive\n    isPopular\n    createdAt\n    updatedAt\n    company {\n      id\n      name\n    }\n    createdBy {\n      id\n      name\n      email\n    }\n    certifications {\n      id\n      code\n      name\n      data\n      tags\n      iconValue\n      isActive\n      createdAt\n    }\n  }\n}\n\nquery DashboardMyCompanyLibrary($category: String) {\n  myCompanyLibrary(category: $category) {\n    id\n    category\n    scope\n    code\n    name\n    description\n    imageUrl\n    data\n    tags\n    isActive\n    isPopular\n    createdAt\n    updatedAt\n    standardItem {\n      id\n      name\n      code\n    }\n    createdBy {\n      id\n      name\n      email\n    }\n    certifications {\n      id\n      code\n      name\n      data\n      tags\n      iconValue\n      isActive\n      createdAt\n    }\n  }\n}\n\nquery DashboardLibraryItems($filter: LibraryFilterInput, $limit: Int, $offset: Int) {\n  libraryItems(filter: $filter, limit: $limit, offset: $offset) {\n    id\n    category\n    scope\n    code\n    name\n    description\n    imageUrl\n    data\n    tags\n    isActive\n    isPopular\n    createdAt\n    updatedAt\n    company {\n      id\n      name\n    }\n    standardItem {\n      id\n      name\n      code\n    }\n    createdBy {\n      id\n      name\n      email\n    }\n    certifications {\n      id\n      code\n      name\n      data\n      tags\n      iconValue\n      isActive\n      createdAt\n    }\n  }\n}\n\nquery DashboardLibraryItem($id: Int!) {\n  libraryItem(id: $id) {\n    id\n    category\n    scope\n    code\n    name\n    description\n    imageUrl\n    data\n    tags\n    isActive\n    isPopular\n    createdAt\n    updatedAt\n    company {\n      id\n      name\n      email\n    }\n    standardItem {\n      id\n      name\n      code\n      description\n      data\n    }\n    createdBy {\n      id\n      name\n      email\n    }\n  }\n}\n\nquery DashboardLibraryItemByCode($code: String!) {\n  libraryItemByCode(code: $code) {\n    id\n    category\n    scope\n    code\n    name\n    description\n    imageUrl\n    data\n    tags\n    isActive\n    isPopular\n  }\n}\n\nmutation DashboardCreateLibraryItem($input: CreateLibraryItemInput!) {\n  createLibraryItem(input: $input) {\n    id\n    category\n    scope\n    code\n    name\n    description\n    imageUrl\n    data\n    tags\n    isActive\n    isPopular\n    createdAt\n    company {\n      id\n      name\n    }\n    standardItem {\n      id\n      name\n      code\n    }\n    createdBy {\n      id\n      name\n      email\n    }\n    certifications {\n      id\n      code\n      name\n      data\n      tags\n      iconValue\n      isActive\n      createdAt\n    }\n  }\n}\n\nmutation DashboardUpdateLibraryItem($id: Int!, $input: UpdateLibraryItemInput!) {\n  updateLibraryItem(id: $id, input: $input) {\n    id\n    category\n    scope\n    code\n    name\n    description\n    imageUrl\n    data\n    tags\n    isActive\n    isPopular\n    updatedAt\n    company {\n      id\n      name\n    }\n    standardItem {\n      id\n      name\n      code\n    }\n    createdBy {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation DashboardDeleteLibraryItem($id: Int!) {\n  deleteLibraryItem(id: $id)\n}\n\nmutation DashboardSingleUpload($file: File!, $category: String, $description: String) {\n  singleUpload(file: $file, category: $category, description: $description)\n}\n\nquery DashboardStandardCategories($level: String, $parentId: Int) {\n  standardCategories(level: $level, parentId: $parentId) {\n    id\n    code\n    name\n    description\n    level\n    order\n    icon\n    image\n    isActive\n    isPublic\n    keywords\n    tags\n    parentId\n    subCategories {\n      id\n      name\n      code\n      level\n    }\n  }\n}\n\nquery DashboardMyCompanyCategories {\n  myCompanyCategories {\n    id\n    type\n    name\n    description\n    internalCode\n    isActive\n    customFields\n    standardCategoryId\n    parentId\n    subCategories {\n      id\n      name\n      internalCode\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation AuthOperationSignup($input: SignupInput!) {\n  signup(input: $input)\n}\n\nmutation AuthOperationLogin($email: String!, $password: String!) {\n  login(email: $email, password: $password)\n}\n\nmutation AuthOperationSignupOAuth($email: String!, $name: String!) {\n  signupOAuth(email: $email, name: $name)\n}\n\nmutation AuthOperationRefreshToken {\n  refreshToken\n}"): (typeof documents)["mutation AuthOperationSignup($input: SignupInput!) {\n  signup(input: $input)\n}\n\nmutation AuthOperationLogin($email: String!, $password: String!) {\n  login(email: $email, password: $password)\n}\n\nmutation AuthOperationSignupOAuth($email: String!, $name: String!) {\n  signupOAuth(email: $email, name: $name)\n}\n\nmutation AuthOperationRefreshToken {\n  refreshToken\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation FileUploadSingle($file: File!, $category: String, $description: String) {\n  singleUpload(file: $file, category: $category, description: $description)\n}\n\nmutation FileUploadMultiple($files: [File!]!, $category: String, $description: String) {\n  multipleUpload(files: $files, category: $category, description: $description)\n}"): (typeof documents)["mutation FileUploadSingle($file: File!, $category: String, $description: String) {\n  singleUpload(file: $file, category: $category, description: $description)\n}\n\nmutation FileUploadMultiple($files: [File!]!, $category: String, $description: String) {\n  multipleUpload(files: $files, category: $category, description: $description)\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "subscription NotificationOnNewNotification {\n  newNotification {\n    id\n    title\n    message\n    type\n    isRead\n    link\n    orderId\n    sampleId\n    productionTrackingId\n    createdAt\n  }\n}\n\nsubscription NotificationOnTaskAssigned {\n  taskAssigned {\n    id\n    title\n    description\n    priority\n    dueDate\n    createdAt\n  }\n}"): (typeof documents)["subscription NotificationOnNewNotification {\n  newNotification {\n    id\n    title\n    message\n    type\n    isRead\n    link\n    orderId\n    sampleId\n    productionTrackingId\n    createdAt\n  }\n}\n\nsubscription NotificationOnTaskAssigned {\n  taskAssigned {\n    id\n    title\n    description\n    priority\n    dueDate\n    createdAt\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query OrderNegotiations($orderId: Int!) {\n  orderNegotiations(orderId: $orderId) {\n    id\n    orderId\n    senderId\n    senderRole\n    unitPrice\n    productionDays\n    quantity\n    currency\n    message\n    status\n    respondedAt\n    respondedBy\n    createdAt\n    sender {\n      id\n      name\n      email\n    }\n    responder {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation SendOrderOffer($input: SendOrderOfferInput!) {\n  sendOrderOffer(input: $input) {\n    id\n    orderId\n    senderId\n    senderRole\n    unitPrice\n    productionDays\n    quantity\n    currency\n    message\n    status\n    createdAt\n  }\n}\n\nmutation RespondToOrderOffer($input: RespondToOfferInput!) {\n  respondToOrderOffer(input: $input) {\n    id\n    status\n    respondedAt\n    respondedBy\n  }\n}"): (typeof documents)["query OrderNegotiations($orderId: Int!) {\n  orderNegotiations(orderId: $orderId) {\n    id\n    orderId\n    senderId\n    senderRole\n    unitPrice\n    productionDays\n    quantity\n    currency\n    message\n    status\n    respondedAt\n    respondedBy\n    createdAt\n    sender {\n      id\n      name\n      email\n    }\n    responder {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation SendOrderOffer($input: SendOrderOfferInput!) {\n  sendOrderOffer(input: $input) {\n    id\n    orderId\n    senderId\n    senderRole\n    unitPrice\n    productionDays\n    quantity\n    currency\n    message\n    status\n    createdAt\n  }\n}\n\nmutation RespondToOrderOffer($input: RespondToOfferInput!) {\n  respondToOrderOffer(input: $input) {\n    id\n    status\n    respondedAt\n    respondedBy\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query BuyerOrders($skip: Int, $take: Int, $status: String, $search: String) {\n  orders(skip: $skip, take: $take, status: $status, search: $search) {\n    id\n    orderNumber\n    quantity\n    targetPrice\n    currency\n    deadline\n    status\n    notes\n    createdAt\n    updatedAt\n    collection {\n      id\n      name\n      modelCode\n      images\n      targetPrice\n      currency\n      company {\n        id\n        name\n      }\n    }\n    customer {\n      id\n      name\n      email\n    }\n    manufacturer {\n      id\n      name\n      email\n    }\n  }\n}\n\nquery BuyerOrderDetail($id: Int!) {\n  order(id: $id) {\n    id\n    orderNumber\n    quantity\n    targetPrice\n    currency\n    deadline\n    status\n    notes\n    unitPrice\n    productionDays\n    manufacturerResponse\n    actualProductionStart\n    createdAt\n    updatedAt\n    collection {\n      id\n      name\n      description\n      modelCode\n      season\n      gender\n      fit\n      trend\n      colors\n      sizeRange\n      fabricComposition\n      accessories\n      images\n      moq\n      targetPrice\n      currency\n      deadlineDays\n      notes\n      company {\n        id\n        name\n        email\n        phone\n        address\n        city\n        country\n        website\n      }\n    }\n    customer {\n      id\n      name\n      email\n      phone\n      company {\n        id\n        name\n        email\n        phone\n        address\n        city\n        country\n      }\n    }\n    manufacturer {\n      id\n      name\n      email\n      phone\n      company {\n        id\n        name\n        email\n        phone\n        address\n        city\n        country\n      }\n    }\n    productionTracking {\n      id\n      currentStage\n      overallStatus\n      progress\n      estimatedStartDate\n      estimatedEndDate\n      actualStartDate\n      actualEndDate\n      notes\n      customerApprovalStatus\n      customerApprovedAt\n      customerNote\n      revisionCount\n      stageUpdates {\n        id\n        stage\n        status\n        actualStartDate\n        actualEndDate\n        estimatedDays\n        notes\n        extraDays\n        isRevision\n        delayReason\n      }\n    }\n  }\n}\n\nmutation CustomerCounterOffer($id: Int!, $customerQuotedPrice: Float!, $customerQuoteDays: Int, $customerQuoteNote: String) {\n  updateOrder(\n    id: $id\n    customerQuotedPrice: $customerQuotedPrice\n    customerQuoteDays: $customerQuoteDays\n    customerQuoteNote: $customerQuoteNote\n    status: \"CUSTOMER_NEGOTIATING\"\n  ) {\n    id\n    orderNumber\n    status\n    customerQuotedPrice\n    customerQuoteDays\n    customerQuoteNote\n  }\n}\n\nmutation CustomerAcceptQuote($id: Int!) {\n  updateOrder(id: $id, status: \"CONFIRMED\") {\n    id\n    orderNumber\n    status\n  }\n}\n\nmutation CustomerRejectQuote($id: Int!) {\n  updateOrder(id: $id, status: \"REJECTED\") {\n    id\n    orderNumber\n    status\n  }\n}\n\nmutation ManufacturerAcceptCustomerQuote($orderId: Int!) {\n  manufacturerAcceptCustomerQuote(orderId: $orderId) {\n    id\n    orderNumber\n    status\n    unitPrice\n    productionDays\n  }\n}\n\nmutation CreateProductionPlan($orderId: Int!, $stagesJson: String!, $estimatedStartDate: DateTime, $notes: String) {\n  createProductionPlan(\n    orderId: $orderId\n    stagesJson: $stagesJson\n    estimatedStartDate: $estimatedStartDate\n    notes: $notes\n  ) {\n    id\n    currentStage\n    overallStatus\n    progress\n    estimatedStartDate\n    estimatedEndDate\n    notes\n    customerApprovalStatus\n  }\n}\n\nmutation UpdateProductionPlan($productionId: Int!, $stagesJson: String!, $notes: String) {\n  updateProductionPlan(\n    productionId: $productionId\n    stagesJson: $stagesJson\n    notes: $notes\n  ) {\n    id\n    currentStage\n    overallStatus\n    progress\n    estimatedStartDate\n    estimatedEndDate\n    notes\n    customerApprovalStatus\n    revisionCount\n  }\n}\n\nmutation SendProductionPlanForApproval($productionId: Int!) {\n  sendProductionPlanForApproval(productionId: $productionId) {\n    id\n    customerApprovalStatus\n    currentStage\n    overallStatus\n  }\n}\n\nmutation RespondToProductionPlan($productionId: Int!, $approved: Boolean!, $customerNote: String) {\n  respondToProductionPlan(\n    productionId: $productionId\n    approved: $approved\n    customerNote: $customerNote\n  ) {\n    id\n    customerApprovalStatus\n    customerApprovedAt\n    customerNote\n    currentStage\n    overallStatus\n  }\n}"): (typeof documents)["query BuyerOrders($skip: Int, $take: Int, $status: String, $search: String) {\n  orders(skip: $skip, take: $take, status: $status, search: $search) {\n    id\n    orderNumber\n    quantity\n    targetPrice\n    currency\n    deadline\n    status\n    notes\n    createdAt\n    updatedAt\n    collection {\n      id\n      name\n      modelCode\n      images\n      targetPrice\n      currency\n      company {\n        id\n        name\n      }\n    }\n    customer {\n      id\n      name\n      email\n    }\n    manufacturer {\n      id\n      name\n      email\n    }\n  }\n}\n\nquery BuyerOrderDetail($id: Int!) {\n  order(id: $id) {\n    id\n    orderNumber\n    quantity\n    targetPrice\n    currency\n    deadline\n    status\n    notes\n    unitPrice\n    productionDays\n    manufacturerResponse\n    actualProductionStart\n    createdAt\n    updatedAt\n    collection {\n      id\n      name\n      description\n      modelCode\n      season\n      gender\n      fit\n      trend\n      colors\n      sizeRange\n      fabricComposition\n      accessories\n      images\n      moq\n      targetPrice\n      currency\n      deadlineDays\n      notes\n      company {\n        id\n        name\n        email\n        phone\n        address\n        city\n        country\n        website\n      }\n    }\n    customer {\n      id\n      name\n      email\n      phone\n      company {\n        id\n        name\n        email\n        phone\n        address\n        city\n        country\n      }\n    }\n    manufacturer {\n      id\n      name\n      email\n      phone\n      company {\n        id\n        name\n        email\n        phone\n        address\n        city\n        country\n      }\n    }\n    productionTracking {\n      id\n      currentStage\n      overallStatus\n      progress\n      estimatedStartDate\n      estimatedEndDate\n      actualStartDate\n      actualEndDate\n      notes\n      customerApprovalStatus\n      customerApprovedAt\n      customerNote\n      revisionCount\n      stageUpdates {\n        id\n        stage\n        status\n        actualStartDate\n        actualEndDate\n        estimatedDays\n        notes\n        extraDays\n        isRevision\n        delayReason\n      }\n    }\n  }\n}\n\nmutation CustomerCounterOffer($id: Int!, $customerQuotedPrice: Float!, $customerQuoteDays: Int, $customerQuoteNote: String) {\n  updateOrder(\n    id: $id\n    customerQuotedPrice: $customerQuotedPrice\n    customerQuoteDays: $customerQuoteDays\n    customerQuoteNote: $customerQuoteNote\n    status: \"CUSTOMER_NEGOTIATING\"\n  ) {\n    id\n    orderNumber\n    status\n    customerQuotedPrice\n    customerQuoteDays\n    customerQuoteNote\n  }\n}\n\nmutation CustomerAcceptQuote($id: Int!) {\n  updateOrder(id: $id, status: \"CONFIRMED\") {\n    id\n    orderNumber\n    status\n  }\n}\n\nmutation CustomerRejectQuote($id: Int!) {\n  updateOrder(id: $id, status: \"REJECTED\") {\n    id\n    orderNumber\n    status\n  }\n}\n\nmutation ManufacturerAcceptCustomerQuote($orderId: Int!) {\n  manufacturerAcceptCustomerQuote(orderId: $orderId) {\n    id\n    orderNumber\n    status\n    unitPrice\n    productionDays\n  }\n}\n\nmutation CreateProductionPlan($orderId: Int!, $stagesJson: String!, $estimatedStartDate: DateTime, $notes: String) {\n  createProductionPlan(\n    orderId: $orderId\n    stagesJson: $stagesJson\n    estimatedStartDate: $estimatedStartDate\n    notes: $notes\n  ) {\n    id\n    currentStage\n    overallStatus\n    progress\n    estimatedStartDate\n    estimatedEndDate\n    notes\n    customerApprovalStatus\n  }\n}\n\nmutation UpdateProductionPlan($productionId: Int!, $stagesJson: String!, $notes: String) {\n  updateProductionPlan(\n    productionId: $productionId\n    stagesJson: $stagesJson\n    notes: $notes\n  ) {\n    id\n    currentStage\n    overallStatus\n    progress\n    estimatedStartDate\n    estimatedEndDate\n    notes\n    customerApprovalStatus\n    revisionCount\n  }\n}\n\nmutation SendProductionPlanForApproval($productionId: Int!) {\n  sendProductionPlanForApproval(productionId: $productionId) {\n    id\n    customerApprovalStatus\n    currentStage\n    overallStatus\n  }\n}\n\nmutation RespondToProductionPlan($productionId: Int!, $approved: Boolean!, $customerNote: String) {\n  respondToProductionPlan(\n    productionId: $productionId\n    approved: $approved\n    customerNote: $customerNote\n  ) {\n    id\n    customerApprovalStatus\n    customerApprovedAt\n    customerNote\n    currentStage\n    overallStatus\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CreateOrder($input: CreateOrderInput!) {\n  createOrder(input: $input) {\n    id\n    orderNumber\n    quantity\n    unitPrice\n    totalPrice\n    status\n    customerQuotedPrice\n    customerQuoteNote\n    collection {\n      id\n      name\n      modelCode\n      images\n    }\n    customer {\n      id\n      name\n      email\n    }\n    manufacture {\n      id\n      name\n      email\n    }\n    company {\n      id\n      name\n    }\n    createdAt\n  }\n}"): (typeof documents)["mutation CreateOrder($input: CreateOrderInput!) {\n  createOrder(input: $input) {\n    id\n    orderNumber\n    quantity\n    unitPrice\n    totalPrice\n    status\n    customerQuotedPrice\n    customerQuoteNote\n    collection {\n      id\n      name\n      modelCode\n      images\n    }\n    customer {\n      id\n      name\n      email\n    }\n    manufacture {\n      id\n      name\n      email\n    }\n    company {\n      id\n      name\n    }\n    createdAt\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation SendQuote($id: Int!, $unitPrice: Float!, $productionDays: Int!, $note: String) {\n  sendQuote(\n    id: $id\n    unitPrice: $unitPrice\n    productionDays: $productionDays\n    note: $note\n  ) {\n    id\n    orderNumber\n    status\n    unitPrice\n    totalPrice\n    productionDays\n    manufacturerResponse\n    updatedAt\n  }\n}\n\nmutation AcceptQuote($id: Int!, $note: String) {\n  acceptQuote(id: $id, note: $note) {\n    id\n    orderNumber\n    status\n    customerNote\n    updatedAt\n  }\n}\n\nmutation RejectQuote($id: Int!, $reason: String!) {\n  rejectQuote(id: $id, reason: $reason) {\n    id\n    orderNumber\n    status\n    customerNote\n    updatedAt\n  }\n}"): (typeof documents)["mutation SendQuote($id: Int!, $unitPrice: Float!, $productionDays: Int!, $note: String) {\n  sendQuote(\n    id: $id\n    unitPrice: $unitPrice\n    productionDays: $productionDays\n    note: $note\n  ) {\n    id\n    orderNumber\n    status\n    unitPrice\n    totalPrice\n    productionDays\n    manufacturerResponse\n    updatedAt\n  }\n}\n\nmutation AcceptQuote($id: Int!, $note: String) {\n  acceptQuote(id: $id, note: $note) {\n    id\n    orderNumber\n    status\n    customerNote\n    updatedAt\n  }\n}\n\nmutation RejectQuote($id: Int!, $reason: String!) {\n  rejectQuote(id: $id, reason: $reason) {\n    id\n    orderNumber\n    status\n    customerNote\n    updatedAt\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query SettingsGetCurrentUser {\n  me {\n    id\n    name\n    firstName\n    lastName\n    email\n    phone\n    jobTitle\n    bio\n    avatar\n    customAvatar\n    socialLinks\n    emailNotifications\n    pushNotifications\n    language\n    timezone\n  }\n}\n\nquery SettingsGetMyCompany {\n  myCompany {\n    id\n    name\n    email\n    phone\n    description\n    website\n    address\n    city\n    country\n    logo\n    coverImage\n    type\n    socialLinks\n    brandColors\n    profileSlug\n    isPublicProfile\n  }\n}\n\nmutation SettingsUpdateUserProfile($name: String, $firstName: String, $lastName: String, $phone: String, $jobTitle: String, $bio: String, $avatar: String, $customAvatar: String, $socialLinks: String) {\n  updateProfile(\n    name: $name\n    firstName: $firstName\n    lastName: $lastName\n    phone: $phone\n    jobTitle: $jobTitle\n    bio: $bio\n    avatar: $avatar\n    customAvatar: $customAvatar\n    socialLinks: $socialLinks\n  ) {\n    id\n    name\n    firstName\n    lastName\n    phone\n    jobTitle\n    bio\n    avatar\n    customAvatar\n    socialLinks\n  }\n}\n\nmutation SettingsUpdateUserNotifications($emailNotifications: Boolean, $pushNotifications: Boolean) {\n  updateProfile(\n    emailNotifications: $emailNotifications\n    pushNotifications: $pushNotifications\n  ) {\n    id\n    emailNotifications\n    pushNotifications\n  }\n}\n\nmutation SettingsUpdateUserPreferences($language: String, $timezone: String) {\n  updateProfile(language: $language, timezone: $timezone) {\n    id\n    language\n    timezone\n  }\n}\n\nmutation SettingsUpdateCompanyInfo($id: Int!, $name: String, $email: String, $phone: String, $description: String, $website: String, $address: String, $city: String, $country: String, $logo: String, $coverImage: String, $socialLinks: String, $brandColors: String, $profileSlug: String, $isPublicProfile: Boolean) {\n  updateCompany(\n    id: $id\n    name: $name\n    email: $email\n    phone: $phone\n    description: $description\n    website: $website\n    address: $address\n    city: $city\n    country: $country\n    logo: $logo\n    coverImage: $coverImage\n    socialLinks: $socialLinks\n    brandColors: $brandColors\n    profileSlug: $profileSlug\n    isPublicProfile: $isPublicProfile\n  ) {\n    id\n    name\n    email\n    phone\n    description\n    website\n    address\n    city\n    country\n    logo\n    coverImage\n    socialLinks\n    brandColors\n    profileSlug\n    isPublicProfile\n  }\n}\n\nmutation SettingsResendVerificationEmail {\n  resendVerificationEmail\n}"): (typeof documents)["query SettingsGetCurrentUser {\n  me {\n    id\n    name\n    firstName\n    lastName\n    email\n    phone\n    jobTitle\n    bio\n    avatar\n    customAvatar\n    socialLinks\n    emailNotifications\n    pushNotifications\n    language\n    timezone\n  }\n}\n\nquery SettingsGetMyCompany {\n  myCompany {\n    id\n    name\n    email\n    phone\n    description\n    website\n    address\n    city\n    country\n    logo\n    coverImage\n    type\n    socialLinks\n    brandColors\n    profileSlug\n    isPublicProfile\n  }\n}\n\nmutation SettingsUpdateUserProfile($name: String, $firstName: String, $lastName: String, $phone: String, $jobTitle: String, $bio: String, $avatar: String, $customAvatar: String, $socialLinks: String) {\n  updateProfile(\n    name: $name\n    firstName: $firstName\n    lastName: $lastName\n    phone: $phone\n    jobTitle: $jobTitle\n    bio: $bio\n    avatar: $avatar\n    customAvatar: $customAvatar\n    socialLinks: $socialLinks\n  ) {\n    id\n    name\n    firstName\n    lastName\n    phone\n    jobTitle\n    bio\n    avatar\n    customAvatar\n    socialLinks\n  }\n}\n\nmutation SettingsUpdateUserNotifications($emailNotifications: Boolean, $pushNotifications: Boolean) {\n  updateProfile(\n    emailNotifications: $emailNotifications\n    pushNotifications: $pushNotifications\n  ) {\n    id\n    emailNotifications\n    pushNotifications\n  }\n}\n\nmutation SettingsUpdateUserPreferences($language: String, $timezone: String) {\n  updateProfile(language: $language, timezone: $timezone) {\n    id\n    language\n    timezone\n  }\n}\n\nmutation SettingsUpdateCompanyInfo($id: Int!, $name: String, $email: String, $phone: String, $description: String, $website: String, $address: String, $city: String, $country: String, $logo: String, $coverImage: String, $socialLinks: String, $brandColors: String, $profileSlug: String, $isPublicProfile: Boolean) {\n  updateCompany(\n    id: $id\n    name: $name\n    email: $email\n    phone: $phone\n    description: $description\n    website: $website\n    address: $address\n    city: $city\n    country: $country\n    logo: $logo\n    coverImage: $coverImage\n    socialLinks: $socialLinks\n    brandColors: $brandColors\n    profileSlug: $profileSlug\n    isPublicProfile: $isPublicProfile\n  ) {\n    id\n    name\n    email\n    phone\n    description\n    website\n    address\n    city\n    country\n    logo\n    coverImage\n    socialLinks\n    brandColors\n    profileSlug\n    isPublicProfile\n  }\n}\n\nmutation SettingsResendVerificationEmail {\n  resendVerificationEmail\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;