/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n  mutation UpdateUser($id: Int!, $name: String!) {\n    updateUser(id: $id, name: $name) {\n      id\n      name\n    }\n  }\n": typeof types.UpdateUserDocument,
    "\n  query GetUser($id: Int!) {\n    user(id: $id) {\n      id\n      name\n      email\n    }\n  }\n": typeof types.GetUserDocument,
    "query Users($skip: Int, $take: Int, $role: String, $search: String) {\n  users(skip: $skip, take: $take, role: $role, search: $search) {\n    id\n    email\n    name\n    firstName\n    lastName\n    phone\n    role\n    department\n    jobTitle\n    isActive\n    isPendingApproval\n    createdAt\n    updatedAt\n    company {\n      id\n      name\n      type\n    }\n  }\n}\n\nquery UsersCountByRole {\n  usersCountByRole\n}\n\nquery User($id: Int!) {\n  user(id: $id) {\n    id\n    email\n    name\n    firstName\n    lastName\n    phone\n    role\n    department\n    jobTitle\n    isActive\n    isPendingApproval\n    avatar\n    customAvatar\n    bio\n    socialLinks\n    emailNotifications\n    pushNotifications\n    language\n    timezone\n    createdAt\n    updatedAt\n    company {\n      id\n      name\n      type\n      email\n    }\n  }\n}\n\nquery UserActivity($userId: Int!) {\n  userActivity(userId: $userId)\n}\n\nquery Companies($take: Int, $search: String) {\n  companies(take: $take, search: $search) {\n    id\n    name\n    type\n    email\n  }\n}\n\nmutation CreateUser($email: String!, $password: String!, $name: String!, $role: String!, $companyId: Int) {\n  createUserByAdmin(\n    email: $email\n    password: $password\n    name: $name\n    role: $role\n    companyId: $companyId\n  ) {\n    id\n    email\n    name\n    role\n    createdAt\n    company {\n      id\n      name\n    }\n  }\n}\n\nmutation UpdateUserForAdmin($id: Int!, $name: String, $email: String, $phone: String, $password: String, $role: String, $companyId: Int, $department: String, $jobTitle: String) {\n  updateUser(\n    id: $id\n    name: $name\n    email: $email\n    phone: $phone\n    password: $password\n    role: $role\n    companyId: $companyId\n    department: $department\n    jobTitle: $jobTitle\n  ) {\n    id\n    name\n    email\n    phone\n    role\n    companyId\n    department\n    jobTitle\n    updatedAt\n  }\n}\n\nmutation DeleteUser($id: Int!) {\n  deleteUserByAdmin(id: $id)\n}\n\nmutation ResetUserPassword($userId: Int!, $newPassword: String!) {\n  resetUserPassword(userId: $userId, newPassword: $newPassword) {\n    id\n    email\n    name\n  }\n}\n\nmutation UpdateUserRole($userId: Int!, $role: String!) {\n  updateUserRole(userId: $userId, role: $role) {\n    id\n    email\n    name\n    role\n  }\n}\n\nmutation ToggleUserStatus($userId: Int!, $isActive: Boolean!) {\n  toggleUserStatusByAdmin(userId: $userId, isActive: $isActive) {\n    id\n    email\n    name\n    isActive\n  }\n}\n\nmutation UpdateUserCompany($userId: Int!, $companyId: Int) {\n  updateUserCompanyByAdmin(userId: $userId, companyId: $companyId) {\n    id\n    email\n    name\n    company {\n      id\n      name\n    }\n  }\n}\n\nmutation BulkToggleUserStatus($userIds: [Int!]!, $isActive: Boolean!) {\n  bulkToggleUserStatus(userIds: $userIds, isActive: $isActive)\n}\n\nmutation BulkDeleteUsers($userIds: [Int!]!) {\n  bulkDeleteUsersByAdmin(userIds: $userIds)\n}": typeof types.UsersDocument,
    "mutation RequestPasswordReset($email: String!) {\n  requestPasswordReset(email: $email)\n}\n\nmutation ResetPassword($token: String!, $newPassword: String!) {\n  resetPassword(token: $token, newPassword: $newPassword)\n}\n\nmutation VerifyEmail($token: String!) {\n  verifyEmail(token: $token)\n}\n\nmutation ResendVerificationEmailAuth {\n  resendVerificationEmail\n}\n\nmutation RefreshToken {\n  refreshToken\n}": typeof types.RequestPasswordResetDocument,
    "query GetMyCompanyDashboard {\n  myCompany {\n    id\n    name\n    email\n    phone\n    website\n    address\n  }\n}\n\nmutation ResendVerificationEmailDashboard {\n  resendVerificationEmail\n}": typeof types.GetMyCompanyDashboardDocument,
    "mutation Login($email: String!, $password: String!) {\n  login(email: $email, password: $password)\n}\n\nmutation SignupOAuth($email: String!, $name: String!) {\n  signupOAuth(email: $email, name: $name)\n}\n\nmutation RefreshToken {\n  refreshToken\n}": typeof types.LoginDocument,
    "mutation SingleUpload($file: File!, $category: String, $description: String) {\n  singleUpload(file: $file, category: $category, description: $description)\n}\n\nmutation MultipleUpload($files: [File!]!, $category: String, $description: String) {\n  multipleUpload(files: $files, category: $category, description: $description)\n}": typeof types.SingleUploadDocument,
    "subscription OnNewNotification {\n  newNotification {\n    id\n    title\n    message\n    type\n    isRead\n    relatedEntityType\n    relatedEntityId\n    actionUrl\n    createdAt\n  }\n}\n\nsubscription OnTaskAssigned {\n  taskAssigned {\n    id\n    title\n    description\n    priority\n    dueDate\n    createdAt\n  }\n}": typeof types.OnNewNotificationDocument,
    "mutation Signup($input: SignupInput!) {\n  signup(input: $input)\n}": typeof types.SignupDocument,
    "query GetCurrentUser {\n  me {\n    id\n    name\n    firstName\n    lastName\n    email\n    phone\n    jobTitle\n    bio\n    avatar\n    customAvatar\n    socialLinks\n    emailNotifications\n    pushNotifications\n    language\n    timezone\n  }\n}\n\nquery GetMyCompany {\n  myCompany {\n    id\n    name\n    email\n    phone\n    description\n    website\n    address\n    city\n    country\n    logo\n    coverImage\n    type\n    socialLinks\n    brandColors\n    profileSlug\n    isPublicProfile\n  }\n}\n\nmutation UpdateUserProfile($name: String, $firstName: String, $lastName: String, $phone: String, $jobTitle: String, $bio: String, $avatar: String, $customAvatar: String, $socialLinks: String) {\n  updateProfile(\n    name: $name\n    firstName: $firstName\n    lastName: $lastName\n    phone: $phone\n    jobTitle: $jobTitle\n    bio: $bio\n    avatar: $avatar\n    customAvatar: $customAvatar\n    socialLinks: $socialLinks\n  ) {\n    id\n    name\n    firstName\n    lastName\n    phone\n    jobTitle\n    bio\n    avatar\n    customAvatar\n    socialLinks\n  }\n}\n\nmutation UpdateUserNotifications($emailNotifications: Boolean, $pushNotifications: Boolean) {\n  updateProfile(\n    emailNotifications: $emailNotifications\n    pushNotifications: $pushNotifications\n  ) {\n    id\n    emailNotifications\n    pushNotifications\n  }\n}\n\nmutation UpdateUserPreferences($language: String, $timezone: String) {\n  updateProfile(language: $language, timezone: $timezone) {\n    id\n    language\n    timezone\n  }\n}\n\nmutation UpdateCompanyInfo($id: Int!, $name: String, $email: String, $phone: String, $description: String, $website: String, $address: String, $city: String, $country: String, $logo: String, $coverImage: String, $socialLinks: String, $brandColors: String, $profileSlug: String, $isPublicProfile: Boolean) {\n  updateCompany(\n    id: $id\n    name: $name\n    email: $email\n    phone: $phone\n    description: $description\n    website: $website\n    address: $address\n    city: $city\n    country: $country\n    logo: $logo\n    coverImage: $coverImage\n    socialLinks: $socialLinks\n    brandColors: $brandColors\n    profileSlug: $profileSlug\n    isPublicProfile: $isPublicProfile\n  ) {\n    id\n    name\n    email\n    phone\n    description\n    website\n    address\n    city\n    country\n    logo\n    coverImage\n    socialLinks\n    brandColors\n    profileSlug\n    isPublicProfile\n  }\n}\n\nmutation ResendVerificationEmail {\n  resendVerificationEmail\n}": typeof types.GetCurrentUserDocument,
};
const documents: Documents = {
    "\n  mutation UpdateUser($id: Int!, $name: String!) {\n    updateUser(id: $id, name: $name) {\n      id\n      name\n    }\n  }\n": types.UpdateUserDocument,
    "\n  query GetUser($id: Int!) {\n    user(id: $id) {\n      id\n      name\n      email\n    }\n  }\n": types.GetUserDocument,
    "query Users($skip: Int, $take: Int, $role: String, $search: String) {\n  users(skip: $skip, take: $take, role: $role, search: $search) {\n    id\n    email\n    name\n    firstName\n    lastName\n    phone\n    role\n    department\n    jobTitle\n    isActive\n    isPendingApproval\n    createdAt\n    updatedAt\n    company {\n      id\n      name\n      type\n    }\n  }\n}\n\nquery UsersCountByRole {\n  usersCountByRole\n}\n\nquery User($id: Int!) {\n  user(id: $id) {\n    id\n    email\n    name\n    firstName\n    lastName\n    phone\n    role\n    department\n    jobTitle\n    isActive\n    isPendingApproval\n    avatar\n    customAvatar\n    bio\n    socialLinks\n    emailNotifications\n    pushNotifications\n    language\n    timezone\n    createdAt\n    updatedAt\n    company {\n      id\n      name\n      type\n      email\n    }\n  }\n}\n\nquery UserActivity($userId: Int!) {\n  userActivity(userId: $userId)\n}\n\nquery Companies($take: Int, $search: String) {\n  companies(take: $take, search: $search) {\n    id\n    name\n    type\n    email\n  }\n}\n\nmutation CreateUser($email: String!, $password: String!, $name: String!, $role: String!, $companyId: Int) {\n  createUserByAdmin(\n    email: $email\n    password: $password\n    name: $name\n    role: $role\n    companyId: $companyId\n  ) {\n    id\n    email\n    name\n    role\n    createdAt\n    company {\n      id\n      name\n    }\n  }\n}\n\nmutation UpdateUserForAdmin($id: Int!, $name: String, $email: String, $phone: String, $password: String, $role: String, $companyId: Int, $department: String, $jobTitle: String) {\n  updateUser(\n    id: $id\n    name: $name\n    email: $email\n    phone: $phone\n    password: $password\n    role: $role\n    companyId: $companyId\n    department: $department\n    jobTitle: $jobTitle\n  ) {\n    id\n    name\n    email\n    phone\n    role\n    companyId\n    department\n    jobTitle\n    updatedAt\n  }\n}\n\nmutation DeleteUser($id: Int!) {\n  deleteUserByAdmin(id: $id)\n}\n\nmutation ResetUserPassword($userId: Int!, $newPassword: String!) {\n  resetUserPassword(userId: $userId, newPassword: $newPassword) {\n    id\n    email\n    name\n  }\n}\n\nmutation UpdateUserRole($userId: Int!, $role: String!) {\n  updateUserRole(userId: $userId, role: $role) {\n    id\n    email\n    name\n    role\n  }\n}\n\nmutation ToggleUserStatus($userId: Int!, $isActive: Boolean!) {\n  toggleUserStatusByAdmin(userId: $userId, isActive: $isActive) {\n    id\n    email\n    name\n    isActive\n  }\n}\n\nmutation UpdateUserCompany($userId: Int!, $companyId: Int) {\n  updateUserCompanyByAdmin(userId: $userId, companyId: $companyId) {\n    id\n    email\n    name\n    company {\n      id\n      name\n    }\n  }\n}\n\nmutation BulkToggleUserStatus($userIds: [Int!]!, $isActive: Boolean!) {\n  bulkToggleUserStatus(userIds: $userIds, isActive: $isActive)\n}\n\nmutation BulkDeleteUsers($userIds: [Int!]!) {\n  bulkDeleteUsersByAdmin(userIds: $userIds)\n}": types.UsersDocument,
    "mutation RequestPasswordReset($email: String!) {\n  requestPasswordReset(email: $email)\n}\n\nmutation ResetPassword($token: String!, $newPassword: String!) {\n  resetPassword(token: $token, newPassword: $newPassword)\n}\n\nmutation VerifyEmail($token: String!) {\n  verifyEmail(token: $token)\n}\n\nmutation ResendVerificationEmailAuth {\n  resendVerificationEmail\n}\n\nmutation RefreshToken {\n  refreshToken\n}": types.RequestPasswordResetDocument,
    "query GetMyCompanyDashboard {\n  myCompany {\n    id\n    name\n    email\n    phone\n    website\n    address\n  }\n}\n\nmutation ResendVerificationEmailDashboard {\n  resendVerificationEmail\n}": types.GetMyCompanyDashboardDocument,
    "mutation Login($email: String!, $password: String!) {\n  login(email: $email, password: $password)\n}\n\nmutation SignupOAuth($email: String!, $name: String!) {\n  signupOAuth(email: $email, name: $name)\n}\n\nmutation RefreshToken {\n  refreshToken\n}": types.LoginDocument,
    "mutation SingleUpload($file: File!, $category: String, $description: String) {\n  singleUpload(file: $file, category: $category, description: $description)\n}\n\nmutation MultipleUpload($files: [File!]!, $category: String, $description: String) {\n  multipleUpload(files: $files, category: $category, description: $description)\n}": types.SingleUploadDocument,
    "subscription OnNewNotification {\n  newNotification {\n    id\n    title\n    message\n    type\n    isRead\n    relatedEntityType\n    relatedEntityId\n    actionUrl\n    createdAt\n  }\n}\n\nsubscription OnTaskAssigned {\n  taskAssigned {\n    id\n    title\n    description\n    priority\n    dueDate\n    createdAt\n  }\n}": types.OnNewNotificationDocument,
    "mutation Signup($input: SignupInput!) {\n  signup(input: $input)\n}": types.SignupDocument,
    "query GetCurrentUser {\n  me {\n    id\n    name\n    firstName\n    lastName\n    email\n    phone\n    jobTitle\n    bio\n    avatar\n    customAvatar\n    socialLinks\n    emailNotifications\n    pushNotifications\n    language\n    timezone\n  }\n}\n\nquery GetMyCompany {\n  myCompany {\n    id\n    name\n    email\n    phone\n    description\n    website\n    address\n    city\n    country\n    logo\n    coverImage\n    type\n    socialLinks\n    brandColors\n    profileSlug\n    isPublicProfile\n  }\n}\n\nmutation UpdateUserProfile($name: String, $firstName: String, $lastName: String, $phone: String, $jobTitle: String, $bio: String, $avatar: String, $customAvatar: String, $socialLinks: String) {\n  updateProfile(\n    name: $name\n    firstName: $firstName\n    lastName: $lastName\n    phone: $phone\n    jobTitle: $jobTitle\n    bio: $bio\n    avatar: $avatar\n    customAvatar: $customAvatar\n    socialLinks: $socialLinks\n  ) {\n    id\n    name\n    firstName\n    lastName\n    phone\n    jobTitle\n    bio\n    avatar\n    customAvatar\n    socialLinks\n  }\n}\n\nmutation UpdateUserNotifications($emailNotifications: Boolean, $pushNotifications: Boolean) {\n  updateProfile(\n    emailNotifications: $emailNotifications\n    pushNotifications: $pushNotifications\n  ) {\n    id\n    emailNotifications\n    pushNotifications\n  }\n}\n\nmutation UpdateUserPreferences($language: String, $timezone: String) {\n  updateProfile(language: $language, timezone: $timezone) {\n    id\n    language\n    timezone\n  }\n}\n\nmutation UpdateCompanyInfo($id: Int!, $name: String, $email: String, $phone: String, $description: String, $website: String, $address: String, $city: String, $country: String, $logo: String, $coverImage: String, $socialLinks: String, $brandColors: String, $profileSlug: String, $isPublicProfile: Boolean) {\n  updateCompany(\n    id: $id\n    name: $name\n    email: $email\n    phone: $phone\n    description: $description\n    website: $website\n    address: $address\n    city: $city\n    country: $country\n    logo: $logo\n    coverImage: $coverImage\n    socialLinks: $socialLinks\n    brandColors: $brandColors\n    profileSlug: $profileSlug\n    isPublicProfile: $isPublicProfile\n  ) {\n    id\n    name\n    email\n    phone\n    description\n    website\n    address\n    city\n    country\n    logo\n    coverImage\n    socialLinks\n    brandColors\n    profileSlug\n    isPublicProfile\n  }\n}\n\nmutation ResendVerificationEmail {\n  resendVerificationEmail\n}": types.GetCurrentUserDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateUser($id: Int!, $name: String!) {\n    updateUser(id: $id, name: $name) {\n      id\n      name\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateUser($id: Int!, $name: String!) {\n    updateUser(id: $id, name: $name) {\n      id\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetUser($id: Int!) {\n    user(id: $id) {\n      id\n      name\n      email\n    }\n  }\n"): (typeof documents)["\n  query GetUser($id: Int!) {\n    user(id: $id) {\n      id\n      name\n      email\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Users($skip: Int, $take: Int, $role: String, $search: String) {\n  users(skip: $skip, take: $take, role: $role, search: $search) {\n    id\n    email\n    name\n    firstName\n    lastName\n    phone\n    role\n    department\n    jobTitle\n    isActive\n    isPendingApproval\n    createdAt\n    updatedAt\n    company {\n      id\n      name\n      type\n    }\n  }\n}\n\nquery UsersCountByRole {\n  usersCountByRole\n}\n\nquery User($id: Int!) {\n  user(id: $id) {\n    id\n    email\n    name\n    firstName\n    lastName\n    phone\n    role\n    department\n    jobTitle\n    isActive\n    isPendingApproval\n    avatar\n    customAvatar\n    bio\n    socialLinks\n    emailNotifications\n    pushNotifications\n    language\n    timezone\n    createdAt\n    updatedAt\n    company {\n      id\n      name\n      type\n      email\n    }\n  }\n}\n\nquery UserActivity($userId: Int!) {\n  userActivity(userId: $userId)\n}\n\nquery Companies($take: Int, $search: String) {\n  companies(take: $take, search: $search) {\n    id\n    name\n    type\n    email\n  }\n}\n\nmutation CreateUser($email: String!, $password: String!, $name: String!, $role: String!, $companyId: Int) {\n  createUserByAdmin(\n    email: $email\n    password: $password\n    name: $name\n    role: $role\n    companyId: $companyId\n  ) {\n    id\n    email\n    name\n    role\n    createdAt\n    company {\n      id\n      name\n    }\n  }\n}\n\nmutation UpdateUserForAdmin($id: Int!, $name: String, $email: String, $phone: String, $password: String, $role: String, $companyId: Int, $department: String, $jobTitle: String) {\n  updateUser(\n    id: $id\n    name: $name\n    email: $email\n    phone: $phone\n    password: $password\n    role: $role\n    companyId: $companyId\n    department: $department\n    jobTitle: $jobTitle\n  ) {\n    id\n    name\n    email\n    phone\n    role\n    companyId\n    department\n    jobTitle\n    updatedAt\n  }\n}\n\nmutation DeleteUser($id: Int!) {\n  deleteUserByAdmin(id: $id)\n}\n\nmutation ResetUserPassword($userId: Int!, $newPassword: String!) {\n  resetUserPassword(userId: $userId, newPassword: $newPassword) {\n    id\n    email\n    name\n  }\n}\n\nmutation UpdateUserRole($userId: Int!, $role: String!) {\n  updateUserRole(userId: $userId, role: $role) {\n    id\n    email\n    name\n    role\n  }\n}\n\nmutation ToggleUserStatus($userId: Int!, $isActive: Boolean!) {\n  toggleUserStatusByAdmin(userId: $userId, isActive: $isActive) {\n    id\n    email\n    name\n    isActive\n  }\n}\n\nmutation UpdateUserCompany($userId: Int!, $companyId: Int) {\n  updateUserCompanyByAdmin(userId: $userId, companyId: $companyId) {\n    id\n    email\n    name\n    company {\n      id\n      name\n    }\n  }\n}\n\nmutation BulkToggleUserStatus($userIds: [Int!]!, $isActive: Boolean!) {\n  bulkToggleUserStatus(userIds: $userIds, isActive: $isActive)\n}\n\nmutation BulkDeleteUsers($userIds: [Int!]!) {\n  bulkDeleteUsersByAdmin(userIds: $userIds)\n}"): (typeof documents)["query Users($skip: Int, $take: Int, $role: String, $search: String) {\n  users(skip: $skip, take: $take, role: $role, search: $search) {\n    id\n    email\n    name\n    firstName\n    lastName\n    phone\n    role\n    department\n    jobTitle\n    isActive\n    isPendingApproval\n    createdAt\n    updatedAt\n    company {\n      id\n      name\n      type\n    }\n  }\n}\n\nquery UsersCountByRole {\n  usersCountByRole\n}\n\nquery User($id: Int!) {\n  user(id: $id) {\n    id\n    email\n    name\n    firstName\n    lastName\n    phone\n    role\n    department\n    jobTitle\n    isActive\n    isPendingApproval\n    avatar\n    customAvatar\n    bio\n    socialLinks\n    emailNotifications\n    pushNotifications\n    language\n    timezone\n    createdAt\n    updatedAt\n    company {\n      id\n      name\n      type\n      email\n    }\n  }\n}\n\nquery UserActivity($userId: Int!) {\n  userActivity(userId: $userId)\n}\n\nquery Companies($take: Int, $search: String) {\n  companies(take: $take, search: $search) {\n    id\n    name\n    type\n    email\n  }\n}\n\nmutation CreateUser($email: String!, $password: String!, $name: String!, $role: String!, $companyId: Int) {\n  createUserByAdmin(\n    email: $email\n    password: $password\n    name: $name\n    role: $role\n    companyId: $companyId\n  ) {\n    id\n    email\n    name\n    role\n    createdAt\n    company {\n      id\n      name\n    }\n  }\n}\n\nmutation UpdateUserForAdmin($id: Int!, $name: String, $email: String, $phone: String, $password: String, $role: String, $companyId: Int, $department: String, $jobTitle: String) {\n  updateUser(\n    id: $id\n    name: $name\n    email: $email\n    phone: $phone\n    password: $password\n    role: $role\n    companyId: $companyId\n    department: $department\n    jobTitle: $jobTitle\n  ) {\n    id\n    name\n    email\n    phone\n    role\n    companyId\n    department\n    jobTitle\n    updatedAt\n  }\n}\n\nmutation DeleteUser($id: Int!) {\n  deleteUserByAdmin(id: $id)\n}\n\nmutation ResetUserPassword($userId: Int!, $newPassword: String!) {\n  resetUserPassword(userId: $userId, newPassword: $newPassword) {\n    id\n    email\n    name\n  }\n}\n\nmutation UpdateUserRole($userId: Int!, $role: String!) {\n  updateUserRole(userId: $userId, role: $role) {\n    id\n    email\n    name\n    role\n  }\n}\n\nmutation ToggleUserStatus($userId: Int!, $isActive: Boolean!) {\n  toggleUserStatusByAdmin(userId: $userId, isActive: $isActive) {\n    id\n    email\n    name\n    isActive\n  }\n}\n\nmutation UpdateUserCompany($userId: Int!, $companyId: Int) {\n  updateUserCompanyByAdmin(userId: $userId, companyId: $companyId) {\n    id\n    email\n    name\n    company {\n      id\n      name\n    }\n  }\n}\n\nmutation BulkToggleUserStatus($userIds: [Int!]!, $isActive: Boolean!) {\n  bulkToggleUserStatus(userIds: $userIds, isActive: $isActive)\n}\n\nmutation BulkDeleteUsers($userIds: [Int!]!) {\n  bulkDeleteUsersByAdmin(userIds: $userIds)\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation RequestPasswordReset($email: String!) {\n  requestPasswordReset(email: $email)\n}\n\nmutation ResetPassword($token: String!, $newPassword: String!) {\n  resetPassword(token: $token, newPassword: $newPassword)\n}\n\nmutation VerifyEmail($token: String!) {\n  verifyEmail(token: $token)\n}\n\nmutation ResendVerificationEmailAuth {\n  resendVerificationEmail\n}\n\nmutation RefreshToken {\n  refreshToken\n}"): (typeof documents)["mutation RequestPasswordReset($email: String!) {\n  requestPasswordReset(email: $email)\n}\n\nmutation ResetPassword($token: String!, $newPassword: String!) {\n  resetPassword(token: $token, newPassword: $newPassword)\n}\n\nmutation VerifyEmail($token: String!) {\n  verifyEmail(token: $token)\n}\n\nmutation ResendVerificationEmailAuth {\n  resendVerificationEmail\n}\n\nmutation RefreshToken {\n  refreshToken\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetMyCompanyDashboard {\n  myCompany {\n    id\n    name\n    email\n    phone\n    website\n    address\n  }\n}\n\nmutation ResendVerificationEmailDashboard {\n  resendVerificationEmail\n}"): (typeof documents)["query GetMyCompanyDashboard {\n  myCompany {\n    id\n    name\n    email\n    phone\n    website\n    address\n  }\n}\n\nmutation ResendVerificationEmailDashboard {\n  resendVerificationEmail\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation Login($email: String!, $password: String!) {\n  login(email: $email, password: $password)\n}\n\nmutation SignupOAuth($email: String!, $name: String!) {\n  signupOAuth(email: $email, name: $name)\n}\n\nmutation RefreshToken {\n  refreshToken\n}"): (typeof documents)["mutation Login($email: String!, $password: String!) {\n  login(email: $email, password: $password)\n}\n\nmutation SignupOAuth($email: String!, $name: String!) {\n  signupOAuth(email: $email, name: $name)\n}\n\nmutation RefreshToken {\n  refreshToken\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation SingleUpload($file: File!, $category: String, $description: String) {\n  singleUpload(file: $file, category: $category, description: $description)\n}\n\nmutation MultipleUpload($files: [File!]!, $category: String, $description: String) {\n  multipleUpload(files: $files, category: $category, description: $description)\n}"): (typeof documents)["mutation SingleUpload($file: File!, $category: String, $description: String) {\n  singleUpload(file: $file, category: $category, description: $description)\n}\n\nmutation MultipleUpload($files: [File!]!, $category: String, $description: String) {\n  multipleUpload(files: $files, category: $category, description: $description)\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "subscription OnNewNotification {\n  newNotification {\n    id\n    title\n    message\n    type\n    isRead\n    relatedEntityType\n    relatedEntityId\n    actionUrl\n    createdAt\n  }\n}\n\nsubscription OnTaskAssigned {\n  taskAssigned {\n    id\n    title\n    description\n    priority\n    dueDate\n    createdAt\n  }\n}"): (typeof documents)["subscription OnNewNotification {\n  newNotification {\n    id\n    title\n    message\n    type\n    isRead\n    relatedEntityType\n    relatedEntityId\n    actionUrl\n    createdAt\n  }\n}\n\nsubscription OnTaskAssigned {\n  taskAssigned {\n    id\n    title\n    description\n    priority\n    dueDate\n    createdAt\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation Signup($input: SignupInput!) {\n  signup(input: $input)\n}"): (typeof documents)["mutation Signup($input: SignupInput!) {\n  signup(input: $input)\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetCurrentUser {\n  me {\n    id\n    name\n    firstName\n    lastName\n    email\n    phone\n    jobTitle\n    bio\n    avatar\n    customAvatar\n    socialLinks\n    emailNotifications\n    pushNotifications\n    language\n    timezone\n  }\n}\n\nquery GetMyCompany {\n  myCompany {\n    id\n    name\n    email\n    phone\n    description\n    website\n    address\n    city\n    country\n    logo\n    coverImage\n    type\n    socialLinks\n    brandColors\n    profileSlug\n    isPublicProfile\n  }\n}\n\nmutation UpdateUserProfile($name: String, $firstName: String, $lastName: String, $phone: String, $jobTitle: String, $bio: String, $avatar: String, $customAvatar: String, $socialLinks: String) {\n  updateProfile(\n    name: $name\n    firstName: $firstName\n    lastName: $lastName\n    phone: $phone\n    jobTitle: $jobTitle\n    bio: $bio\n    avatar: $avatar\n    customAvatar: $customAvatar\n    socialLinks: $socialLinks\n  ) {\n    id\n    name\n    firstName\n    lastName\n    phone\n    jobTitle\n    bio\n    avatar\n    customAvatar\n    socialLinks\n  }\n}\n\nmutation UpdateUserNotifications($emailNotifications: Boolean, $pushNotifications: Boolean) {\n  updateProfile(\n    emailNotifications: $emailNotifications\n    pushNotifications: $pushNotifications\n  ) {\n    id\n    emailNotifications\n    pushNotifications\n  }\n}\n\nmutation UpdateUserPreferences($language: String, $timezone: String) {\n  updateProfile(language: $language, timezone: $timezone) {\n    id\n    language\n    timezone\n  }\n}\n\nmutation UpdateCompanyInfo($id: Int!, $name: String, $email: String, $phone: String, $description: String, $website: String, $address: String, $city: String, $country: String, $logo: String, $coverImage: String, $socialLinks: String, $brandColors: String, $profileSlug: String, $isPublicProfile: Boolean) {\n  updateCompany(\n    id: $id\n    name: $name\n    email: $email\n    phone: $phone\n    description: $description\n    website: $website\n    address: $address\n    city: $city\n    country: $country\n    logo: $logo\n    coverImage: $coverImage\n    socialLinks: $socialLinks\n    brandColors: $brandColors\n    profileSlug: $profileSlug\n    isPublicProfile: $isPublicProfile\n  ) {\n    id\n    name\n    email\n    phone\n    description\n    website\n    address\n    city\n    country\n    logo\n    coverImage\n    socialLinks\n    brandColors\n    profileSlug\n    isPublicProfile\n  }\n}\n\nmutation ResendVerificationEmail {\n  resendVerificationEmail\n}"): (typeof documents)["query GetCurrentUser {\n  me {\n    id\n    name\n    firstName\n    lastName\n    email\n    phone\n    jobTitle\n    bio\n    avatar\n    customAvatar\n    socialLinks\n    emailNotifications\n    pushNotifications\n    language\n    timezone\n  }\n}\n\nquery GetMyCompany {\n  myCompany {\n    id\n    name\n    email\n    phone\n    description\n    website\n    address\n    city\n    country\n    logo\n    coverImage\n    type\n    socialLinks\n    brandColors\n    profileSlug\n    isPublicProfile\n  }\n}\n\nmutation UpdateUserProfile($name: String, $firstName: String, $lastName: String, $phone: String, $jobTitle: String, $bio: String, $avatar: String, $customAvatar: String, $socialLinks: String) {\n  updateProfile(\n    name: $name\n    firstName: $firstName\n    lastName: $lastName\n    phone: $phone\n    jobTitle: $jobTitle\n    bio: $bio\n    avatar: $avatar\n    customAvatar: $customAvatar\n    socialLinks: $socialLinks\n  ) {\n    id\n    name\n    firstName\n    lastName\n    phone\n    jobTitle\n    bio\n    avatar\n    customAvatar\n    socialLinks\n  }\n}\n\nmutation UpdateUserNotifications($emailNotifications: Boolean, $pushNotifications: Boolean) {\n  updateProfile(\n    emailNotifications: $emailNotifications\n    pushNotifications: $pushNotifications\n  ) {\n    id\n    emailNotifications\n    pushNotifications\n  }\n}\n\nmutation UpdateUserPreferences($language: String, $timezone: String) {\n  updateProfile(language: $language, timezone: $timezone) {\n    id\n    language\n    timezone\n  }\n}\n\nmutation UpdateCompanyInfo($id: Int!, $name: String, $email: String, $phone: String, $description: String, $website: String, $address: String, $city: String, $country: String, $logo: String, $coverImage: String, $socialLinks: String, $brandColors: String, $profileSlug: String, $isPublicProfile: Boolean) {\n  updateCompany(\n    id: $id\n    name: $name\n    email: $email\n    phone: $phone\n    description: $description\n    website: $website\n    address: $address\n    city: $city\n    country: $country\n    logo: $logo\n    coverImage: $coverImage\n    socialLinks: $socialLinks\n    brandColors: $brandColors\n    profileSlug: $profileSlug\n    isPublicProfile: $isPublicProfile\n  ) {\n    id\n    name\n    email\n    phone\n    description\n    website\n    address\n    city\n    country\n    logo\n    coverImage\n    socialLinks\n    brandColors\n    profileSlug\n    isPublicProfile\n  }\n}\n\nmutation ResendVerificationEmail {\n  resendVerificationEmail\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;